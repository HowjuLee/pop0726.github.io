<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<STYLE TYPE="text/css">
<!--
BODY {background-image:   url(../../../images/htmls/Slicebg.jpg);
background-position: right bottom;
background-repeat: no-repeat;
background-attachment: fixed;
}
-->
</STYLE>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<link rel="stylesheet" href="../../../css/style.css" type="text/css">
</head>

<body  leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" height="100%" border="0" cellpadding="0" cellspacing="0">
  <tr> 
    <td valign="top" height="20">&nbsp; </td>
  </tr>
  <tr>
    <td valign="top">
      <table width="92%" border="0" align="center" cellpadding="0" cellspacing="0">
        <tr> 
          <td class="text" valign="top"> 
            <p>　　<b>DO</b><br>
              <br>
              　　do用来说明一个可以并行执行的循环，它的形式如下：</p>
            <p>　　!$OMP DO [clause[[,] clause]...]<br>
              　　do_loop<br>
              　　[!$OMP END DO [NOWAIT]]</p>
            <p>　　可以附加的子句包括：</p>
            <p>　　PRIVATE(list)<br>
              　　FIRSTPRIVATE(list)<br>
              　　LASTPRIVATE(list)<br>
              　　REDUCTION({operator|intrinsic_procedure_name}:list)<br>
              　　SCHEDULE(type[,chunk])<br>
              　　ORDERED</p>
            <p>　　其中PRIVATE, FIRSTPRIVATE, LASTPRIVATE和REDUCTION为变量属性说明，稍后会做详细说明。（思考，为什么没有SHARED?）</p>
            <p>　　SCHEDULE给出了DO的各次迭代在各线程中的调度方式。它包括两个参数，type为调度类型，chunk为调度块大小，它必须为正整数。<br>
              　　<br>
              　　type可能的取值如下：</p>
            <p>　　☆ STATIC<br>
              　　☆ DYNAMIC<br>
              　　☆ GUIDED<br>
              　　☆ RUNTIME</p>
            <p>　　STATIC 静态调度。循环在各线程中的任务分配编译时刻确定。设工作线程数目为nthread，如果chunk缺省，那么循环将被被尽可能均匀的分为nthread块，每个线程各一块；如果给定chunk，循环的各次迭代将按round-robin的方式在各线程中分配，块的大小为chunk。如下面的图所示（一维循环，四个线程）：<br>
              　　<img src="../../../images/img_text/ch08/p8_2_3.gif" width="265" height="139"><br>
              <br>
              　　!$OMP DO SCHEDULE(STATIC)<br>
              　　　DO I = 1, 128, 1<br>
              　　　　do_body<br>
              　　　END DO<br>
              　　!$OMP END DO<br>
              <img src="../../../images/img_text/ch08/p8_2_4.gif" width="480" height="64"><br>
              　　（a）STATIC调度，chunk缺省<br>
              <br>
              　　!$OMP DO SCHEDULE(STATIC, 16)<br>
              　　　DO I=1,128,1<br>
              　　　　do_body<br>
              　　　END DO<br>
              　　!$OMP END DO<br>
              <img src="../../../images/img_text/ch08/p8_2_5.gif" width="448" height="62"> 
              <br>
              　　（b）STATIC调度，chunk = 16<br>
              <br>
              　　DYNAMIC 动态调度。这种情况下，系统将循环的划分成chunk大小的块，放到一个任务池中，各线程各自到任务池中取回本次的任务，完成以后，再取下一个任务。chunk给出了每次所取任务块的大小，如果缺省，系统默认为1。</p>
            <p>　　!$OMP DO SCHEDULE(DYNAMIC, 16)<br>
              　　　DO I=1,128,1<br>
              　　　　do_body<br>
              　　　END DO<br>
              　　!$OMP END DO</p>
            <p>　　一个可能的运行时任务分配示意图如下：<br>
              <img src="../../../images/img_text/ch08/p8_2_5.gif" width="448" height="62"><br>
              　　（c）DYNAMIC调度，chunk = 16<br>
              <br>
              　　GUIDED 指数动态调度。它和DYNAMIC调度的基本机制相同，不同的是调度块大小的确定。从任务池中取出的任务块尺寸依次成指数递减(一般是减半)（思考，这有什么好处？）。初始尺寸与编译器实现有关，而chunk给出的是最小的调度块尺寸（缺省为1）。</p>
            <p>　　!$OMP DO SCHEDULE(GUIDED, 16)<br>
              　　　DO I=1,128,1<br>
              　　　　do_body<br>
              　　　END DO<br>
              　　!$OMP END DO</p>
            <p>　　一个可能的运行时任务分配示意图如下（假设编译器中给出的初始块大小为32）：<br>
              　　<img src="../../../images/img_text/ch08/p8_2_6.gif" width="390" height="63"><br>
              　　（d）GUIDED调度，chunk = 16<br>
              <br>
              　　RUNTIME 运行时调度。调度参数由运行时环境变量OMP_SCHEDULE给出。请参见后面的内容。</p>
            <p>　　ORDERED子句将这个并行循环标记为&quot;顺序&quot;循环，即循环体中有部分语句必须顺序执行（参见下面的ORDERED/END 
              ORDERED指导语句的内容）。</p>
            <p>　　END DO处的NOWAIT子句指明已经完成任务的线程不用在END DO处等待，直接可以执行下面的任务（在END DO处默认有一个BARRIER操作，如果给出NOWAIT，则没有这个BARRIER操作，下面各指导语句的NOWAIT含义相同，不再重复说明）。</p>
            <p>　　<font color="#000000">一个例子：下面的程序用第七章中提到的计算π的算法采用OpenMP Fortran来计算π。</font></p>
            <p><font color="#000000"> 　　PROGRAM pie<br>
              　　IMPLICIT NONE<br>
              　　INTEGER :: n,i,nnode,nthread,inode<br>
              　　INTEGER, EXTERNAL :: omp_get_num_procs,omp_get_thread_num<br>
              　　REAL(8) :: w,x,sum,pi<br>
              　　WRITE(6,'('' program pi'')')<br>
              　　nnode=omp_get_num_procs()<br>
              　　WRITE(6,'('' number of processors = '',i2)')nnode<br>
              　　! read in number of strips<br>
              　　WRITE(6,'('' enter number of strips to use for integration '')')<br>
              　　READ(5,*)n<br>
              　　w=1.0d0/REAL(n)<br>
              　　sum=0.0d0<br>
              　　WRITE(6,'('' enter number of threads to use '')')<br>
              　　READ(5,*)nthread<br>
              　　CALL omp_set_num_threads(nthread)<br>
              　　!$OMP parallel default(shared) private(i,x,inode) reduction(+:sum)<br>
              　　!$OMP do schedule(static,n/nthread)<br>
              　　DO i=1,n<br>
              　　　inode=omp_get_thread_num()<br>
              　　　WRITE(6,'(i2,'' doing iteration '',i8)')inode,i<br>
              　　　x=w*(REAL(i)-0.5d0)<br>
              　　　sum=sum+4.0d0/(1.0d0+x*x)<br>
              　　END DO<br>
              　　!$OMP end parallel<br>
              　　pi=w*sum<br>
              　　WRITE(6,'('' pi = '',g17.10)')pi<br>
              　　END PROGRAM pie</font></p>
            <p><font color="#000000">　　用OpenMP编译器可以直接把上面的程序编译为可运行程序，比如使用Intel编译器，使用命令可能如下：</font></p>
            <p><font color="#000000"> 　　　　ifc -openmp -o pie pie.f</font></p>
            <p><font color="#000000">　　然后用下面的命令设置环境变量并运行：</font></p>
            <p><font color="#000000"> 　　　　setenv OMP_NUM_THREADS 4<br>
              　　　　./pie</font></p>
            </td>
        </tr>
      </table>
      <br>
    </td>
  </tr>
</table>
</body>
</html>
