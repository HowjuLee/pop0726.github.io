<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<STYLE TYPE="text/css">
<!--
BODY {background-image:   url(../../../images/htmls/Slicebg.jpg);
background-position: right bottom;
background-repeat: no-repeat;
background-attachment: fixed;
}
-->
</STYLE>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<link rel="stylesheet" href="../../../css/style.css" type="text/css">
</head>

<body  leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" height="100%" border="0" cellpadding="0" cellspacing="0">
  <tr> 
    <td valign="top" height="20">&nbsp; </td>
  </tr>
  <tr>
    <td valign="top">
      <table width="92%" border="0" align="center" cellpadding="0" cellspacing="0">
        <tr> 
          <td class="text" valign="top"> 
            <p> 　　<b>APRAM模型构成<a name="01"></a></b><br>
              　　分相（Phase）PRAM模型是一个APRAM（Asynchronous Parallel Random Access Machine，异步随机存取并行机器）模型。它由p个处理器组成，特点是每个处理器都有自己的局部存储器、局部时钟和局部程序，处理器之间的通信通过全局共享存储器进行。每个全局时钟，所以各处理器异步的独立执行各自的程序，处理器之间任何时间上的依赖关系（执行次序）需要明确的在各处理器的程序中加入同步障碍语句（Synchronization 
              Barrier）来实现，一条指令可以在非确定（无界）但有限的时间内完成。<br>
              <br>
              　　<b>APRAM模型的指令类型<a name="02"></a></b><br>
              　　APRAM中的指令有四种类型：<br>
              　　● 全局读，将全局存储单元中的内容读到处理器得局部存储单元中；<br>
              　　● 局部操作，对局部存储器中的数据执行局部操作，操作的结果存放到局部存储器中；<br>
              　　● 全局写，将局部存储器单元中的内容写入全局存储单元中；<br>
              　　● 同步，同步是计算中的一个逻辑点，在该点各处理器均需要等待其他的处理器也到达该点后才能继续执行它们的局部程序。<br>
              <br>
              　　<b>APRAM模型中的计算<a name="03"></a></b><br>
              　　APRAM模型中，计算由一系列用同步障碍语句分开的全局相（Global Phase）所组成。如下面的图。在全局相内，每个处理器异步的运行其局部的程序；每个局部程序中的最后一条指令是一条同步障碍指令，各处理器均可以异步的读取和写入全局存储器，但在同一个全局相中，不允许两个处理器访问同一单元。正是因为不同的处理器访问存储单元总是由同步障碍指令所分开，所以指令完成时间上的差异并不影响整个计算。 
              <br>
              <br>
              　　　　　　　处理器1　　　　处理器2 　　　… 　　　处理器p<br>
              　　　　　　　read x1 　　　 read x3 　　　　　　　 read xn<br>
              　phase 1 　　read x2 　　　　　* 　　　　　　　　　　 *<br>
              　　　　　　　　 * 　　　　　write to B 　　　　　　　 *<br>
              　　　　　　　write to A 　　write to C 　　　　　　write to D<br>
              　障碍同步　<img src="../../../images/img_text/ch04/5.gif" height="5" width="330"><br>
              <br>
              　　　　　　　read B 　　　　read A 　　　　　　　　read C<br>
              　phase 2 　　　 * 　　　　　　　* 　　　　　　　　　　*<br>
              　　　　　　　write to B 　　write to D <br>
              <br>
              　障碍同步　<img src="../../../images/img_text/ch04/5.gif" height="5" width="330"><br>
              <br>
              　 　　　　　　　* 　　　　　write to C 　　　　　　write to B<br>
              　　　　　　　 read D 　　　　　　　　　　　　　　　read A<br>
              　phase 3 　　　 * 　　　　　　　*<br>
              　　　　　　　　　　　　　　　　　　　　　　　　　　write to B<br>
              <br>
              　障碍同步　<img src="../../../images/img_text/ch04/5.gif" height="5" width="330"><br>
              <br>
              　　<b>APRAM模型中的时间计算<a name="04"></a></b><br>
              　　使用APRAM模型计算算法的时间复杂度时，假定局部操作为单位时间；全局读/写时间为d，它定量化了通信延迟，代表读/写全局存储器的平均时间，d随计算机中的处理器增加而增加；同步障碍指令的时间为B，它是处理器数p的非降函数B=B(p)。在APRAM中假定上述参数服从如下的关系<br>
              　　<img src="../../../images/img_text/ch04/6.gif" width="91" height="19"><br>
              　　同时<img src="../../../images/img_text/ch04/7.gif" width="117" height="22" align="absmiddle">或<img src="../../../images/img_text/ch04/8.gif" width="160" height="20" align="absmiddle"><br>
              　　<br>
              　　令tph为全局相内各处理器指令执行时间的最大值，则整个程序运行时间T为各相的时间之和加上B乘以同步障碍的次数，即<br>
              　　<img src="../../../images/img_text/ch04/9.gif" width="104" height="27" align="absmiddle">同步障碍次数<br>
              <br>
              　　总之，APRAM模型比其PRAM来更接近于实际的并行计算机，且保留了PRAM编程的简捷性；由于使用了同步障碍指令，所以不管各处理器的延迟有多长，程序必定是正确的；而且因为APRAM模型中的成本参数是定量化的，所以对算法的分析也不困难。<br>
            </p>
            </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
