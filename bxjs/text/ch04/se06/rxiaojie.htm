<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<STYLE TYPE="text/css">
<!--
BODY {background-image:   url(../../../images/htmls/Slicebg.jpg);
background-position: right bottom;
background-repeat: no-repeat;
background-attachment: fixed;
}
-->
</STYLE>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../css/style.css" type="text/css">
</head>

<body  leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" height="100%" border="0" cellpadding="0" cellspacing="0">
  <tr> 
    <td valign="top" height="20">&nbsp; </td>
  </tr>
  <tr>
    <td valign="top">
      <table width="92%" border="0" align="center" cellpadding="0" cellspacing="0">
        <tr> 
          <td class="text" valign="top"> 
            <p> 　　并行计算模型是设计和分析并行算法的基础。PRAM模型由于过于抽象而不能很好地反映并行算法的实际运行性能，所以研究考虑通信、同步等因素的影响，从而建立能更真实的反映并行算法运行性能的更实际的计算模型是当今并行算法研究的主要方向之一。本节后面讨论的模型都属于这种模型。但过去几年来，学术界主要是从理论分析的角度，来研究它们之上的一些典型的并行算法的设计与分析；而近期的研究热点逐渐从这些模型上的算法研究转向了利用这些模型进行程序设计的研究，即从理论研究转向了实际应用。因为任何一种并行算法的应用都最终落实到具体的编程上，所以这种转变是顺应应用要求的。例如，一些研究者就为BSP模型构造了一些函数库，这些BSP库就是一些为程序员编写BSP应用程序（这些应用程序按照BSP的超级计算步的风格进行编写）所提供的一组简单有力的编程界面函数，这些函数可以改善程序的可移植性而不依赖于具体的并行计算机结构。尽管PVM和MPI等也是目前可供使用的开发可移植并行代码的方法，但它们的功能过于复杂而难于掌握，而且它们都没有为编程者提供能设计高效代码的成本函数，而像BSP模型却提供了简单和可定量分析程序运行时间的成本函数。因此研究基于这些实用计算模型的并行程序设计方法是非常有意义的。 <br>
            </p>
            </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
