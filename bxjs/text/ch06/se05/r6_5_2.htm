<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<STYLE TYPE="text/css">
<!--
BODY {background-image:   url(../../../images/htmls/Slicebg.jpg);
background-position: right bottom;
background-repeat: no-repeat;
background-attachment: fixed;
}
-->
</STYLE>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../css/style.css" type="text/css">
</head>

<body  leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" height="100%" border="0" cellpadding="0" cellspacing="0">
  <tr> 
    <td valign="top"> <br>
      <table width="92%" border="0" align="center" cellpadding="0" cellspacing="0">
        <tr> 
          <td class="text" valign="top"> 
            <p>　　设有一个容量为c的背包和n个编号分别为1到n物体，设物体i的重量和效用指数分别是整数w<sub>i</sub>和p<sub>i</sub>。定义向量<img src="../../../images/img_text/ch06/128.gif" width="96" height="21" align="absmiddle">为背包状态。所谓0/1背包问题就是求背包状态 
              ，使得<br>
              　　　　　　　　　　　<img src="../../../images/img_text/ch06/129.gif" width="144" height="39"><br>
              　　并且使下式的值为最大<br>
              　　　　　　　　　　　<img src="../../../images/img_text/ch06/130.gif" width="43" height="39" align="absmiddle"><br>
              　　<font color="#000000">通俗地说，背包问题就是把n个物体中的若干个塞进背包，使得重量不超过一定的界，并且物体的效用指数之和最大。<br>
              <br>
              　　当v<sub>i</sub>可以取除了0和1之外的其它值时，问题仍然属于背包问题，但不是0/1背包问题。所谓一维背包问题，是指物体只有一个约束条件：重量。如果有多个约束条件则称为多维背包问题。<br>
              <br>
              　　解决背包问题最简单的方法是穷举法，即比较所有可能的2<sup>n</sup>中情况，找出满足重量约束条件并且效用指数之和最大的一种情况。这种方法的最大缺点在于其时间的指数增长率。下面将会看到，使用动态规划法可以在当<img src="../../../images/img_text/ch06/131.gif" width="73" height="21" align="absmiddle">时得到较低的指数增长率，c越小则问题解决的时间复杂度越优于穷举法。</font><br>
              <br>
              　　设F[i, x]为用i个对象<img src="../../../images/img_text/ch06/132.gif" width="65" height="18" align="absmiddle">填充容量为x的箱子的背包问题的解，则F[n, 
              c]为问题的解。背包问题的动态规划递归表达式为：<br>
              　　　　　　　　　<img src="../../../images/img_text/ch06/133.gif" width="352" height="64" align="absmiddle"><br>
              　　简单地解释一下上面的式子：对于F[i, x]，如果其中包含了对象i，则F[i, x]可以表达为：<br>
              　　　　　　　　　<img src="../../../images/img_text/ch06/134.gif" width="158" height="21"><br>
              　　如果没有包含对象i，则F[i, x]可以表达为：<br>
              　　　　　　　　　<img src="../../../images/img_text/ch06/135.gif" width="107" height="18"><br>
              　　取二者中的较大者（因为得到最大效用）得到上面的递推式。<br>
              <br>
              　　根据上面的递推式，可以构造一个n×c的矩阵F来存放F[i, x]（其中<img src="../../../images/img_text/ch06/136.gif" width="100" height="18" align="absmiddle">），见图6.5.2。由于每一行的计算都依赖且只依赖于下面一行中的两个元素（而不依赖于同行的元素），因此按照行来逐次计算矩阵各个元素的值比较方便。由递推式可以知道，矩阵每一行中每个元素的计算都只需要O(1)的时间，因此串行计算整个矩阵所花的时间是O(nc)。<br>
              <br>
              　　再考察在c个处理器（P<sub>0</sub>到P<sub>c-1</sub>）的CREW PRAM并行体系结构上的并行化。每个处理器计算矩阵的一列（只所以不是每个处理器计算一行，理由同串行的情况），计算过程分n次迭代。在第j次迭代中，计算第r行的处理器P<sub>r-1</sub>需要知道F[j-1, 
              r]和F[j-1, r-wj] 的值。由于是共享内存的体系结构，处理器可以在O(1)时间内取到任何元素的值，并在O(1)时间内把结果计算出来，这说明每次迭代需要单位时间。因此总的并行处理时间为<img src="../../../images/img_text/ch06/9.gif" width="31" height="18" align="absmiddle">。类似可以知道，在CREW 
              PRAM体系结构上p（P≤n）个处理器的并行处理时间为<img src="../../../images/img_text/ch06/137.gif" width="40" height="38" align="absmiddle">。<br>
　<img src="../../../images/img_text/ch06/138.gif" width="432" height="299"><br>
              　 　　　　　　　　图6.5.2一维0/1背包问题的子问题划分和求解<br>
              <br>
              　　当c个处理器互联成一个超立方体结构时，假设每个处理器都在自己的本地内存中保存有每个对象的重量与效用指数，并且处理器Pr上要完成F[j, 
              r+1]（1≤j≤n）的计算。计算F[j, r]需要F[j-1, r] 和F[j-1, r-wj]，其中F[j-1, r]存在本地内存中，而F[j-1, 
              r-wj]则需要通过处理器之间的通信来获取。在超立方体上采用切通路由（Cut-Through Routing）完成这些通信操作需要的时间是<img src="../../../images/img_text/ch06/139.gif" width="89" height="21" align="absmiddle">。设单个处理器上每次迭代所花的时间是 
              ，则考虑到通信后每次迭代所花的时间是：<img src="../../../images/img_text/ch06/140.gif" width="112" height="21" align="absmiddle">。因此解决整个问题（n次迭代）的并行处理时间为<br>
              　　　　　　　　　　　<img src="../../../images/img_text/ch06/141.gif" width="87" height="22"><br>
              　　总成本为：<br>
              　　　　　　　　　　　<img src="../../../images/img_text/ch06/142.gif" width="99" height="22"><br>
              　　可见，当处理器个数p=c时，超立方体上的上述并行算法不是成本最佳的（即并行成本的量级高于串行成本）。 <br>
              <br>
              　　在超立方体体系结构中，当处理器个数p&lt;n时，每个处理器要计算矩阵多列的值，每个处理器上的计算时间为<img src="../../../images/img_text/ch06/143.gif" width="27" height="38" align="absmiddle">。计算通信时间时注意到每个处理器所需要的矩阵元素可能来自于两个远程处理器，因此通信时间至多为(<img src="../../../images/img_text/ch06/144.gif" width="129" height="21" align="absmiddle">)。因此n次迭代所花的总时间是<br>
              　　　　　　　　　　　<img src="../../../images/img_text/ch06/145.gif" width="117" height="38" align="absmiddle">。<br>
              　　总成本为：<br>
              　　　　　　　　　　　<img src="../../../images/img_text/ch06/146.gif" width="132" height="22"><br>
              　　当<img src="../../../images/img_text/ch06/147.gif" width="83" height="18" align="absmiddle">时，并行成本等于串行成本。可见上述算法的可扩展性不错。</p>
            </td>
        </tr>
      </table>
      
    </td>
  </tr>
</table>
</body>
</html>
