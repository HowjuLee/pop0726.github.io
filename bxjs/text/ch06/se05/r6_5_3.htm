<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<STYLE TYPE="text/css">
<!--
BODY {background-image:   url(../../../images/htmls/Slicebg.jpg);
background-position: right bottom;
background-repeat: no-repeat;
background-attachment: fixed;
}
-->
</STYLE>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../css/style.css" type="text/css">
</head>

<body  leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" height="100%" border="0" cellpadding="0" cellspacing="0">
  <tr> 
    <td valign="top"> <br>
      <table width="92%" border="0" align="center" cellpadding="0" cellspacing="0">
        <tr> 
          <td class="text" valign="top"> 
            <p>　　<span class="text">在阐述最长公共子串问题之前，先给出几个定义。<br>
              <br>
              　　<b>序列的长度</b> 序列<img src="../../../images/img_text/ch06/148.gif" width="118" height="21" align="absmiddle">中的元素个数n称为序列的长度或称为序列的秩，记为|A|。<br>
              <br>
              　　<b>子序列</b>（Subsequence） 给定一个序列<img src="../../../images/img_text/ch06/148.gif" width="118" height="21" align="absmiddle">和另一个序列B，如果从A中删除一些元素后能够得到B，则称B为A的子序列，记为<img src="../../../images/img_text/ch06/149.gif" width="39" height="17" align="absmiddle">。<br>
              <br>
              　　<b>公共子序列</b>（Common-Subsequence） 设A、B、C为三个序列，如果C既是A的子序列，又是B的子序列，则称C为A和B的公共子序列。<br>
              <br>
              　　<b>最长公共子序列</b>（Longest-Common-Subsequence） 设A、B为两个序列，S(A, B)为两个序列的公共子序列的集合，即<img src="../../../images/img_text/ch06/150.gif" width="172" height="18" align="absmiddle">，则S(A, 
              B)中长度最大的序列定义为两个序列A、B的最长公共子序列。<br>
              <br>
              　　此外，把序列A的前j个元素所构成的子序列记为Aj，A的第j个元素记为A[j]。<br>
              <br>
              　　<font color="#000000">比如序列&lt;a, b, f&gt;是序列&lt;a, b, c, d, e, 
              f&gt;的子序列，但不是&lt;a, f, b, d&gt;的子序列。两个序列&lt;a, b, c, d, e, f&gt;和&lt;a, 
              e, h, k, c, z, f&gt;的所有公共子序列如下：<br>
              　　　　　　　　　　　　　&lt;a&gt;、&lt;c&gt;、&lt;e&gt;、&lt;f&gt;、<br>
              　　　　　　　　　　　　　&lt;a, c&gt;、&lt;a, e&gt;、&lt;a, f&gt;、&lt;c, f&gt;、&lt;e, 
              f&gt;<br>
              　　　　　　　　　　　　　&lt;a, c, f&gt;、&lt;a, e, f&gt;<br>
              　　其中&lt;a, c, f&gt;和&lt;a, e, f&gt;是最长公共子序列。</font><br>
              <br>
              　　用动态规划法解决两个序列A、B的最长公共子序列问题，可以定义函数F[i, j]表示A的前i个元素所构成的子序列与B的前j个子串所构成的子序列的最长公共子序列的长度。这样求A、B的最长公共子序列就是求F[|A|, 
              |B|]。动态规划递推表达式如下：<br>
              　　　　　　　　　　<img src="../../../images/img_text/ch06/151.gif" width="334" height="71"><br>
              <br>
              　　上述递推式可以这样解释：假设F[i-1,j-1] 、F[i-1,j] 、F[i,j-1]均为已知，来求F[i,j]。考虑序列A的第i个元素A[i]和B的的j个元素B[j]，A[i]=B[j]时，则必然有F[i,j]=F[i-1,j-1]+1，否则如果有F[i,j]-F[i-1,j-1]＞1，则把Ai与Bj的最长公共子序列去掉最后一个元素后成为A<sub>i-1</sub>与B<sub>j-1</sub>的最长公共子序列，矛盾。当A[i]≠B[i]时，A<sub>i</sub>与B<sub>j</sub>的最长公共子序列C<sub>ij</sub>不可能既包含A[i]又包含B[j]（否则意味着A[i]=B[j]）。如果C<sub>ij</sub>不包含A[i]，则 
              ；而如果C<sub>ij</sub>不包含B[j]，则F[i,j]=F[i,j-1]，当然，有可能F[i,j]=F[i-1,j]=F[i,j-1]，此时C<sub>ij</sub>即不包含A[i]又不包含B[j]。<br>
　　　<img src="../../../images/img_text/ch06/6_5_3.gif" width="452" height="261"><br>
              　　　　　　　　　　　(a) 　　　　　　　　　　　　　(b)<br>
              　　图6.5.3 (a) 最长公共自序列问题的求解矩阵；(b) 矩阵元素到处理器的映射<br>
              <br>
              　　所有的F[i, j]构成了一个矩阵，见图6.5.3，计算矩阵中所有元素的值即给出了问题的解。先考虑串行算法，本问题中F[i, 
              j]的计算不仅依赖于前一列的元素，而且依赖于前一行的元素，在这方面比上两个问题要复杂。考虑到F[i, j]只依赖于上一行的元素以及本行中列序号比自己低的元素，因此可以按照行方向来计算，每行从最低列序号开始算起。考虑到F[i, 
              j]只依赖于上一列的元素以及本列中行序号比自己低的元素，因此还可以按照列方向来计算，每列从最低行序号开始算起。另一种计算次序是按照对角线来算，即按照如下次序：<br>
              　　　　　　　　　F[0,0], F[0,1], F[1,0], F[0,2], F[1,1], F[2,0], ……<br>
              <br>
              　　不论按照何种次序，计算一个元素所花的时间都是<img src="../../../images/img_text/ch06/155.gif" width="28" height="18" align="absmiddle">，完成整个求解过程所花的时间为<img src="../../../images/img_text/ch06/156.gif" width="41" height="18" align="absmiddle">。<br>
              <br>
              　　来考虑在CREW PRAM体系结构上的并行化，不妨设m≤n，并设采用m个处理器。这m个处理器每个负责计算m列中的一列，由于元素计算的依赖关系（见图6.5.3），计算的迭代进度是从矩阵的左上向右下而不是平行于列而进行的，这样需要的迭代次数是<img src="../../../images/img_text/ch06/157.gif" width="54" height="18" align="absmiddle">。又因为每步迭代过程只需要<img src="../../../images/img_text/ch06/155.gif" width="28" height="18" align="absmiddle">的时间，因此并行处理时间为<img src="../../../images/img_text/ch06/157.gif" width="54" height="18" align="absmiddle">。并行算法的成本是<img src="../../../images/img_text/ch06/158.gif" width="124" height="18" align="absmiddle">，可见算法是成本最佳的。</span></p>
            </td>
        </tr>
      </table>
      
    </td>
  </tr>
</table>
</body>
</html>
