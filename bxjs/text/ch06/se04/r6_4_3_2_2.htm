<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<STYLE TYPE="text/css">
<!--
BODY {background-image:   url(../../../images/htmls/Slicebg.jpg);
background-position: right bottom;
background-repeat: no-repeat;
background-attachment: fixed;
}
-->
</STYLE>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../css/style.css" type="text/css">
</head>

<body  leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" height="100%" border="0" cellpadding="0" cellspacing="0">
  <tr> 
    <td valign="top"> <br>
      <table width="92%" border="0" align="center" cellpadding="0" cellspacing="0">
        <tr> 
          <td class="text" valign="top"> 
            <p>　　<b>利用棋盘分割来提高性能</b><br>
              <br>
              　　现在尝试一下棋盘分割。请注意，对原稀疏矩阵M而不是其值矩阵V和列序号矩阵J进行棋盘分割。设处理器个数为p=q<sup>2</sup>，则最初每个处理器上存储一个<img src="../../../images/img_text/ch06/109.gif" width="35" height="38" align="middle">的矩阵块。与6.3节类似的推理可以得到在超立方体体系结构上切通路由所花通信的时间大约为：<br>
              　　　　　　　　　　　　　<img src="../../../images/img_text/ch06/110.gif" width="122" height="41"><br>
              　　设非零元素在矩阵M中均匀分布，则每个<img src="../../../images/img_text/ch06/109.gif" width="35" height="38" align="middle">的矩阵块中大约含有<img src="../../../images/img_text/ch06/111.gif" width="24" height="38" align="absmiddle">个非零元素，因此每个处理器在计算阶段平均要花费t<sub>c</sub><img src="../../../images/img_text/ch06/111.gif" width="24" height="38" align="middle">的时间。当然，这仅仅是一个平均时间，实际比这要多一些，取决于非零元素分布的均匀性，为了简单起见，假设分布足够均匀以至于计算的时间量级不会发生变化。这样，整个并行处理时间为：<br>
              　　　　　　　　　　　<img src="../../../images/img_text/ch06/112.gif" width="195" height="41" align="absmiddle"><br>
              　　算法的加速比为：<br>
              　　　　　　　　　　　<img src="../../../images/img_text/ch06/113.gif" width="197" height="42">　<br>
              　　算法的效率为：<br>
              　　　　　　　　　　　<img src="../../../images/img_text/ch06/114.gif" width="188" height="55"><br>
              <br>
              　　本算法尽管性能（从加速比和可扩展性来看）仍然不尽人意，但比前一算法要好。<br>
            </p>
            </td>
        </tr>
      </table>
      
    </td>
  </tr>
</table>
</body>
</html>
