<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<STYLE TYPE="text/css">
<!--
BODY {background-image:   url(../../../images/htmls/Slicebg.jpg);
background-position: right bottom;
background-repeat: no-repeat;
background-attachment: fixed;
}
-->
</STYLE>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../css/style.css" type="text/css">
</head>

<body  leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" height="100%" border="0" cellpadding="0" cellspacing="0">
  <tr> 
    <td valign="top"> <br>
      <table width="92%" border="0" align="center" cellpadding="0" cellspacing="0">
        <tr> 
          <td class="text" valign="top"> 
            <p>　　<b>一个简单的并行算法：条带状分割</b><br>
              <br>
              　　对于矩阵的行向存储格式，一个简单的并行化方式是把值矩阵V和列序号矩阵J按照分块条带状划分并分配到p个处理器上，每个处理器上分配n/p行，mn/p个元素。向量X也同样均匀地分配到p个处理器上，每个处理器存放n/p个元素。<br>
              　　　<img src="../../../images/img_text/ch06/106.gif" width="387" height="182"><br>
              　　　　　　　　　(a) 　　　　　　　　　　　　　　　　　(b)<br>
              　　　　　　　图6.4.10 不规则稀疏阵与向量相乘的数据通信过程<br>
              　　　(a) 行方向条带划分时的多对多通信；(b) 列方向条带划分时的多对多通信<br>
              <br>
              　　对于每个处理器，要计算矩阵某行与向量的乘积，必须获得与矩阵此行非零元素对应的各个向量元素。由于在不规则稀疏阵中，非零元素出现的列是随机的，任何一列都可能非零，因此每个处理器都需要得到向量的所有元素。这就需要一个多对多广播的过程，见图6.4.10。广播通信阶段之后就可以进行计算了，计算阶段所花的时间是t<sub>c</sub>mn/p。通信阶段的时间与底层网络互联结构有关，假设为超立方体结构，则多对多广播所花费的时间是<img src="../../../images/img_text/ch06/107.gif" width="79" height="22" align="absmiddle">。因此总的并行处理时间为：<br>
              　　　　　　　　　　<img src="../../../images/img_text/ch06/108.gif" width="155" height="39"><br>
              <br>
              　　<font color="#000000">从上式可以看到并行处理时间为<img src="../../../images/img_text/ch06/9.gif" width="31" height="18" align="absmiddle">，与串行处理时间为同一个量级，即并行化并没有引起渐进性能的提高。造成这种现象的主要原因在于多对多通信消耗了太多的时间。那么列向条带状划分会不会提高性能呢？类似的分析可以知道：不会。</font></p>
            </td>
        </tr>
      </table>
      
    </td>
  </tr>
</table>
</body>
</html>
