<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<STYLE TYPE="text/css">
<!--
BODY {background-image:   url(../../../images/htmls/Slicebg.jpg);
background-position: right bottom;
background-repeat: no-repeat;
background-attachment: fixed;
}
-->
</STYLE>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<link rel="stylesheet" href="../../../css/style.css" type="text/css">
</head>

<body  leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" height="100%" border="0" cellpadding="0" cellspacing="0">
  <tr> 
    <td valign="top"> <br>
      <table width="92%" border="0" align="center" cellpadding="0" cellspacing="0">
        <tr> 
          <td class="text" valign="top"> 
            <p>　　向量X、Y内积的串行计算比较简单，只需把X[i]与Y[i]对应相乘，然后把结果相加即可，复杂度为O(n)。<br>
              <br>
              　　当并行执行时，设处理器个数为p，参与计算的两个向量在分别每个处理器上放置n/p个元素。整个计算过程分为两步：第一步，各个处理器独立地进行乘积和加法运算，时间为n/p；第二步，各个处理器之间进行结果累加，在超立方体上需要消耗<img src="../../../images/img_text/ch06/90.gif" width="132" height="21" align="absmiddle">的时间。总的时间为：<br>
              　　　　　　　　　<img src="../../../images/img_text/ch06/91.gif" width="97" height="38" align="absmiddle"><br>
              　　类似地，在二维网格互联结构中所消耗的时间为：<br>
              　　　　　　　　　<img src="../../../images/img_text/ch06/92.gif" width="146" height="38" align="absmiddle"><br>
              <br>
              　　当两个向量为稀疏向量时，由于向量可以看作特殊的矩阵，因此上一小节所讲述的稀疏矩阵存储格式对稀疏向量同样实用，并且因为向量只有一维，稀疏存储格式将变得很简单，并且不同的矩阵存储格式用于向量可能会退化成同一种。以下的讨论假设采用坐标存储格式，由于向量只有一维，因此用两个向量（一个值向量和一个索引向量）而不是三个便可以存储稀疏向量的信息。以下设两个向量非零元素的个数分别为m、k，不失一般性设m≥k。<br>
              <br>
              　　两个稀疏向量X、Y内积的算法见图6.4.6，很容易知道其复杂度为O(m+k)。在p个处理器上并行计算时，X的m个非零元素分布在p个处理器上，平均每个处理器拥有m/p个元素。Y的k个非零元素可以根据X非零元素的序号分配到p个处理器上面。<br>
              　　　　　　　　<img src="../../../images/img_text/ch06/6_4_6.gif" width="282" height="334"><br>
              　　　　　　　　　　　 　图6.4.6 稀疏向量内积的串行算法</p>
            </td>
        </tr>
      </table>
      <br>
    </td>
  </tr>
</table>
</body>
</html>
