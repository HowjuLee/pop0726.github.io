<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<STYLE TYPE="text/css">
<!--
BODY {background-image:   url(../../../images/htmls/Slicebg.jpg);
background-position: right bottom;
background-repeat: no-repeat;
background-attachment: fixed;
}
-->
</STYLE>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../css/style.css" type="text/css">
</head>

<body  leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" height="100%" border="0" cellpadding="0" cellspacing="0">
  <tr> 
    <td valign="top" height="20">&nbsp; </td>
  </tr>
  <tr>
    <td valign="top">
      <table width="92%" border="0" align="center" cellpadding="0" cellspacing="0">
        <tr> 
          <td class="text" valign="top"> 
            <p>　　<span class="section">〖课前思考〗</span><a name="01"></a><br>
              　　如何把一个已有的串行算法并行化？如何分析和计算并行算法的性能？有那些常用的数值并行算法？<br>
              <br>
              　　<span class="section">〖学习目标〗<a name="02"></a></span><br>
              　　本章介绍了常见的并行算法，内容设计排序、矩阵运算、动态规划、图论等。<br>
              <br>
              　　理解算法并行化的基本步骤；会进行并行算法的性能分析；掌握几个核心的算法（比如矩阵乘法运算的三个算法、并行冒泡排序、Prim最小生成树算法等）。<br>
              <br>
              　　<span class="section">〖学习指南〗<a name="03"></a></span><br>
              　　并行算法是整个并行计算的核心部分，学习本章的要领是掌握几个核心的并行算法，然后举一反三地去理解其它的并行化思路。<br>
              <br>
              　　<span class="section">〖难重点〗<a name="04"></a></span><br>
              　　● 并行冒泡排序<br>
              　　● 矩阵的划分和到处理器的映射<br>
              　　● 并行矩阵乘法（Cannon乘法、Fox乘法、DNS乘法）<br>
              　　● 稀疏矩阵的存储策略<br>
              　　● 动态规划的基本思想和基本并行化思路<br>
              　　● 最短路问题的并行算法<br>
              　　● 并行Prim算法<br>
              　　● 遗传算法的并行化<br>
              <br>
              　　<span class="section">〖知识点〗<a name="05"></a></span><br>
              　　● 并行冒泡排序<br>
              　　● 并行快速排序<br>
              　　● 矩阵的划分和到处理器的映射<br>
              　　● 矩阵与向量乘积的并行计算<br>
              　　● 并行矩阵乘法（Cannon乘法、Fox乘法、DNS乘法）<br>
              　　● 稀疏矩阵的存储策略<br>
              　　● 稀疏矩阵与向量的乘积<br>
              　　● 最短路问题<br>
              　　● 背包问题<br>
              　　● 公共子序列问题<br>
              　　● 最短路问题的并行算法<br>
              　　● 并行Prim算法<br>
              　　● 遗传算法的并行化</p>
          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
