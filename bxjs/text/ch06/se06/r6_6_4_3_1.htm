<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<STYLE TYPE="text/css">
<!--
BODY {background-image:   url(../../../images/htmls/Slicebg.jpg);
background-position: right bottom;
background-repeat: no-repeat;
background-attachment: fixed;
}
-->
</STYLE>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<link rel="stylesheet" href="../../../css/style.css" type="text/css">
</head>

<body  leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" height="100%" border="0" cellpadding="0" cellspacing="0">
  <tr> 
    <td valign="top"> <br>
      <table width="94%" border="0" align="center" cellpadding="0" cellspacing="0">
        <tr> 
          <td class="text" valign="top"> 
            <p>　　Floyd算法利用动态规划思想（见下一节），通过把问题分解为子问题来解决任意两点见的最短路径问题。设G=(V, E, w)是一个赋权图，其边V={v<sub>1</sub>, 
              v<sub>2</sub>, …, v<sub>n</sub>}。对于k≤n，考虑其结点V的一个子集<img src="../../../images/img_text/ch06/219.gif" width="106" height="21" align="absmiddle">。对于V中任何两个结点v<sub>i</sub>、v<sub>j</sub>，考虑从v<sub>i</sub>到v<sub>j</sub>的中间结点都在v<sub>k</sub>中的所有路径，设<img src="../../../images/img_text/ch06/194.gif" width="28" height="25" align="middle">是其中最短的，并设<img src="../../../images/img_text/ch06/194.gif" width="28" height="25" align="middle">的路径长度为<img src="../../../images/img_text/ch06/195.gif" width="27" height="25" align="middle">。如果结点v<sub>k</sub>不在从v<sub>i</sub>到v<sub>j</sub>的最短路径上，则<img src="../../../images/img_text/ch06/220.gif" width="69" height="23" align="absmiddle">；反之则可以把<img src="../../../images/img_text/ch06/194.gif" width="28" height="25" align="middle">分为两段，其中一段从v<sub>i</sub>到v<sub>k</sub>，另一段从v<sub>k</sub>到v<sub>j</sub>，这样便得到表达式<img src="../../../images/img_text/ch06/221.gif" width="113" height="23" align="absmiddle">。上述讨论可以归纳为如下递归式：<br>
              　　　　　　　　　　<img src="../../../images/img_text/ch06/222.gif" width="259" height="48"><br>
              <br>
              　　原问题转化为对每个i和j求<img src="../../../images/img_text/ch06/223.gif" width="24" height="23" align="absmiddle">，或者说求矩阵<img src="../../../images/img_text/ch06/224.gif" width="74" height="23" align="absmiddle">。<br>
              <br>
              　　利用上述递归表达式，串行Floyd算法可以写成图6.6.8的样子。算法包括三个循环，每个循环需要运行步骤n，最内部的循环体可以在常数时间内完成，因此算法的复杂度为<span class="text"><img src="../../../images/img_text/ch06/166.gif" width="38" height="21" align="absmiddle"></span>。<br>
              　<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="../../../../../../../../download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=5,0,0,0" width="400" height="300"><param name="wmode" value="transparent">
                <param name=movie value="../../../swf/S-6-6-8.swf">
                <param name=quality value=high>
                <embed src="../../../swf/S-6-6-8.swf" quality=high pluginspage="http://www.macromedia.com/shockwave/download/index.cgi?P1_Prod_Version=ShockwaveFlash" type="application/x-shockwave-flash" width="400" height="300">
                </embed> 
              </object>　　　<br>
              　　　　　　　　　　 　　　串行Floyd算法</p>
            </td>
        </tr>
      </table>
      
    </td>
  </tr>
</table>
</body>
</html>
