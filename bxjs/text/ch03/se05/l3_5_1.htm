<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">

<link rel="stylesheet" href="../../../css/style.css" type="text/css">
</head>

<body background="../../../images/htmls/left_di_2.gif" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0" bgproperties=fixed>
<table width="100%" height="100%" border="0" cellpadding="0" cellspacing="0">
  <tr> 
    <td valign="top" height="20">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top">
      <table width="90%" border="0" align="center" cellpadding="0" cellspacing="0">
        <tr> 
          <td class="text" valign="top"><span class="section">3．5　减小交互开销</span><br>
            <br>
            　　前面已经讨论过，减小并行算法中的交互开销对开发高效的并行程序来说具有重要的意义。因此，在对并行程序进行优化时，在最小化由于空闲和额外计算带来的额外开销的同时，我们也需要努力使交互的额外开销最小化。<br>
            <br>
            　　有两个通用的策略来处理并行算法中的交互开销<br>
            　　☆ 在交互的同时作某些有用的工作<br>
            　　　（隐藏交互开销）<br>
            　　☆ 减小交互的开销<br>
            <br>
            　　这两种策略都需要对程序的结构作某种程度的改变，并且可能需要底层硬件的某种程度的支持。本节中将集中讨论减少并行程序中交互开销的一些常用的技术。<br>
            <br>
            　<span class="part">3．5．1　开发数据局部性</span><br>
            <br>
            　　<a href="r3_5_1_1.htm" target="right">最小化数据访问量</a><br>
            <br>
            　　<a href="r3_5_1_2.htm" target="right">最小化交互的频度</a><br>
            <br>
          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
