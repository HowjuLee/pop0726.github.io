<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<STYLE TYPE="text/css">
<!--
BODY {background-image:   url(../../../images/htmls/Slicebg.jpg);
background-position: right bottom;
background-repeat: no-repeat;
background-attachment: fixed;
}
-->
</STYLE>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<link rel="stylesheet" href="../../../css/style.css" type="text/css">
</head>

<body  leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" height="100%" border="0" cellpadding="0" cellspacing="0">
  <tr> 
    <td valign="top" height="20">&nbsp; </td>
  </tr>
  <tr>
    <td valign="top">
      <table width="92%" border="0" align="center" cellpadding="0" cellspacing="0">
        <tr> 
          <td class="text" valign="top"> 
            <p>　　<b>对输出数据进行划分</b><br>
              <br>
              　　考虑下面的算法框架：<br>
              　　　　　　　<img src="../../../images/img_text/ch03/p3_2_3.gif" width="263" height="151"><br>
              <br>
              　　这个算法有一个输入集，经过处理后，得到一个输出集。如果输出集中的每个元素都是独立计算的，那么，对输出集的任何划分都会有一个对应的并行任务分解方案。这种分解的最大并行度等于输出集的规模。数据分解是一种很有效的发现并行性的方法。<br>
              <br>
              　　下面考虑一个更为实际的例子。x，b是n维向量，A是一个n×n的矩阵，计算矩阵向量积如下：<br>
              　　　　　　　　　　　　　　b=Ax<br>
              <br>
              　　显然，b是算法的输出，我们来看b的每个元素是如何得到的。b的每个元素可以用下面的公式的到：<br>
              　　　　　　　　　　　　　　<img src="../../../images/img_text/ch03/2.gif" width="100" height="44"><br>
              　　如下面的图所示：<br>
　　　　　　　　　<img src="../../../images/img_text/ch03/p3_2_4.gif" width="236" height="141"><br>
              <br>
              　　由于b的各元素的计算可以独立（并行）进行，我们可以将这个计算按照b的元素进行数据划分：n个处理器，每个处理器完成一个元素的计算。<br>
              <br>
              　　现在考虑矩阵的乘法，描述如下：A，B，C都是n×n的矩阵的矩阵，完成下面的矩阵乘法：<br>
              　　　　　　　　　　　　　　C=A×B <br>
              <br>
              　　<font color="#000000">这个算法通常被实现为下面的三重循环：<br>
              　　　　for (i=0; i&lt;n; i++)<br>
              　　　　for (j=0; j&lt;n; j++)<br>
              　　　　　for (c[i][j]=0.0, k=0； k&lt;n； k++)<br>
              　　　　　　c[i][j] += a[i][k]*b[k][j];</font></p>
            <p>　　它的计算示意图如下（C的每个元素的计算）：<br>
　　　　　　　　　<img src="../../../images/img_text/ch03/p3_2_5.gif" width="291" height="132"><br>
              <br>
              　　在这个算法中，C的每个元素是A的第i个行向量与B的第j个列向量的点积，因此，可以按照C的元素进行数据划分，并把计算每个C的元素的任务作为一个子任务。这种分解的最大并行度为n×n。</p>
            </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
