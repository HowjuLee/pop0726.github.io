<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<STYLE TYPE="text/css">
<!--
BODY {background-image:   url(../../../images/htmls/Slicebg.jpg);
background-position: right bottom;
background-repeat: no-repeat;
background-attachment: fixed;
}
-->
</STYLE>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<link rel="stylesheet" href="../../../css/style.css" type="text/css">
</head>

<body  leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" height="100%" border="0" cellpadding="0" cellspacing="0">
  <tr> 
    <td valign="top" height="20">&nbsp; </td>
  </tr>
  <tr>
    <td valign="top">
      <table width="92%" border="0" align="center" cellpadding="0" cellspacing="0">
        <tr> 
          <td class="text" valign="top"> 
            <p>　　对问题进行任务分解需要灵活的应用上面的方法。递归分解，数据分解和搜索分解虽然有不同，但它们之间却不一定相互排斥，因此，在实际的应用中，为了得到更高的并行度，可以将这些分解方法组合使用。<br>
              <br>
              　　<font color="#000000">前面我们讨论过快速排序算法，这个算法对大小为n的序列排序时，可以产生O(n)个子任务，但由于任务之间的依赖关系和任务分配的不均匀性，有效的并行性相当有限。比如，第一个任务（将初始序列分割为两个子序列）复杂度为O(n)，这确定了并行算法的时间复杂度的下界。<br>
              <br>
              　　快速排序也可以采用对输入数据进行分解的方法，对快速排序采用输入数据分解以及递归分解的方法可以得到一个更为高效的算法</font><font color="#CC6600">（思考，这个算法的复杂度是多少？）</font> 
              <br>
              <br>
            </p>
          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
