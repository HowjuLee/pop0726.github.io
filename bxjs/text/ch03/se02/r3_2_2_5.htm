<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<STYLE TYPE="text/css">
<!--
BODY {background-image:   url(../../../images/htmls/Slicebg.jpg);
background-position: right bottom;
background-repeat: no-repeat;
background-attachment: fixed;
}
-->
</STYLE>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../css/style.css" type="text/css">
</head>

<body  leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" height="100%" border="0" cellpadding="0" cellspacing="0">
  <tr> 
    <td valign="top" height="20">&nbsp; </td>
  </tr>
  <tr>
    <td valign="top">
      <table width="92%" border="0" align="center" cellpadding="0" cellspacing="0">
        <tr> 
          <td class="text" valign="top"> 
            <p>　　<b>拥有者计算规则（The Owner-compute Rule）</b><br>
              <br>
              　　上面介绍的方法都偏重于介绍如何对数据进行划分以及选择什么样的数据进行划分，但既然我们需要的得到的是计算划分，因此，如何从数据划分得到一个计算划分是这种并行性开发的一个必需的步骤。事实上，上面的例子都采用了一种&quot;拥有者计算规则&quot;来从一个数据划分得到相应的计算划分。基本思想是每个计算划分完成对它所拥有的数据的全部计算。当然，对不同的数据特点以及用于进行数据划分的数据的不同类型，拥有者计算规则也许意味着不同的含义。比如，当我们采用输入数据进行划分时，拥有者计算规则代表我们使用这些输入数据（经过划分的数据）可以进行的所有计算。而对于输出数据划分，拥有者计算规则则表示生成这些数据所需要的所有计算。<br>
            </p>
            </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
