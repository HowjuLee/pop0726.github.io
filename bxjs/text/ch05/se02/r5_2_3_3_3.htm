<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<STYLE TYPE="text/css">
<!--
BODY {background-image:   url(../../../images/htmls/Slicebg.jpg);
background-position: right bottom;
background-repeat: no-repeat;
background-attachment: fixed;
}
-->
</STYLE>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<link rel="stylesheet" href="../../../css/style.css" type="text/css">
</head>

<body  leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" height="100%" border="0" cellpadding="0" cellspacing="0">
  <tr> 
    <td valign="top" height="20">&nbsp; </td>
  </tr>
  <tr>
    <td valign="top">
      <table width="92%" border="0" align="center" cellpadding="0" cellspacing="0">
        <tr> 
          <td class="text" valign="top"> 
            <p>　<font color="#000000">　</font>前面的推导中指出，得到常数效率的条件是T<sub>o</sub>/W保持不变，当p和W增加时，只要T<sub>o</sub>的所有项都比W增长要慢，效率就不会降低。如果T<sub>o</sub>有多个项，我们需要用W对T<sub>o</sub>的每个项进行平衡，然后得出每个项的等效率函数，随p增长最快的等效率函数确定了并行系统的总的渐进等效率函数。下面的例子进一步说明了等效率分析的细节。<br>
              <br>
              　　<font color="#000000">一个例子<br>
              　　一个具有复杂的额外开销函数的并行系统的等效率函数。<br>
              　　考虑一个并行系统，它的额外开销函数是<img src="../../../images/img_text/ch05/73.gif" width="139" height="25" align="absmiddle">，对To的第一项，对应的等效率公式为<br>
              　　　　　　　　　　　<img src="../../../images/img_text/ch05/74.gif" width="72" height="24" align="absmiddle"><br>
              　　对T<sub>o</sub>的第二项，对应的等效率公式为<br>
              　　　　　　　　　　　<img src="../../../images/img_text/ch05/75.gif" width="104" height="77"><br>
              　　为了保证当处理器数目增加时，效率不至于降低，额外开销函数的第一项和第二项要求问题规模的增长速度为<img src="../../../images/img_text/ch05/76.gif" width="57" height="24" align="absmiddle">和<img src="../../../images/img_text/ch05/77.gif" width="45" height="24" align="absmiddle"> 
              ，其中渐进较大的项<img src="../../../images/img_text/ch05/77.gif" width="45" height="24" align="absmiddle">给出了并行系统的总的渐进等效率函数，因为它掩盖了另外的一项。</font><br>
              <br>
              　　用一个简单的表达式，等效率函数揭示出了并行算法和实现它的并行体系结构的特性。在完成等效率分析后，我们可以在较少的处理器上测试一个并行系统的性能，然后可以预测这个并行系统在大量的处理器上运行的性能。<b>然而，等效率分析的应用并不仅仅限于分析增加处理器数目对并行系统的性能的影响上，事实上，等效率函数也可以用来揭示一个并行算法中的固有的并行性的量。等效率分析技术也被用于分析硬件参数（比如处理器的速度和通信通道的速度）的改变对一个并行系统的行为（性能）的影响</b>。 
              <br>
            </p>
            </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
