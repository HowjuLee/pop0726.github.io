<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<STYLE TYPE="text/css">
<!--
BODY {background-image:   url(../../../images/htmls/Slicebg.jpg);
background-position: right bottom;
background-repeat: no-repeat;
background-attachment: fixed;
}
-->
</STYLE>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<link rel="stylesheet" href="../../../css/style.css" type="text/css">
</head>

<body  leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" height="100%" border="0" cellpadding="0" cellspacing="0">
  <tr> 
    <td valign="top" height="20">&nbsp; </td>
  </tr>
  <tr>
    <td valign="top">
      <table width="92%" border="0" align="center" cellpadding="0" cellspacing="0">
        <tr> 
          <td class="text" valign="top"> 
            <p>　<font color="#000000">　</font>经常会关心的一个问题是如果处理器的数量不受限制的话，<font color="#CC6633">一个应用问题多长时间能够算完</font>，或者，<font color="#CC6633">一个并行算法的最小可能运行时间是多少</font>。当对一个特定的问题规模增加处理器数目的时候，要么并行运行时间持续减少，直到它渐进于一个最小值，要么在达到一个最小值后它又开始增加（<font color="#CC6633">思考：为什么？</font>）。对一个给定的工作负载W，可以确定最小并行运行时间<img src="../../../images/img_text/ch05/127.gif" width="31" height="24" align="absmiddle">（求出T<sub>p</sub>对p的驻点，这里假设T<sub>p</sub>(W,p)对p可微），取最小值时的p值可以由下面的方程决定：<br>
              　　　　　　　　　　　　　<img src="../../../images/img_text/ch05/128.gif" width="67" height="44" align="absmiddle"><br>
              　　令p<sub>0</sub>是满足上面方程的一个解，用它代入T<sub>p</sub>的表达式，就可以得到<img src="../../../images/img_text/ch05/127.gif" width="31" height="24" align="absmiddle">。<br>
              <br>
              　　<font color="#000000">一个例子<br>
              　　在p个处理器的超立方体上完成n个数的加法（p &lt; n，其中p和n都是2的整数次幂），求最小执行时间。<br>
              <br>
              　　前面已经讨论过，并行运行时间可以用下面的公式近似的表示：<br>
              　　　　　　　　　　　　　<img src="../../../images/img_text/ch05/129.gif" width="109" height="44" align="absmiddle"><br>
              　　式子两边对p进行微分，并令它为0，则有：<br>
              　　　　　　　　　　　　　<img src="../../../images/img_text/ch05/130.gif" width="92" height="112" align="absmiddle"><br>
              　　将这个值代入上面的表达式，就可以得出<img src="../../../images/img_text/ch05/127.gif" width="31" height="24" align="absmiddle"> 
              <br>
              　　　　　　　　　　　　　<img src="../../../images/img_text/ch05/131.gif" width="91" height="27" align="absmiddle"><br>
              　　上面的例子中，当p=p<sub>0</sub>时处理器-时间积为<img src="../../../images/img_text/ch05/132.gif" width="69" height="21" align="absmiddle">，这比问题的串行算法的复杂度<img src="../../../images/img_text/ch05/133.gif" width="36" height="21" align="absmiddle">要高，因此，能够得到最小并行运行时间的并行系统并不是开销最优的。</font><br>
            </p>
            </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
