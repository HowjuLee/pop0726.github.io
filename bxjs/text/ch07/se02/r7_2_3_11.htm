<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<STYLE TYPE="text/css">
<!--
BODY {background-image:   url(../../../images/htmls/Slicebg.jpg);
background-position: right bottom;
background-repeat: no-repeat;
background-attachment: fixed;
}
-->
</STYLE>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<link rel="stylesheet" href="../../../css/style.css" type="text/css">
</head>

<body  leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" height="100%" border="0" cellpadding="0" cellspacing="0">
  <tr> 
    <td valign="top" height="20">&nbsp; </td>
  </tr>
  <tr>
    <td valign="top">
      <table width="92%" border="0" align="center" cellpadding="0" cellspacing="0">
        <tr> 
          <td class="text" valign="top"> 
            <p>　<b>　新类型的构造和使用<br>
              <br>
              </b>　　通常情况下，新类型的构造和使用由下面几个过程（依次）组成：</p>
            <p>　　1. 新类型的构造（通过调用构造器）<br>
              　　2. 新类型的提交（调用MPI_TYPE_COMMIT）<br>
              　　3. 新类型的使用（发送，接收消息等等）<br>
              　　4. 新类型的释放（调用MPI_TYPE_FREE）</p>
            <p>　　提交新类型的调用形式如下：</p>
            <p>　　MPI_TYPE_COMMIT( datatype )<br>
              　　INOUT datatype</p>
            <p>　　int MPI_Type_commit( MPI_Datatype *datatype )；<br>
              　　一旦一个新的数据类型经过提交，用户可以在程序中向使用预定义类型一样的使用它们,这也使用户可以在自己定义的派生数据类型的基础上，再定义更为复杂的新的类型。 
              释放新类型的调用形式如下：</p>
            <p>　　MPI_TYPE_FREE( datatype )<br>
              　　INOUT datatype</p>
            <p>　　int MPI_Type_free( MPI_Datatype *datatype )；</p>
            <p>　　<b>打包和解包</b><br>
              　　打包（pack）和解包（unpack）为用户提供了发送不连续数据又一种方法。基本原理是在发送前先把数据包装（拷贝）到一个连续的（发送）缓冲区，数据到达后再从（连续得接收）缓冲区内把数据取出来（解包）。<br>
              与打包/解包操作有关的函数调用如下。<br>
              <br>
              　　<b>打包操作</b></p>
            <p>　　MPI_PACK( inbuf, incount, datatype, outbuf, outcount, position, 
              comm )<br>
              　　IN inbuf 输入缓冲区起始地址（需要打包的数据）<br>
              　　IN incount 输入数据的数目<br>
              　　IN datatype 输入数据的类型<br>
              　　OUT outbuf 输出缓冲区起始地址（打包后的数据）<br>
              　　IN outcount 输出缓冲区的长度<br>
              　　INOUT position 输出缓冲区当前打包位置<br>
              　　IN comm 通信域</p>
            <p>　　int MPI_Pack( void *inbuf, int incount, MPI_Datatype datatype, 
              <br>
              　　void *outbuf, int outcount, int *position, MPI_Comm comm )；</p>
            <p>　　需要指出的是，一个完整的打包过程通常包括连续多次对MPI_PACK的调用。</p>
            <p>　　<b>解包操作</b></p>
            <p>　　MPI_UNPACK( inbuf, insize, position, outbuf, outcount, datatype, 
              comm )<br>
              　　IN inbuf 输入缓冲区起始地址（需要解包的数据） <br>
              　　IN insize 输入数据的数目<br>
              　　INOUT position 输入缓冲区当前解包位置<br>
              　　OUT outbuf 输出缓冲区起始地址（打包后的数据）<br>
              　　IN outcount 输出缓冲区的长度<br>
              　　IN datatype 输出数据的类型<br>
              　　IN comm 通信域</p>
            <p>　　int MPI_Unpack( void *inbuf, int insize, int *position, void 
              *outbuf,<br>
              　　int outcount, MPI_Datatype datatype,MPI_Comm comm )；</p>
            <p>　　需要指出的是，一个完整的解包过程也通常包括连续多次对MPI_UNPACK的调用。</p>
            <p>　　计算打包所需的空间</p>
            <p>　　MPI_PACK_SIZE( incount, datatype, comm, size )<br>
              　　IN incount 给定数据类型的数目<br>
              　　IN datatype 数据类型<br>
              　　IN comm 通信域<br>
              　　OUT size 以字节为单位的incount个datatype类型数据打包所需要的空间</p>
            <p>　　int MPI_Pack_size( int incount, MPI_Datatype datatype, MPI_Comm 
              comm,<br>
              int *size )；<br>
              　　注意size返回的是一个上界，因为打包空间可能会依赖于上下文（比如第一个打包单元需要更多的空间）。<br>
              <br>
              　　<font color="#000000">下面是一个完整的打包和解包的例子（在都志辉等所著的《高性能计算并行编程技术--MPI并行程序设计》中的173页给出）。</font></p>
            <p><font color="#000000">　　#include &lt;stdio.h&gt;<br>
              　　#include &quot;mpi.h&quot;</font></p>
            <p><font color="#000000">　　int main( int argc, char **argv) {<br>
              　　int rank, packsize, position;<br>
              　　int a;<br>
              　　double b;<br>
              　　char packbuf[100];</font></p>
            <p><font color="#000000"> 　　MPI_Init( &amp;argc, &amp;argv );<br>
              　　MPI_Comm_rank( MPI_COMM_WORLD, &amp;rank );<br>
              　　<br>
              　　if( rank == 0 ) {<br>
              　　　// 进程0读数据<br>
              　　　scanf( &quot;%d%lf&quot;, &amp;a, &amp;b ); <br>
              　　　packsize = 0;<br>
              　　　MPI_Pack( &amp;a, 1, MPI_INT, packbuf, 100, &amp;packsize,<br>
              　　　MPI_COMM_WORLD );<br>
              　　　MPI_Pack( &amp;b, 1, MPI_DOUBLE, packbuf, 100, &amp;packsize,<br>
              　　　MPI_COMM_WORLD );<br>
              　　}<br>
              　　//<br>
              　　MPI_Bcast( &amp;packsize, 1, MPI_INT, 0, MPI_COMM_WORLD );<br>
              　　//<br>
              　　MPI_Bcast( packbuf, packsize, MPI_PACKED, 0, MPI_COMM_WORLD );<br>
              　　if( rank != 0 ) {<br>
              　　　position = 0;<br>
              　　　MPI_Unpack( packbuf, packsize, &amp;position, &amp;a, 1, MPI_INT,<br>
              　　　MPI_COMM_WORLD );<br>
              　　　MPI_Unpack( packbuf, packsize, &amp;position, &amp;b, 1, MPI_DOUBLE,<br>
              　　　MPI_COMM_WORLD );<br>
              　　}</font></p>
            <p><font color="#000000"> 　　printf( &quot;Process %d got %d and %lf 
              \n&quot;, rank , a, b );<br>
              　　<br>
              　　MPI_Finalize( );<br>
              　　return 0;<br>
              　　}</font></p>
          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
