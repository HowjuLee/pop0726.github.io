<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<STYLE TYPE="text/css">
<!--
BODY {background-image:   url(../../../images/htmls/Slicebg.jpg);
background-position: right bottom;
background-repeat: no-repeat;
background-attachment: fixed;
}
-->
</STYLE>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<link rel="stylesheet" href="../../../css/style.css" type="text/css">
</head>

<body  leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" height="100%" border="0" cellpadding="0" cellspacing="0">
  <tr> 
    <td valign="top" height="20">&nbsp; </td>
  </tr>
  <tr>
    <td valign="top">
      <table width="92%" border="0" align="center" cellpadding="0" cellspacing="0">
        <tr> 
          <td class="text" valign="top"> 
            <p>　<b>　MPI中的非阻塞通信<br>
              <br>
              </b>　　前面已经介绍了阻塞通信和非阻塞通信的区别。下面我们介绍MPI中对非阻塞通信的支持，和通常的调用模式。<br>
              <br>
              　　上面的四种通信模式都有对应的非阻塞通信模式。他们对应的函数如下：</p>
            <p>　　标准通信模式： MPI_ISEND MPI_IRECV<br>
              　　缓冲通信模式： MPI_IBSEND<br>
              　　同步通信模式： MPI_ISSEND<br>
              　　就绪通信模式： MPI_IRSEND</p>
            <p>　　和它们的阻塞方式相比，基本上只是由阻塞变为了非阻塞，其他的通信行为相同。<br>
              <br>
              　　下面来看标准的非阻塞通信的函数。</p>
            <p>　　MPI_ISEND( buf, count, datatype, dest, tag, comm, request )<br>
              　　IN buf<br>
              　　IN count<br>
              　　IN datatype<br>
              　　IN dest<br>
              　　IN tag<br>
              　　IN comm<br>
              　　OUT request 返回的非阻塞通信对象（用于TEST/WAIT使用）</p>
            <p>　　int MPI_Isend( void* buf, int count, MPI_Datatype datatype, <br>
              　　int dest, int tag, MPI_Comm comm, MPI_Request *request)</p>
            <p>　　消息接收</p>
            <p>　　MPI_IRECV( buf, count, datatype, source, tag, comm, request )<br>
              　　OUT buf<br>
              　　IN count<br>
              　　IN datatype<br>
              　　IN source<br>
              　　IN tag<br>
              　　IN comm<br>
              　　OUT request 返回的非阻塞通信对象（用于TEST/WAIT使用）</p>
            <p>　　int MPI_Irecv( void *buf, int count, MPI_Datatype datatype, int 
              source<br>
              　　int tag, MPI_Comm comm, MPI_Request *request )</p>
            <p>　　比较它们和MPI_SEND/MPI_RECV的形式，可以发现非阻塞通信对象多出了一个MPI_Request参数。这个参数是提供给后面的非阻塞通信检测/等待函数用的，它的意义很象文件操作中的文件句柄，它用来唯一的标识不同的非阻塞通信任务。<br>
              <br>
              　　由于非阻塞通信在调用后不用等待通信完全结束就可以返回，所以非阻塞通信的返回并不意味着通信的完成。在返回后，用户还需要检测甚至等待通信的完成。MPI提供了下面的函数来完成这些目的。<br>
              　<br>
              　　功能描述（使用情形） 状态检测 等待完成<br>
              　　单个非阻塞通信调用 MPI_TEST MPI_WAIT<br>
              　　一组非阻塞通信中任意一个 MPI_TESTANY MPI_WAITANY<br>
              　　多个非阻塞通信 MPI_TESTSOME MPI_WAITSOME<br>
              　　所有非阻塞通信 MPI_TESTALL MPI_WAITALL<br>
            </p>
            <table width="100%" border="0" cellspacing="1" cellpadding="0" bgcolor="#000000">
              <tr bgcolor="#CCCCCC"> 
                <td class="text"> 
                  <div align="center"><b>功能描述（使用情形）</b></div>
                </td>
                <td class="text"> 
                  <div align="center"><b>状态检测</b></div>
                </td>
                <td class="text"> 
                  <div align="center"><b>等待完成</b></div>
                </td>
              </tr>
              <tr bgcolor="#FFFFFF"> 
                <td class="text"> 
                  <div align="center">单个非阻塞通信调用</div>
                </td>
                <td class="text"> 
                  <div align="center">MPI_TEST</div>
                </td>
                <td class="text"> 
                  <div align="center">MPI_WAIT</div>
                </td>
              </tr>
              <tr bgcolor="#FFFFFF"> 
                <td class="text"> 
                  <div align="center">一组非阻塞通信中任意一个</div>
                </td>
                <td class="text"> 
                  <div align="center">MPI_TESTANY</div>
                </td>
                <td class="text"> 
                  <div align="center">MPI_WAITANY</div>
                </td>
              </tr>
              <tr bgcolor="#FFFFFF"> 
                <td class="text"> 
                  <div align="center">多个非阻塞通信</div>
                </td>
                <td class="text"> 
                  <div align="center">MPI_TESTSOME</div>
                </td>
                <td class="text"> 
                  <div align="center">MPI_WAITSOME</div>
                </td>
              </tr>
              <tr bgcolor="#FFFFFF"> 
                <td class="text"> 
                  <div align="center">所有非阻塞通信</div>
                </td>
                <td class="text"> 
                  <div align="center">MPI_TESTALL</div>
                </td>
                <td class="text"> 
                  <div align="center">MPI_WAITALL</div>
                </td>
              </tr>
            </table>
            <p>　　其中TEST用来检测对应的非阻塞通信是否已经完成，注意，它只给出状态，而不会阻塞等待对应的非阻塞通信完成。而WAIT是一个阻塞调用，用来等待对应的非阻塞通信完成，只有当某些条件满足时，它才会退出。MPI_TEST的形式如下。</p>
            <p>　　MPI_TEST( request, flag, status )<br>
              　　INOUT request 非阻塞通信对象<br>
              　　OUT flag 操作是否完成（标志变量）<br>
              　　OUT status 返回状态<br>
              　　int MPI_Test( MPI_Request *request, int *flag, MPI_Status *status 
              )；</p>
            <p>　　<font color="#000000">最简单的非阻塞通信模式。先看一个简单的ISEND的例子（来自于MPICH-1.2.3软件包所附的例子isendtest.c）。</font></p>
            <p><font color="#000000">　　// isendtest.c<br>
              　　#include &lt;stdio.h&gt;<br>
              　　#include &quot;mpi.h&quot;<br>
              　　#define SIZE 100</font></p>
            <p><font color="#000000">　　int main( int argc, char *argv[])<br>
              　　{<br>
              　　　int num_procs,my_id,flag;<br>
              　　　int buf[SIZE][SIZE];<br>
              　　　MPI_Status status;<br>
              　　　MPI_Request handle;</font></p>
            <p><font color="#000000"> 　　　MPI_Init(&amp;argc,&amp;argv);<br>
              　　　MPI_Comm_size(MPI_COMM_WORLD,&amp;num_procs);<br>
              　　　MPI_Comm_rank(MPI_COMM_WORLD,&amp;my_id);<br>
              <br>
              　　//两个进程，进程1非阻塞发送<br>
              　　if ( my_id == 1 ) {<br>
              　　　MPI_Isend (buf, SIZE*SIZE, MPI_INT, 0, 0, MPI_COMM_WORLD, &amp;handle 
              );</font></p>
            <p><font color="#000000"> 　　flag = 0;<br>
              　　//采用循环等待的方法等待非阻塞发送的完成<br>
              　　while (flag == 0) {<br>
              　　　　MPI_Test (&amp;handle, &amp;flag, &amp;status);<br>
              　　　　printf(&quot;%d Wait for completition flag = %d handle = %ld 
              ....\n&quot;,<br>
              　　　　my_id, flag, (long) handle);<br>
              　　　　}<br>
              　　}<br>
              　　else if (my_id == 0 ) {<br>
              　　//进程0阻塞接收<br>
              　　　MPI_Recv (buf, SIZE*SIZE, MPI_INT, 1, 0, MPI_COMM_WORLD, &amp;status 
              );<br>
              　　}</font></p>
            <p><font color="#000000"> 　　printf(&quot;%d Done ....\n&quot;,my_id);</font></p>
            <p><font color="#000000"> 　　MPI_Finalize();<br>
              　　return 0;<br>
              　　}</font></p>
            <p>　　MPI为非阻塞通信提供了非常丰富的函数调用，本文中不对具体的调用做更多的介绍，请参见MPI标准中相关的说明。<br>
            </p>
          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
