<html>
<head>
<title>编译原理</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../css/text.css" type="text/css">
<link href="../../css/weiji.css" rel="stylesheet" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000" class="pop">
<center><table width="95%" border="0" cellspacing="0" cellpadding="0">
  <tr>
      <td class=text> 
        <p><b>问答题答案</b></p>
        <p>问答第1题<br>
          上图所示的输入接口原理性结构图，表示了一个以程序查询方式控制传送的并行输入接口。 该输入接口是这样进行工作的，输入设备将数据送到端口的数据线上，输入设备的数据选通信号STB有效，将数据打入输入端口的数据锁存器，STB同时将端口的状态寄存器置1，表示输入缓冲器满。状态寄存器一方面给CPU提供查询状态，告诉CPU输入端口数据有效，另一方面通知外设输入缓冲器满，阻止外设向端口送下一个数据。CPU不断读出地址CS2#的内容，检测到D7位为1，知道输入缓冲器又保存了新的数据，便执行读取数据端口CS1#的指令，将有效数据读入CPU。在访问CS1#时，对数据缓冲器三态门的控制信号同时将状态寄存器复位为0，指示输入缓冲器空，该状态令ACK#信号有效，通知外设可以进行下一个数据的传送。接口状态寄存器的"输入缓冲器满"IBF信号也可以作为CPU的中断请求信号，通过申请CPU中断，请求CPU读取端口中外设送来的数据。 
          <img src="../../images/chap4/002.gif" width="300" height="191"><br>
          问答第2题<br>
          <img src="../../images/chap4/003.gif" width="300" height="232"><br>
          问答第3题<br>
          在8086系统中，数据是16位的，CPU总是将高8位数据送往奇地址，而将低8位数据送往偶地址。这样一来，对于8位I/O端口，如果将其数据线与CPU的数据线低8位相连，那么对I/O端口的读写就要求全部用偶地址。但是，在I/O芯片中，对端口的编址又是连续的。为了解决这个矛盾，就将I／O端口芯片的地址线A0和8086微处理器的A1相连。在访问I/O端口时，将地址的A0位总是设为0。<br>
          问答第4题<br>
          <img src="../../images/chap4/004.gif" width="314" height="215"><br>
          问答第5题<br>
          请比较本题和上题的区别，可以看出，两个图的译码电路是基本一样的，唯一的区别是当A0为0和1时，分别使能译码器。 <img src="../../images/chap4/005.gif" width="310" height="228"><br>
          问答第6题<br>
          BHE＃和A0分别是选择以偶地址开始的字时高位字节允许信号和地址的最低位。在访问16位端口时，每次读/写两个字节，其地址相邻，因此也就必然包含了A0为0和1的两种情况，所以不需要对A0进行译码。BHE＃信号可以根据需要给出，BHE＃为低电平表示读/写一个字，BHE＃为高电平表示读/写一个字节。BHE#信号不会引起译码错误，因此可以被忽略。<br>
          问答第7题<br>
          0010H是偶地址。对于8086 CPU而言，低位数据线上的数据总是写入偶地址的存储单元或者端口，而且，从偶地址存储单元或者端口读来的数据也一定是出现在低位数据线上。因此，地址为0010H的8位I／O设备，应该与8086低位数据总线相连。<br>
          问答第8题<br>
          道理同上题类似，端口地址为100DH的8位I／O设备，应该与8086高位数据总线相连。<br>
          问答第9题<br>
          属于A组的引脚有：A端口输入输出数据线PA7~PA0，C端口数据线的高4位PC7~PC4。 属于B组的引脚有：B端口输入输出数据线PA7~PA0，C端口数据线的低4位PC3~PC0。另外，数据线D7~D0，片选择信号CS#，地址信号A1、A0，读、写信号RD#、WR#以及复位信号RESET，是A组和B组的共用的信号引脚。 
          <br>
          问答第10题<br>
          地址信号A1、A0用于I／O端口地址选择。通过A1、A0所组合的地址来区分82C55A内部A、B、C三个数据端口和一个控制端口的地址。<br>
          问答第11题<br>
          当82C55被复位时，控制寄存器将被清零，同时A、B、C端口也被全部置为输入状态。<br>
          问答第12题<br>
          B＃信号的主要功能是将外设数据打入输入端口，即用于接收外设的数据。当STB＃有效时，82C55从外设接收8位数据，使得其输入缓冲器中得到一个新的数据。<br>
          问答第13题<br>
          IBF是输入缓冲器满信号。该信号为1表示来自外设数据已经装入相应端口。此信号用于和外设通信。指示外设输入缓冲器满，阻止外设继续送出数据。<br>
          问答第14题<br>
          设82C55的控制口的地址为00AAH，则将82C55的PC7引脚置为逻辑1的程序片断如下：<br>
          MOV AL, BFH ；设置选通方式、ABC都为输入操作时候的控制字<br>
          MOV DX, 00AAH<br>
          OUT DX, AL<br>
          MOV AL, 0FH ；对PC7置1的控制字 <br>
          OUT DX, AL<br>
          <br>
          问答第15题<br>
          选通信号结束后，当一个数据已经被送入缓冲器中，并且输入缓冲器满信号为高电平时，82C55会向CPU发出中断请求信号。也就是说，当STB#和IBF都为高电平时，82C55会将中断请求引脚置为高电平，即有效状态。<br>
          问答第16题<br>
          ACK＃是外设响应信号。ACK＃是由外设送给82C55的。当CPU通过82C55输出的数据已经送到外设时，外设便向82C55发ACK#应答信号。<br>
          问答第17题<br>
          OBF＃是输出缓冲器满信号。当输出缓冲器中的数据被外设取走时应该将此信号清除。因此，由ACK#的有效信号将其置为高电平，即清除OBF＃信号。 
          <br>
          问答第18题<br>
          由于82C55的双向操作只限于端口A，所以在双向操作期间使用的只有A组引脚。外加端口C的5个数位PC7-PC3，作为控制信号和状态信号。<br>
          问答第19题<br>
          在82C55的方式2操作期间，PC7~PC3分别作为控制信号和状态信号，PA7~PA0是通用的I／O数据引脚。<br>
          问答第20题<br>
          <img src="../../images/chap4/006.gif" width="300" height="200"> <br>
          由于地址有限，需要将82C55的数据输出线同时与8086的高位数据线和地位数据线相连。<br>
          <img src="../../images/chap4/007.gif" width="326" height="250"><br>
          问答第21题<br>
          按位进行传输的通信叫做串行通信。异步串行通信是串行通信的一种。所谓异步通信，是指在通信的双方没有统一的同步时钟，而是通过同步标志位来实现通信同步。在异步通信中，每一个字符的前后都要加上一些标志位组成一帧信息。这些标志位用作帧与帧之间的分隔和同步。<br>
          问答第22题<br>
          波特率即传输率，就是在通信过程中每秒传输串型数据的位数。<br>
          问答第23题<br>
          单工：接收和发送器之间只有一根传输线连接，并且只允许在一个方向传送数据。 半双工：接收和发送器之间只有一根传输线连接，发送和接收数据分时交替进行。通过软件和接口的协调控制，实现数据传输的方向转换。 
          全双工：接收和发送器之间有两根传输线连接，承担两个不同方向的数据传送，发送数据和接收数据可以同时进行。 <br>
          问答第24题<br>
          设定波特率因子为16，相应的程序片断如下：<br>
          MOV AL, 76H ；设置模式字<br>
          OUT 22H, AL<br>
          MOV AL, 37H ；设置控制字，启动<br>
          OUT 22H, AL<br>
          <br>
          问答第25题<br>
          00H 0V<br>
          08H 0.78V<br>
          80H 1.25V<br>
          FFH 2.49V<br>
          数字量增加，电压增加9.8mV<br>
          <br>
          问答第26题<br>
          <img src="../../images/chap4/008.gif" width="300" height="168"><br>
          问答第27题<br>
          MOV DX, 400H ;端口地址<br>
          J0: MOV CX, FFH ；设置计数器<br>
          MOV AL, 0</p>
        <p>J1: OUT DX, AL<br>
          INC AL<br>
          CALL DELAY ；调用一个延时程序<br>
          LOOP J1<br>
          JMP J0<br>
          <br>
          问答第28题<br>
          EOC为转换结束信号。EOC 为低电平时，表示正在转换，为高电平时表示一次转换结束。在实际应用中，可以将EOC接中断信号，当转换结束时向CPU申请中断处理。也可以程序查询EOC状态。<br>
          问答第29题<br>
          ST即START，是启动A/D转换的信号，在脉冲下降沿开始转换。一般地，用ALE控制ST信号，即在ALE脉冲上升沿锁存地址，在下降沿开始A/D转换。<br>
          问答第30题<br>
          <img src="../../images/chap4/009.gif" width="300" height="188"> <br>
          芯片通道的选择地址DA、DB、DC所接的地址也是锁存以后的地址。EOC信号通过三态门与数据线的D0相连。<br>
          问答第31题<br>
          设100H字节长的数组起始地址为 EMEM，并由DELAY子程序实现100ms的时间延时。设计程序片断如下：<br>
          MOV AL, 01H ；使用通道1<br>
          MOV DX, 0260H<br>
          MOV CX, 100H<br>
          MOV BX, EMEM ；目标地址<br>
          OUT DX, AL ；启动<br>
          J0:<br>
          MOV DX, 0270H<br>
          IN AL, DX ；查询状态<br>
          AND AL, 01H<br>
          JZ J0<br>
          MOV DX, 0260H ；读入数据<br>
          IN AL, DX<br>
          MOV [BX], AL ；存数据<br>
          INC BX<br>
          CALL DELAY ;调用延迟程序<br>
          LOOP J0<br>
        </p>
        </td>
  </tr>
</table>
  </center>

</body>
</html>
