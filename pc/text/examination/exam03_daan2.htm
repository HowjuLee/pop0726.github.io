<html>
<head>
<title>编译原理</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../css/text.css" type="text/css">
<link href="../../css/weiji.css" rel="stylesheet" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000" class="pop">
<center><table width="95%" border="0" cellspacing="0" cellpadding="0">
  <tr>
      <td class=text> 
        <p><b>二、 问答题答案</b></p>
        <p>问答第1题<br>
          微处理器和外部设备数据传送的控制方式有三种，即程序查询方式、中断方式与直接存储器访问方式。 程序查询方式的实现相对简单，但不足之处在于对状态寄存器的测试占用了CPU过多的时间。和程序查询方式相比，中断方式的效率有较大提高，但在中断的请求与响应过程仍然需要花费比较多的时间。直接存储器存取（DMA）的控制方式克服了中断与程序查询方法的弊端，整个控制数据块传送的过程，包括地址增量和计数器减量的操作，都是由硬件控制完成的，因而大大缩短了数据传送的控制时间。但DMA的硬件实现复杂，成本高。 
          <br>
          问答第2题<br>
          所谓中断，就是在一定条件下，CPU可以随时中断当前任务转向处理内部故障和外部设备请求服务的机制。<br>
          中断向量就是中断处理子程序的入口地址，每个中断类型对应一个中断向量。在8086系统中，每个中断向量需要用4个字节表示，这4个字节中包含了中断服务程序的段地址和偏移量。 
          <br>
          问答第3题<br>
          中断是一个由硬件激发的过程， CPU只需在执行完一条指令之后检查是否有中断请求，避免了程序查询方式中长时间的测试和等待。因此中断方式节约了微处理器的时间，有较高的效率，而且具有实时性。<br>
          问答第4题<br>
          T n ；中断指令<br>
          INTO ；溢出中断指令<br>
          IRET ；中断返回指令<br>
          STI ；中断允许标志设置指令<br>
          CLI ；中断允许标志清除指令 <br>
          问答第5题<br>
          IF标志用于屏蔽可屏蔽中断。当CPU遇到可屏蔽中断时，要判断IF是否为1，如果为1便进入中断响应过程，如果为0，则不响应。<br>
          TF为单步中断标志。当TF为1时，便进入中断类型为1的单步中断。单步中断的功能是只执行当前程序的一条指令，并将寄存器的内容显示出来。 <br>
          问答第6题<br>
          IF和TF标志的设置和清除可以通过专门的指令来完成。<br>
          CLC CF清零<br>
          STC CF 置1<br>
          CLI IF 清零<br>
          CTI IF 置1 <br>
          问答第7题<br>
          保护模式下的中断操作与实模式只是在寻址中断入口地址上有所不同。保护模式使用256个存储在中断描述符表（IDT）中的中断描述符，而实模式下使用的是中断向量表中的中断向量。<br>
          问答第8题<br>
          保护模式使用256个存储在中断描述符表中的中断描述符取代实模式下的中断向量。中断描述表的长度为256×8字节，每个描述符由8个字节表示，中断描述符表的首地址由中断描述符表寄存器提供，它可以定位在存储器的任意地址。微处理器在中断应答周期，通过访问中断描述符表来寻址中断入口地址。<br>
          问答第9题<br>
          中断描述符包含中断服务程序的地址，其中8位段选择符和32位偏移地址。中断描述符还包含表示描述符有效的P位（1bit）和表示描述中断优先级的DPL位（2bits）。图中蓝颜色的4位是描述符的类型标志位，1110表示该描述符为中断描述符。<br>
          <img src="../../images/chap3/002.gif" width="409" height="155"><br>
          问答第10题<br>
          在中断应答周期，CPU主要完成如下操作： 取中断类型码，寻址中断程序入口地址，标志寄存器入堆栈，CS和IP入堆栈，清除IF和TF标志，进入中断处理程序。 
          <br>
          问答第11题<br>
          中断的响应信号。同时也用作中断类型码的读信号。<br>
          问答第12题<br>
          从堆栈中弹出IP和CS，恢复断点地址；弹出标志寄存器的内容，恢复中断前的标志寄存器状态。<br>
          问答第13题<br>
          各类中断的优先级排列如下表所示，自上而下优先级依次降低。<br>
          中断优先级的安排是要用于同时有多个中断请求的场合。如果在同一时刻有多个中断请求，则CPU首先响应优先级高的中断。
        <table width="300" border="1" cellpadding="0" cellspacing="0" bordercolor="#000000" class="pt9">
          <tr>
            <td align="center">除法错中断、断点中断、溢出中断、INT n指令中断</td>
          </tr>
          <tr>
            <td align="center">NMI</td>
          </tr>
          <tr>
            <td align="center">INTR</td>
          </tr>
          <tr>
            <td align="center">单步</td>
          </tr>
        </table>
      
          问答第14题<br>
          菊花链式的排队电路是另一种常用的中断扩展方法。链式排队电路按照中断请求信号在电路队列中的物理连接位置分配优先级。<br>
          问答第15题<br>
          INTR需要外部设备提供中断类型，INTR通常使用20H~FFH的中断类型号。如果不采用8259，则可以将数据总线D7~D0通过上拉电阻连接高电平，使得CPU在INTA＃上升沿能够采样数据总线D7~D0信号，获得相应的中断类型号。微处理器以中断类型号为索引，通过查找中断向量表来寻找中断服务程序的入口。<br>
          问答第16题<br>
          8259A是通过编程初始化命令字和操作命令字来选择定义各种工作方式的。初始化命令字ICW在8259A 工作之前定义，它规定了8259A 
          的基本操作。操作命令字OCW在正常操作过程中定义，它控制8259A的操作。<br>
          系统上电以后，8259A必须写入ICW1、ICW2和ICW4，如果ICW1将8259A编程为级联方式，那么还必须编程ICW3。其中，ICW1定义了8259A的基本操作；ICW2用来编程8259A中断请求的类型号；当系统工作于级联方式时，ICW3表示从片8259A连接到主片8259A的的哪一个中断请求线上；在基于8086~Pentium系列微处理器的系统当中，需要编程8259A的ICW4。具体各个位的定义请参见课文。 
          <br>
          问答第17题<br>
          普通EOI是靠CPU在中断服务程序中向8259A发送EOI命令来清除ISR位的。一般结束中断方式用于全嵌套方式。<br>
          特殊EOI是通过CPU发送特殊的EOI命令，命令指出了要清除的是正在服务的哪一个ISR位。特殊结束主要用于非全嵌套方式。 <br>
          问答第18题<br>
          系统中扩充8个以上中断，需要两片以上的8259A级联工作。最多可以扩充到64个中断，通过9片8259级联实现，其中一片是主片，其他8片是从片。8个从片的中断信号INT端分别连接到主片的中断请求信号IR0~IR7上，从片中初始化命令字ICW3的低3位（ID码）记录了从片与主片连接的位置。主片是通过级联/缓冲比较器来鉴别和选择从片的。级联/缓冲比较器有4根双向的引脚，CAS0~CAS2和SP#/EN#。CAS0~CAS2相当于地址线，主片和从片的CAS0~CAS2互相连接，主片根据发出中断请求的从片与IRi连接的情况来判断是哪一级从片，再通过CAS0~CAS2向它发出选择信号。从片的级连/缓冲比较器将主片发来的地址和初始化命令字中的ID码进行比较，相等时，便在INTA#周期将中断类型码送到数据总线上。<br>
          问答第19题<br>
          由于中断方式是按字节或者字来进行传输的，也就是说，每次传送一个字节或者一个字都需要申请一次中断，都需要CPU重复进行现场保存、数据传输和现场恢复等过程。当需要进行大量数据传输时，中断控制方式效率太低，而适合于使用DMA技术。DMA常用于DRMA刷新、视频显示屏幕刷新以及磁盘存储系统的读和写。DMA还用于控制高速存储器之间的数据传送。<br>
          问答第20题<br>
          外部设备发出DMA传送请求，DMA控制器通过总线请求信号向CPU发出总线请求。CPU在总线周期的每个T状态都要检测总线请求信号，在检测到总线请求以后，便将正在执行的程序挂起。CPU向DMA发出总线响应信号，并交出总线权。DMA控制总线后成为系统的总线主设备，开始控制传送。<br>
          在此过程中，发生作用的信号有：外设请求信号，DMA总线请求信号，CPU应答信号，DMA通道响应信号等。 <br>
          问答第21题<br>
          读传送过程是将存储器作为源，I/O作为目的的数据传送。写传送是将I/O作为源，存储器作为目的的数据传送。存储器到存储器的传送则是目的和源都为存储器的数据传送。<br>
          问答第22题<br>
          DMA通过地址信号、存储器读写信号来选择控制存储器；通过模式寄存器、命令寄存器等寄存器以及I/O接口的读写信号来选择控制I/O设备。<br>
          问答第23题<br>
          单字节传送、块传送、随机请求传送三种方式。 单字节传送方式每次传送完一个字节，并释放总线至少一个总线周期。然后，继续测试外部设备的DMA请求，如果外设发出的DREQ有效，8237A循环上述过程，控制下一个字节的传送，直至传送字节计数器减为零。<br>
          块传送是DMA的一种典型传送方式，在8237A控制器获得总线权以后，控制数据一个字节、一个字节地传送，直至数据块传送完毕。 随机请求传送综合了块传送和单字节传送的特点。每传送完一个字节，8237A就测试DREQ的状态，如果DREQ为有效状态，则继续进行DMA传送，直至字节计数器为0。如果DREO为无效状态，8237A便释放总线，并继续测试DREQ的状态，只有在DREQ回到有效状态以后，8237A才继续控制数据传送。 
          <br>
          问答第24题<br>
          2002H：基本地址寄存器和当前地址寄存器；2003H：基本字计数寄存器和当前字计数寄存器。<br>
          问答第25题<br>
          CLEAR_F EQU 7CH ；F/L触发器<br>
          CH3_A EQU 76H ；3通道地址寄存器<br>
          CH3_C EQU 77H ；3通道字节计数寄存器<br>
          MODE EQU 7BH ；模式寄存器<br>
          CMMD EQU 78H ；命令寄存器<br>
          MASKS EQU 7FH ；屏蔽字寄存器<br>
          REQ EQU 79H ；请求寄存器</p>
        <p> OUTPUT PROC FAR USES AX BX CX <br>
          <br>
          MOV AL，0 <br>
          OUT CLEAR_F，AL ；清零F/L触发器<br>
          MOV AX，20000H ；设置源地址<br>
          OUT CH3_A, AL<br>
          MOV AL，AH<br>
          OUT CH3_A, AL <br>
          MOV AX, 0FFFH ；设置字计数器<br>
          DEC AX<br>
          OUT CH3_C, AL<br>
          MOV AL, AH<br>
          OUT CH3_C, AL<br>
          MOV AL, 1BH ；编程方式字<br>
          OUT MODE, AL ； <br>
          MOV AL, 0 ；编程命令字<br>
          OUT CMND, AL ； <br>
          MOV AL, 7 ；解除通道3屏蔽<br>
          OUT MASKS, AL ； <br>
          OUTPUT ENDP<br>
          问答第26题<br>
          LATCH EQU 10H ；页地址锁存器<br>
          CLEAR_F EQU 7CH ；F/L触发器<br>
          CH0_A EQU 70H ；0通道地址寄存器<br>
          CH1_A EQU 72H ；1通道地址寄存器<br>
          CH1_C EQU 73H ；1通道字节计数寄存器<br>
          MODE EQU 7BH ；模式寄存器<br>
          CMMD EQU 78H ；命令寄存器<br>
          MASKS EQU 7FH ；屏蔽字寄存器<br>
          REQ EQU 79H ；请求寄存器<br>
          STATUS EQU 78H ；状态寄存器</p>
        <p> MEMTRANS PROC FAR USES AX</p>
        <p> MOV AL， 02H<br>
          OUT LATCH，AL ；设置页地址寄存器<br>
          MOV AL，0 <br>
          OUT CLEAR_F，AL ；清零F/L触发器 <br>
          MOV AX，1000H ；编程源存储器地址 <br>
          OUT CH0_A, AL<br>
          MOV AL，AH<br>
          OUT CH0_A, AL ； <br>
          MOV AX, 0H ；编程目标存储器地址<br>
          OUT CH1_A, AL<br>
          MOV AL, AH<br>
          OUT CH1_A, AL<br>
          MOV AX, 0FFH ；编程字节计数寄存器<br>
          DEC AX<br>
          OUT CH1_C, AL<br>
          MOV AL, AH<br>
          OUT CH1_C, AL<br>
          MOV AL, 88H ；编程方式字<br>
          OUT MODE, AL ；<br>
          MOV AL, 85H<br>
          OUT MODE, AL ； <br>
          MOV AL, 1 ；编程命令字<br>
          OUT CMND, AL ； <br>
          MOV AL, 0EH ；解除通道0屏蔽<br>
          OUT MASKS, AL ； <br>
          MOV AL, 4 ；启动DMA传送<br>
          OUT REQ, AL ；<br>
          MEMTRANS END 
          <!--czp-wenda-daan-->
       
        </td>
  </tr>
</table>
  </center>

</body>
</html>
