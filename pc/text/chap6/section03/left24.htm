<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link href="../../../css/weiji.css" rel="stylesheet" type="text/css">
</head>

<body bgcolor="#FFF3C4" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" border="0" cellspacing="10" cellpadding="2">
  <tr>
    <td class="pt9" height="2" > <br>
      　● PCI读<br>
      　　再来分析PCI猝发读交易的过程。<b>图6-22 </b>是一个猝发读交易的实例。这个例子主要想说明两个问题，一是猝发读和普通读交易控制信号状态的差异，二是主设备或目标如何申请插入等待周期。将猝发读和普通读的时序做个比较。地址段CLK1中，除了C/BE#总线上送的是猝发读命令之外，猝发读所有信号同普通读。猝发读数据段CLK2中，和普通读不同的是，FRAME#信号仍然保持有效状态，表示本次交易要传送两个或以上数据段，有效状态一直保持到最后一个数据开始传送之前。读传送AD总线都有一个从主设备发送地址到目标发送数据的信号交替过程，同样，在CLK2中目标将DEVSEL#和TRDY#置为无效状态。CLK3的前沿，采样到DEVSEL#和TRDY#无效，在第一个数据周期插入了一个等待态。在等待态CLK3中，DEVSEL#、IRDY#和TRDY#同时有效，表示主设备和目标全都准备好，在CLK4的前沿数据被主设备读入，完成第一个数据段的传送。从CLK4开始，主设备准备第二数据段的读取，主设备驱动字节选择信号C/BE#有效，令IRDY#继续保持有效。但是，此时目标尚未准备好数据，目标驱动TRDY#为无效状态。CLK5的前沿采样到无效的TRDY#，又一个等待周期被插入。当目标准备好驱动第二项数据，便使能TRDY#，主设备在CLK6的前沿检测到IRDY#、TRDY#同时有效，就读取数据，完成第二项数据读。在CLK6和CLK7中的第三项数据读，也是通过插入等待状态完成的。这个等待态的插入是由主设备没有准备好引起的，主设备在CLK6令IDRY#无效，于是在CLK7插入了一个等待周期。第三个数据项是本次猝法读的最后一个数据项，在CLK7中，主设备驱动FRAME#为高，目标检测到FRAME#为高、IRDY#为低，知道主设备已准备好接收数据且这是最后的一项数据。主设备在CLK8的前沿读取数据并无效IRDY#，目标无效TRDY#及DEVSEL#，结束本次猝发读交易。<br>
    </td>
  </tr>
</table>
</body>
</html>
