<html>
<head>
<title>数据结构</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../css/style.css" type="text/css">
<script language="JavaScript" type="text/JavaScript">
<!--
function MM_openBrWindow(theURL,winName,features) { //v2.0
  window.open(theURL,winName,features);
}
//-->
</script>
</head>

<body text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0" bgcolor="#4A5594">
<table width="100%" border="0" cellspacing="0" cellpadding="0" height="100%">
  <tr> 
    <td width="8">&nbsp;</td>
    <td class="white" valign="top"><span class="part">　7.2.3 有向图(网)的十字链表存储表示</span><br>
      <br>
      　　十字链表是有向图的另一种存储结构，目的是将在有向图的邻接表和逆邻接表中两次出现的同一条弧用一个结点表示，由于在邻接表和逆邻接表中的顶点数据是相同的，则在十字链表中只需要出现一次，但需保留分别指向第一条&quot;出弧&quot;和第一条&quot;入弧&quot;的指针。例如有向图G1的十字链表如下所示（忽略与弧相关的信息指针）。<a href="javascript:;" onClick="MM_openBrWindow('../../../flash/chap07/7-2-1.swf','数据结构','width=400,height=400')"><img src="../../../images/tubiao/dh.gif" alt="动画" width="25" height="24" border="0" align="absmiddle"></a> 
      <p></p>
      <p></p>
      <p></p>
      <p>　<img src="../../../images/pic/chapter07/7_17.gif" width="373" height="234" align="top"><br>
        <br>
        <img src="../../../images/tubiao/cxd.gif" width="25" height="24" align="absmiddle" alt="算法"><span class="zhushi"> 
        有向图的十字链表存储表示</span><br>
        　　<b>const</b> MAX_VERTEX_NUM = 20;</p>
      <p>　　<b>typedef struct</b> ArcBox <b>{</b> <font face="Times New Roman, Times, serif">　　　//</font> 
        弧结点结构定义<br>
        　　　<b>int</b> tailvex, headvex; <font face="Times New Roman, Times, serif">　　　　//</font> 
        该弧的尾和头顶点的位置 <br>
        　　　<b>struct</b> ArcBox <b>*</b>hlink, <b>*</b>tlink; <font face="Times New Roman, Times, serif">//</font> 
        分别为弧头相同和弧尾相同的弧的链域<br>
        　　　VRType weight;<font face="Times New Roman, Times, serif">　　　　　　　　//</font> 
        与弧相关的权值，无权则为0<br>
        　　　InfoType <b>*</b>info; <font face="Times New Roman, Times, serif">　　　　　　　//</font> 
        该弧相关信息的指针<br>
        　　<b>}</b> ArcBox;<br>
        　　<b>typedef struct</b> VexNode <b>{</b><font face="Times New Roman, Times, serif">　　　//</font> 
        顶点结点结构定义<br>
        　　　VertexType data;<br>
        　　　ArcBox <b>*</b>firstin, <b>*</b>firstout;　<font face="Times New Roman, Times, serif"> 
        //</font> 分别指向该顶点第一条入弧和出弧<br>
        　　<b>}</b> VexNode;<br>
        　　<b>typedef struct {</b> <font face="Times New Roman, Times, serif">　　　　　　//</font> 
        十字链表结构定义<br>
        　　　VexNode xlist[MAX_VERTEX_NUM]; <font face="Times New Roman, Times, serif">//</font> 
        表头向量<br>
        　　　<b>int</b> vexnum, arcnum;<font face="Times New Roman, Times, serif">　　　　　//</font> 
        有向图的当前顶点数和弧数<br>
        　　　GraphKind kind;　<font face="Times New Roman, Times, serif">　　　　　　//</font> 
        图的种类标志<br>
        　　<b>}</b> OLGraph;</p>
    </td>
    <td background="../../../images/html/mid.gif" width="18">&nbsp;</td>
    <td background="../../../images/html/right_di4.gif" class="explaination" width="281" valign="top"><br>
      <br>
      　　虽然在有向图的邻接表和逆邻接表中分别可以找到从顶点出发的弧和指向顶点的弧，但对于同一个有向图需要用两个结构来表示它毕竟不方便，因此当应用问题中同时需要对这两种弧进行处理时就需要采用十字链表来表示有向图。 
      <p>　　从例图可见，有向图的十字链表类似于第5章5.2.2节中讨论的稀疏矩阵的十字链表。图中每个弧结点恰好对应有向图G2的邻接矩阵中的非零元素，可将邻接矩阵看成是一个稀疏矩阵，同一行的非零元构成一个链表，同一列的非零元构成一个链表，行链表和列链表的头指针都合在顶点的结点中。<br>
        <br>
        　　由此在十字链表中不仅容易找到从任意一个顶点出发的弧，也容易找到指向任意一个顶点的弧。</p>
    </td>
    <td background="../../../images/html/right_di3.gif" width="13">&nbsp;</td>
  </tr>
</table>
</body>
</html>
