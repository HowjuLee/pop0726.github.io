<html>
<head>
<title>数据结构</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../../css/style.css" type="text/css">
<script language="JavaScript">
<!--
function MM_openBrWindow(theURL,winName,features) { //v2.0
  window.open(theURL,winName,features);
}
//-->
</script>
</head>

<body text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0" bgcolor="#4A5594">
<table width="100%" border="0" cellspacing="0" cellpadding="0" height="100%">
  <tr> 
    <td width="8">&nbsp;</td>
    <td class="white" valign="top"><span class="part">　2.2.2 顺序表中基本操作的实现</span><br>
      <br>
      <b><span class="zhushi">　三、插入元素操作</span></b><br>
      <br>
      　　首先分析，&quot;插入元素&quot;使线性表的逻辑结构发生什么变化？<br>
      　　假设在线性表的第i个元素之前插入一个元素e，使得线性表<br>
      　　(<img src="../../../../images/pic/chapter02/gs/a1.gif" width="11" height="10">, 
      …, <img src="../../../../images/pic/chapter02/gs/ai_1.gif" width="20" height="10">, 
      <img src="../../../../images/pic/chapter02/gs/ai.gif" width="10" height="10">, 
      …, <img src="../../../../images/pic/chapter02/gs/an.gif" width="12" height="10">) 
      改变为 (<img src="../../../../images/pic/chapter02/gs/a1.gif" width="11" height="10">, 
      …, <img src="../../../../images/pic/chapter02/gs/ai_1.gif" width="20" height="10">, 
      e, <img src="../../../../images/pic/chapter02/gs/ai.gif" width="10" height="10">, 
      …, <img src="../../../../images/pic/chapter02/gs/an.gif" width="12" height="10">)<br>
      　即：<br>
      　　(1) 改变了表中元素之间的关系，使&lt; <img src="../../../../images/pic/chapter02/gs/ai_1.gif" width="20" height="10" align="absmiddle">,<img src="../../../../images/pic/chapter02/gs/ai.gif" width="10" height="10" align="absmiddle"> 
      &gt; 改变为&lt;<img src="../../../../images/pic/chapter02/gs/ai_1.gif" width="20" height="10" align="absmiddle">,e&gt;和&lt;e,<img src="../../../../images/pic/chapter02/gs/ai.gif" width="10" height="10" align="absmiddle">&gt;</td>
    <td background="../../../../images/html/mid.gif" width="18">&nbsp;</td>
    <td background="../../../../images/html/right_di4.gif" class="explaination" width="281" valign="top">&nbsp;</td>
    <td background="../../../../images/html/right_di3.gif" width="13">&nbsp;</td>
  </tr>
  <tr> 
    <td width="8">&nbsp;</td>
    <td class="white" valign="top">　　(2) 表长增1<br>
      　　由于顺序表是以&quot;存储位置相邻&quot; 表示&quot;元素之间的前驱和后继关系&quot;，则必须&quot;移动元素&quot;来体现&quot;元素之间发生的变化&quot;。<a href="javascript:;" onClick="MM_openBrWindow('../../../../flash/chap02/2-2-2.swf','数据结构','width=400,height=300')"><img src="../../../../images/tubiao/dh.gif" width="25" height="24" alt="动画" border="0" align="absmiddle"></a><br>
      　</td>
    <td background="../../../../images/html/mid.gif" width="18">&nbsp;</td>
    <td background="../../../../images/html/right_di4.gif" class="explaination" width="281" valign="top">　　</td>
    <td background="../../../../images/html/right_di3.gif" width="13">&nbsp;</td>
  </tr>
  <tr>
    <td width="8">&nbsp;</td>
    <td class="white" valign="top"><img src="../../../../images/tubiao/cxd.gif" width="25" height="24" align="absmiddle" alt="算法">　<span class="zhushi">算法 
      2.6</span><br>
      　　<b>bool</b> ListInsert(SqList <b><font face="Times New Roman, Times, serif">&amp;</font></b>L, <b>int</b> pos, ElemType 
      e)<br>
      　<b>{</b><br>
      　　<span class="zhushi"><font face="Times New Roman, Times, serif">//</font> 
      若存储空间不满且1≤pos≤Listlength(L)+1，则在顺序表 L</span> <span class="zhushi">的</span><br>
      　　<span class="zhushi"><font face="Times New Roman, Times, serif">//</font> 
      第 pos 个元素之前插入新的元素 e 且返回TRUE，否则返回FALSE</span><br>
      　　<b>if</b> (pos &lt; 1 || pos &gt; L.length+1) <b>return FALSE</b> ; <font face="Times New Roman, Times, serif">//</font> 
      插入位置不合法<br>
      　　<b>if</b> (L.length &gt;= L.listsize) <b>return FALSE</b>;<br>
      　　　　　　　　　　　　　　　　<font face="Times New Roman, Times, serif">//</font> 当前存储空间已满，无法插入<br>
      　　<b>for</b> (j=L.length-1; j&gt;=pos-1; --j)<br>
      　　　L.elem[j+1] = L.elem[j]; <font face="Times New Roman, Times, serif">//</font> 
      插入位置及之后的元素右移<br>
      　　L.elem[pos-1] = e; <font face="Times New Roman, Times, serif">　　　　//</font> 
      插入 e<br>
      　　++L.length; <font face="Times New Roman, Times, serif">　　　　　　　//</font> 
      表长增1<br>
      　　<b>return</b> <b>TRUE</b>;<br>
      　<b>}</b> <font face="Times New Roman, Times, serif">//</font> ListInsert 
      <p>　　此算法的<span class="point">时间复杂度</span>为：<b><span class="point"><font face="Times New Roman, Times, serif"><i>O 
        </i>(ListLength(L))</font></span></b></p>
    </td>
    <td background="../../../../images/html/mid.gif" width="18">&nbsp;</td>
    <td background="../../../../images/html/right_di4.gif" class="explaination" width="281" valign="top"><br>
      <br>
      <br>
      <br>
      <br>
      　算法2.6演示的动画所示。<a href="javascript:;" onClick="MM_openBrWindow('../../../../flash/chap02/2-2-3.swf','数据结构','width=400,height=230')"><img src="../../../../images/tubiao/dh.gif" width="25" height="24" alt="动画" border="0" align="absmiddle"></a> 
      <br>
      <br>
      <br>
      　算法时间复杂度的分析：<br>
      　　算法中的基本操作是&quot;移动元素&quot;，for 循环的执行次数在最坏的情况下(pos=1即插入在第一个元素之前时)为 L.length。<br>
      　</td>
    <td background="../../../../images/html/right_di3.gif" width="13">&nbsp;</td>
  </tr>
</table>
</body>
</html>
