<html>
<head>
<title>数据结构</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../css/style.css" type="text/css">
<script language="JavaScript">
<!--
function MM_openBrWindow(theURL,winName,features) { //v2.0
  window.open(theURL,winName,features);
}
//-->
</script>
</head>

<body text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0" bgcolor="#4A5594">
<table width="100%" border="0" cellspacing="0" cellpadding="0" height="100%">
  <tr> 
    <td width="8">&nbsp;</td>
    <td class="white" valign="top" height="100"> 　<span class="part">2.1.2 线性表类型的应用</span><br>
      <br>
      <table width="100%" border="0" cellspacing="0" cellpadding="0">
        <tr> 
          <td width="28" valign="top"><img src="../../../images/tubiao/lt.gif" width="28" height="27"></td>
          <td class="white"><span class="zhushi">例2-2</span> 已知一个&quot;非纯集合&quot; 
            B，试构造一个集合 A，使 A 中只包含 B 中所有值各不相同的数据元素。</td>
        </tr>
      </table>
      　</td>
    <td background="../../../images/html/mid.gif" width="18">&nbsp;</td>
    <td background="../../../images/html/right_di4.gif" class="explaination" width="281" valign="top"><br>
      <br>
      　　在集合论中规定元素之间是彼此相异的。在此所谓&quot;非纯集合&quot;意为该&quot;集合&quot;中存在相同元素。 </td>
    <td background="../../../images/html/right_di3.gif" width="13">&nbsp;</td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td class="white" valign="top">　　换句话说，此问题即为从 B 中挑选出所有&quot;彼此相异&quot;的元素构成一个新的集合。如何区分元素的&quot;相异&quot;或&quot;相同&quot;，一个简单方法即为将每个从 
      B 中取出的元素和已经加入到集合 A 中的元素相比较。 如果还是以线性表 LB 和 LA 分别表示&quot;集合&quot; B 和 A，那么和例2-1的问题相比，此问题求解的算法应该如何写呢？<br>
      　</td>
    <td background="../../../images/html/mid.gif">&nbsp;</td>
    <td background="../../../images/html/right_di4.gif" class="explaination" width="281" valign="top">&nbsp;</td>
    <td background="../../../images/html/right_di3.gif">&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td class="white" valign="top">　　容易看出，应对线性表作和上例相同的操作，具体的三步也都相同，<b><span class="point">所不同之处仅仅在于两点：</span></b>一是例2-1的算法中 
      LA 是已知的，而在此例算法中的 <span class="point">LA 是待新建的</span>；二是例2-1在求得并集之后，原来的两个集合不再保留，而在此例中构建新的集合 
      A 的同时，<span class="point">原来的集合 B 不变</span>。</td>
    <td background="../../../images/html/mid.gif">&nbsp;</td>
    <td background="../../../images/html/right_di4.gif" class="explaination" width="281" valign="top">　　打个比方，某商店需在橱窗中摆出所有商品的样品，那么，B 
      好比是商店内的全部物品，而 A 为橱窗中的样品。 <a href="javascript:;" onClick="MM_openBrWindow('../../../flash/chap02/28.swf','数据结构','width=400,height=300')"><img src="../../../images/tubiao/dh.gif" width="25" height="24" alt="动画" border="0" align="absmiddle"></a></td>
    <td background="../../../images/html/right_di3.gif">&nbsp;</td>
  </tr>
</table>
</body>
</html>
