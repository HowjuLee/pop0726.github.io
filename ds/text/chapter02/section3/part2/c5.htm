<html>
<head>
<title>数据结构</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../../css/style.css" type="text/css">
<script language="JavaScript">
<!--
function MM_openBrWindow(theURL,winName,features) { //v2.0
  window.open(theURL,winName,features);
}
//-->
</script>
</head>

<body text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0" bgcolor="#4A5594">
<script language=JavaScript src="hpmain.js"></script>
<script language=JavaScript src="showhidden.js"></script>
<table width="100%" border="0" cellspacing="0" cellpadding="0" height="100%">
  <tr> 
    <td width="8">&nbsp;</td>
    <td class="white" valign="top"><span class="part">　2.3.2 单链表中基本操作的实现</span><br>
      <br>
      <span class="zhushi">　五、删除元素操作</span><br>
      <br>
      　　和插入类似，由于删除元素 <img src="../../../../images/pic/chapter02/gs/ai.gif" width="10" height="10"> 
      改变了元素之间的关系，使 <img src="../../../../images/pic/chapter02/gs/ai1.gif" width="20" height="10"> 
      不再是 <img src="../../../../images/pic/chapter02/gs/ai.gif" width="10" height="10"> 
      的后继，而是 <img src="../../../../images/pic/chapter02/gs/ai_1.gif" width="20" height="10"> 
      的后继，因此需要修改 <img src="../../../../images/pic/chapter02/gs/ai_1.gif" width="20" height="10"> 
      元素所在结点的指针。因此在单链表中删除元素操作的算法基本思想和插入相同，也是：<span class="point">首先找到第 i-1 个结点，然后修改相应指针。</span><a href="javascript:;" onClick="MM_openBrWindow('../../../../flash/chap02/2-3-1.1.swf','数据结构','width=400,height=300')"><img src="../../../../images/tubiao/dh.gif" alt="动画" width="25" height="24" border="0" align="absmiddle"></a><br>
      　</td>
    <td background="../../../../images/html/mid.gif" width="18">&nbsp;</td>
    <td background="../../../../images/html/right_di4.gif" class="explaination" width="281" valign="top"><br>
      <br>
      <br>
      <br>
      <br>
      　 </td>
    <td background="../../../../images/html/right_di3.gif" width="13">&nbsp;</td>
  </tr>
  <tr>
    <td width="8">&nbsp;</td>
    <td class="white" valign="top"><img src="../../../../images/tubiao/cxd.gif" alt="算法" width="25" height="24" align="absmiddle"> 
      <span class="zhushi">算法2.17</span><br>
      　　<b>bool</b> ListDelete ( SLink <b><font face="Times New Roman, Times, serif">&amp;</font></b>L, <b>int</b> pos, ElemType 
      <b><font face="Times New Roman, Times, serif">&amp;</font></b>e)<br>
      　<b>{</b><br>
      <span class="zhushi">　　<font face="Times New Roman, Times, serif">//</font> 
      若1≤pos≤LengthList(L)，则删除指针L指向头结点的单链表<br>
      　　<font face="Times New Roman, Times, serif">//</font> 中第 pos 个元素并以 e 带回其值，返回函数值为 
      TRUE，<br>
      　　<font face="Times New Roman, Times, serif">//</font> 否则不进行删除操作且返回函数值为 
      FALSE</span><br>
      　　p = L; j = 0;<br>
      　　<b>while</b> (p-&gt;next <b><font face="Times New Roman, Times, serif">&amp;&amp;</font></b> j &lt; i-1)<br>
      　　<b>{</b> <font face="Times New Roman, Times, serif">　　　　　　　　　　　　　　 //</font> 
      寻找第pos个结点，并令p指向其前驱<br>
      　　　p = p-&gt;next; ++j;<br>
      　　<b>}</b><br>
      　　<b>if</b> (<b>!</b>(p-&gt;next) || j &gt; i-1)<br>
      　　<b>　return FALSE;</b> <font face="Times New Roman, Times, serif">　　　　　　　//</font> 
      删除位置不合理<br>
      　　q = p-&gt;next; p-&gt;next = q-&gt;next;　<font face="Times New Roman, Times, serif">//</font> 
      修改指针<br>
      　　e = q-&gt;data; <b>delete</b>(q);<font face="Times New Roman, Times, serif">　　　　//</font> 
      释放结点空间 <br>
      　　<b>return TRUE;</b><br>
      　<b>}</b><font face="Times New Roman, Times, serif"> //</font> ListDelete_L 
      <p>　　算法<span class="point">时间复杂度</span>为<b><span class="point"><font face="Times New Roman, Times, serif"><i>O 
        </i>(ListLength(L))</font></span></b>。</p>
    </td>
    <td background="../../../../images/html/mid.gif" width="18">&nbsp;</td>
    <td background="../../../../images/html/right_di4.gif" class="explaination" width="281" valign="top"> 
      <br>
      <br>
      <table width="90%" border="0" cellspacing="0" cellpadding="0" align="center">
        <tr> 
          <td> 
            <table width="100%" border="0" cellspacing="0" cellpadding="0">
              <tr> 
                <td bgcolor="#ECEEFF" height="14" class="explaination" width="8">&nbsp;</td>
                <td bgcolor="#ECEEFF" height="14" class="explaination"><img src="../../../../images/tubiao/wt.gif" width="23" height="23" align="absmiddle" alt="思考题"> 
                  你是否注意到了，在删除算法中参数不合理的判断条件和插入的情况不同？为什么？</td>
                <td width="15" bgcolor="#ECEEFF" valign="top"><span id="bb"><img border=0 
                              id=HPFrameHLTab3 
                              onClick="showHideContent('HPFrameHL');hidden();"
							   src="../../../../images/html/expand.gif" style="CURSOR: hand" width="15" height="14"></span></td>
              </tr>
            </table>
          </td>
        </tr>
        <tr> 
          <td> 
            <div id=HPFrameHLContent 
           style="WIDTH: 100%;visibility: hidden;background-color:#ECEEFF" > 
              <table width="94%" border="0" cellspacing="0" cellpadding="0" align="center">
                <tr> 
                  <td class="explaination">　因为对插入而言，只要&quot;前驱&quot;存在即可，而对删除而言，不仅&quot;前驱&quot;要存在，被删结点也必须存在。你是否也想到了？</td>
                </tr>
              </table>
            </div>
          </td>
        </tr>
      </table>
      <br>
      <table width="90%" border="0" cellspacing="0" cellpadding="0" align="center">
        <tr> 
          <td> 
            <table width="100%" border="0" cellspacing="0" cellpadding="0">
              <tr> 
                <td bgcolor="#ECEEFF" height="14" class="explaination" width="8">&nbsp;</td>
                <td bgcolor="#ECEEFF" height="14" class="explaination"><img src="../../../../images/tubiao/wt.gif" width="23" height="23" align="absmiddle" alt="思考题"> 
                  如果单链表没有头结点，应该如何修改算法2.17?</td>
                <td width="15" bgcolor="#ECEEFF" valign="top"><span id=dd><img border=0 
                              id=HPFrameDLTab3 
                              onClick="showHideContent('HPFrameDL');hiddenL();"
							   src="../../../../images/html/expand.gif" style="CURSOR: hand" width="15" height="14"></span></td>
              </tr>
            </table>
          </td>
        </tr>
        <tr> 
          <td> 
            <div id=HPFrameDLContent 
           style="WIDTH: 100%;visibility: hidden;background-color:#ECEEFF"> 
              <table width="95%" border="0" cellspacing="0" cellpadding="0" align="center">
                <tr> 
                  <td class="explaination">　需对删除第一个结点的情况进行单独处理。你一定也想到了，因为和插入是一样的问题，对吧？</td>
                </tr>
              </table>
            </div>
          </td>
        </tr>
      </table>
      <br>
      算法时间复杂度的分析：<br>
      　　显然，和插入一样，其时间消耗在查询前驱结点上。</td>
    <td background="../../../../images/html/right_di3.gif" width="13">&nbsp;</td>
  </tr>
</table>
</body>
</html>
