<html>
<head>
<title>数据结构</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../css/style.css" type="text/css">
</head>

<body text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0" bgcolor="#4A5594">
<table width="100%" border="0" cellspacing="0" cellpadding="0" height="100%">
  <tr> 
    <td width="8">&nbsp;</td>
    <td class="white" valign="top"><span class="part">　1.2.3 数据类型和抽象数据类型<br>
      </span><br>
      　　在用高级程序设计语言编写的程序中，必须对程序中出现的每个变量、常量或表达式，明确说明它们所属的数据类型。例如，C语言中的基本数据类型有：整型、字符型、实型（包括单精度型和双精度型）及枚举型。<br>
      <br>
      　　<span class="point">数据类型</span>是一个&quot;值&quot;的集合和定义在此集合上的&quot;一组操作&quot;的总称。<br>
      <br>
      　　所有高级语言中都有&quot;整型&quot;数据类型，它们的实现方法可以各自不同，但对程序员而言，它们是&quot;相同&quot;的。程序员使用它们时仅需了解它们的数学特性，而不需要了解它们在语言中是如何实现的。换句话说，各种语言中实现的是同一个&quot;整数类型&quot;，而这个&quot;整数类&quot;的定义仅对&quot;整数的数学特性&quot;有明确规定。可称这个&quot;整数类型&quot;为&quot;抽象数据类型&quot;。<br>
      　</td>
    <td background="../../../images/html/mid.gif" width="18">&nbsp;</td>
    <td background="../../../images/html/right_di4.gif" class="explaination" width="281" valign="top"><br>
      　<br>
      　　程序中对变量或常量说明其所属类型的作用是，对它们加上两个约束条件：一是可取值的范围，二是可进行的操作。 
      <p>　　在高级编程语言中实现的整数都具有下列&quot;数学特性&quot;：<br>
        　　它是这样一个序列：<br>
        　　　……,-2,-1,0,1,2,……<br>
        <br>
        　　此外，它可以进行&quot;+&quot;、&quot;-&quot;、&quot;<img src="../../../images/pic/chapter04/t2.gif" width="7" height="7">&quot;、&quot;/&quot;及&quot;取模&quot;等运算。<br>
        <br>
        　　&quot;抽象&quot;意为提取&quot;数学特性&quot;。<br>
        　</p>
    </td>
    <td background="../../../images/html/right_di3.gif" width="13">&nbsp;</td>
  </tr>
  <tr>
    <td width="8">&nbsp;</td>
    <td class="white" valign="top">　　<span class="point">抽象数据类型</span>（<span class="point">A</span>bstract 
      <span class="point">D</span>ata <span class="point">T</span>ype 简称 <span class="point">ADT</span>）<b>是指一个数学模型以及定义在此数学模型上的一组操作。</b><br>
      <br>
      　　例如，矩阵的抽象数据类型定义为，矩阵是一个由 m <img src="../../../images/pic/chapter04/t5.gif" width="7" height="7"> 
      n 个数排成 m 行 n 列的表，它可以进行初等变换、相加、相乘、求逆、……等运算。<br>
      <br>
      　抽象数据类型有两个重要特性：<br>
      　<b>・数据抽象 </b><br>
      　　用ADT描述程序处理的实体时，强调的是其本质的特征、其所能完成的功能以及它和外部用户的接口（即外界使用它的方法）。<br>
      <br>
      　<b>・数据封装 </b><br>
      　　将实体的外部特性和其内部实现细节分离，并且对外部用户隐藏其内部实现细节。</td>
    <td background="../../../images/html/mid.gif" width="18">&nbsp;</td>
    <td background="../../../images/html/right_di4.gif" class="explaination" width="281" valign="top">　　抽象数据类型必须给它的外部用户提供完整的 
      &quot;接口&quot;，例如，明确长整数是三个整数的序列以及可以对它进行的操作等。<br>
      <br>
      　　同时，对外部用户来说，不需要了解它是如何实现的，内部实现的改变不影响外部的使用，更重要的是应该做到，不能让外部用户侵入内部。对外部用户来说，抽象数据类型应该完全是一个黑盒子。</td>
    <td background="../../../images/html/right_di3.gif" width="13">&nbsp;</td>
  </tr>
</table>
</body>
</html>
