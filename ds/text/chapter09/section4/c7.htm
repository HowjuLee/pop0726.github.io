<html>
<head>
<title>数据结构</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../css/style.css" type="text/css">
</head>

<body text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0" bgcolor="#4A5594">
<table width="100%" border="0" cellspacing="0" cellpadding="0" height="100%">
  <tr> 
    <td width="10">&nbsp;</td>
    <td class="white" valign="top"><br>
      <span class="part">【本章小结】</span><br>
      　　本章讨论查找表的各种表示方法以及查找效率的衡量标准-平均查找长度。查找表即为集合结构，表中记录之间本不存在约束条件，但为了提高查找速度，在计算机中构建查找表时，应人为地在记录的关键字之间加上某些约束条件，即以其它结构表示之。由于查找过程中的主要操作是关键字和给定值进行比较，因此以一次查找所需进行的比较次数的期望值作为查找方法效率的衡量标准，称之谓平均查找长度。<br>
      <br>
      　　在本章中介绍了查找表的三类存储表示方法：顺序表、树表和哈希表。这里的顺序表指的是顺序存储结构，包括有序表和索引顺序表，因此主要用于表示静态查找表，树表包括静态查找树、二叉查找树和二叉平衡树，树表和哈希表主要用于表示动态查找表。 
      <br>
      <br>
      　　查找树的特点是，每经过一次比较便可将继续查找的范围缩小到某一棵子树上，但查找树并不仅限于二叉树，以后还将介绍其它形式的查找树。<br>
      <br>
      　　所有顺序结构的表和查找树的平均查找长度都是随之查找表中记录数的增加而增大，而哈希表的平均查找长度是装填因子的函数，因此有可能设计出使平均查找长度不超过某个期望值的哈希表。</td>
    <td background="../../../images/html/mid.gif" width="18">&nbsp;</td>
    <td background="../../../images/html/right_di4.gif" class="explaination" valign="top" width="281"><br>
      【本章小结】 </td>
    <td background="../../../images/html/right_di3.gif" width="13">&nbsp;</td>
  </tr>
</table>
</body>
</html>
