<html>
<head>
<title>计算机网络体系结构</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../../css/text.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" border="0" cellspacing="0" cellpadding="0" height="100%">
  <tr>
    <td valign="top">
      <table width="92%" border="0" cellspacing="0" cellpadding="0" align="center">
        <tr>
          <td class="explaination"><br>
            　　设节点A向节点B发0号帧后，连续发送后继的1号帧和2号帧，由于发方连续发送了多帧，所以收方的应答帧应编号，说明是对哪一帧的确认与否认，现在设1号帧出了差错，节点B发送否认帧NAK1，当NAK1到达节点A时，节点A刚好发完3号帧，所以节点A接着重发1号帧。在这期间，虽然在1号帧后，节点B正确地接收了2个帧，由于它们的发送序号都不是1号，所以和1号帧一起被丢弃，这样节点A尽管已发完3号帧，但必须后退，从1号帧开始重发。这也是后退n协议名字的由来。<br>
            <br>
            　　由此可见，接收端只按序接收数据帧。虽然在有差错的1号帧之后接着又收到了正确的2个数据帧，但都必须将它们丢弃，因为这些帧的发送序号都不是所需的1号。<br>
            <br>
            　　发送方在每发送完一个数据帧时都要设置超时定时器。只要在所设置的超时时间超时而仍未收到确认帧，就要重发相应的数据帧。在等不到1号帧的确认而重发1号数据帧时，虽然节点A已经发完了3号帧，但仍必须向回走，将1号帧及其以后的各帧全部进行重传。从这里不难看出，后退n协议一方面因连续发送数据帧而提高了效率，但另一方面，在重传时又必须把原来已正确传送过的数据帧进行重传（仅因这些数据帧之前有一个数据帧出了错），这种做法又使传送效率降低。由此可见，若传输信道的传输质量很差因而误码率较大时，连续测协议不一定优于停止等待协议。<br>
            　</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
