<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../css/text.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000" background="../../../img/index/r4_c3.gif" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" border="0" cellpadding="0" cellspacing="0">
  <tr> 
    <td width="5">&nbsp;</td>
    <td>&nbsp;</td>
    <td width="5">&nbsp;</td>
  </tr>
  <tr>
    <td width="5">　</td>
    <td> 
      <h3><span class="biaoti">7.3.2 锁的管理<br>
        <br>
        ��</span><span class="pt9-black">如何避免交叉破坏数据库状态完整性?最简单的方法就是顺序排列所有的进程。实际上，通常只有少数进程之间会有交叉，所以，串行排列进程的方法过于悲观和保守。改进方法之一是确定哪些进程不会产生交叉，并发地执行它们，顺序地安排其他进程的执行。但遗憾地是，事先并不知道哪些进程要发生交叉。因此通常地处理是，当进程请求的资源，如处理器、磁盘空间等可用时，这些进程就要开始运行，一旦两个进程之间出现交叉冲突，就强迫对这两个进程进行顺序调度。对进程集合的这种交叉--释放安排称作进程同步。下面简单介绍有关进程同步控制的基本概念。<br>
        </span><span class="biaoti"><br>
        1. 加锁(LOCK) <br>
        <br>
        2. 两段式锁协议的实施<br>
        <br>
        3. 封锁策略<br>
        <br>
        4. 封锁的粒度<br>
        <br>
        5. 死锁<br>
        ��</span></h3>
      </td>
    <td width="5">&nbsp;</td>
  </tr>
</table>
</body>
</html>
