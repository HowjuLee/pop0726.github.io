<html><!-- #BeginTemplate "/Templates/r.dwt" -->
<head>
<!-- #BeginEditable "doctitle" --> 
<title>Untitled Document</title>
<!-- #EndEditable -->
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../css/text.css" type="text/css"><STYLE TYPE="text/css">
<!--
BODY {background-image:  url(../../../img/text/bg.jpg);
background-position: bottom;
background-repeat: no-repeat;
background-attachment: fixed;
}
-->
</STYLE>
</head>

<body bgcolor="#FFFFFF" text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0" background="../../../img/text/bg.jpg" > 

<table width="100%" border="0" cellspacing="0" cellpadding="0" class="pt9-black">
  <tr> 
    <td width="10">&nbsp;</td>
    <td>&nbsp;</td>
    <td width="10">&nbsp;</td>
  </tr>
  <tr>
    <td width="10">&nbsp;</td>
    <td> <!-- #BeginEditable "1" --> 
      <p></p>
      <p></p>
      <p></p>
      <p></p>
      <p></p>
      <p></p>
      <p></p>
      <p></p>
      <p></p>
      <p></p>
      <p></p>
      <p></p>
      <p></p>
      <p></p>
      <p></p>
      <p></p>
      <p></p>
      <p></p>
      <p></p>
      <p></p>
      <p></p>
      <p></p>
      <p></p>
      <p></p>
      <p></p>
      <p></p>
      <p></p>
      <p></p>
      <p></p>
      <p></p>
      <p></p>
      <p><span class="biaoti_1">2 软件的可移植性 </span><br>
        <br>
        　　软件的可移植性指应用软件模块成为即插即用的组件，并使多平台的供应商软件之间能实现互操作。实现软件的可移植性的这些要求需开发分布式对象软件。<br>
        　　分布式对象处理中，必须有相应的规范，当前使用的分布式对象技术规范有：OMG的CORBA和Microsoft的DCOM。<br>
        几个名词如下：<br>
        　OMG(Object Management Group) <br>
        　CORBA(Common Object Request Broker Architecture)标准 <br>
        　ORB(Object Request Broker )组件<br>
        　IIOP(Internet Inter Orb Protocol)<br>
        　DCOM(Distribute Component Object Model)标准 <br>
        　　目前各ORB软件供应商正在向即插即用的互操作性发展。把各供应商的ORB软件配置在一个企业中，可以满足企业对分布式计算的各种要求，也为面向对象的代码开发和重用提供一个可依赖的公共基础。<br>
        　　因此，应用软件的开发都遵循如下的规范：采用三层的客户机/服务器结构和分布式对象处理技术。<br>
      </p>
      　(1) 三层的客户机/服务器结构<br>
      　　随着分布式对象处理等中间件技术的发展，分解系统的功能为：用户界面表示层、业务操作层和数据管理三个层次，如图1-11所示。<br>
      <br>
      　　<span class="tubiaoti">图1－11：应用程序的三层结构</span><br>
      <table width="100%" border="0" cellspacing="0" cellpadding="0">
        <tr> 
          <td align="center"><object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="../../../../../../../../download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=5,0,0,0" width="400" height="300">
              <param name=movie value="../../../swf/ch1/1-11.swf">
              <param name=quality value=high>
              <param name="wmode" value="transparent">
              <embed src="../../../swf/ch1/1-11.swf" quality=high pluginspage="http://www.macromedia.com/shockwave/download/index.cgi?P1_Prod_Version=ShockwaveFlash" type="application/x-shockwave-flash" width="400" height="300" wmode="transparent">
              </embed> 
            </object></td>
        </tr>
      </table>
      <font color="#5a5aad">　◆ 表示层：提供可视化的用户界面，便于用户浏览信息和收集数据；与用户交互，组织用户的请求等。<br>
      　◆ 业务层：用对象的观点来组织数据和功能；负责响应用户请求，并分解为对对象的多个操作序列，传送到数据层。 <br>
      　◆ 数据层：把操作转化为对数据的建立、查询、更新、删除等请求，并通过数据管理平台予以完成。并把操作结果通过业务层传给用户。<br>
      </font><br>
      　　应用程序采用三层结构的好处在于：<br>
      　◆ 将业务模型从客户端独立出来，可以更好地表达企业的信息模型；<br>
      　◆ 业务层的模型与服务可以被多个应用系统共享；<br>
      　◆ 在业务层的基础上开发客户端应用程序更为简单，并便于维护；<br>
      　◆ 可以在不同的计算机上提供更好的数据和操作的分布性。<!-- #EndEditable --></td>
    <td width="10">&nbsp;</td>
  </tr>
</table>
</body>
<!-- #EndTemplate --></html>
