<html><!-- #BeginTemplate "/Templates/r.dwt" -->
<head>
<!-- #BeginEditable "doctitle" --> 
<title>Untitled Document</title>
<!-- #EndEditable -->
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../../css/text.css" type="text/css"><STYLE TYPE="text/css">
<!--
BODY {background-image:  url(../../../../img/text/bg.jpg);
background-position: bottom;
background-repeat: no-repeat;
background-attachment: fixed;
}
-->
</STYLE>
</head>

<body bgcolor="#FFFFFF" text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0" background="../../../../img/text/bg.jpg" > 

<table width="100%" border="0" cellspacing="0" cellpadding="0" class="pt9-black">
  <tr> 
    <td width="10">&nbsp;</td>
    <td>&nbsp;</td>
    <td width="10">&nbsp;</td>
  </tr>
  <tr>
    <td width="10">&nbsp;</td>
    <td> <!-- #BeginEditable "1" -->　(1) 数据仓库是面向主题（Subject-Orietation）的。它是根据最终用户的观点来组织和提供数据，目的是尽量快而全地提供用户需要的信息，很少或几乎不要求做数据更新操作。因此，数据仓库中的数据是按照各种主题的方式来进行组织的，主题在数据仓库中的物理实现是一系列的相关表，这与面向应用环境有很大的区别。比如一个保险公司按照应用组织可能是汽车保险、生命保险、健康保险、伤亡保险，而数据仓库环境是按照客户、政策、保险金、索赔来组织数据。这样就决定了数据仓库将焦点集中在数据建模和数据库设计上，而不象面向应用的环境还需要关心过程设计；数据仓库中细节级的数据还摈弃了仅用于操作而对DSS没有用处的数据。<br>
      <br>
      　(2) 数据仓库是集成的（Integration）的。由于要管理大量的历史信息，这些信息与多个应用和多个数据库相关，需要收集和组织多个应用程序多年来在各种业务场合获取的数据。<br>
      <br>
      　(3) 数据仓库是随时间变化（Time Variancy）的。数据仓库内的数据有很长的时间跨度，通常是5~10年。数据仓库的每一个主码必须包含反映时间的属性，并且数据仓库内的数据一旦存在，就不能修改。<br>
      <br>
      　(4) 数据仓库是稳定（Nonvolatile）的。因此对其操作只有数据载入、数据访问及老化数据的清除问题。<br>
      <br>
      　(5) 信息的概括和聚集。操作数据对于决策支持过于详细，数据仓库把大量信息从不同数据库模式和不同版本地数据进行概括和聚集，以人们易于理解的方式提出来。<br>
      <!-- #EndEditable --></td>
    <td width="10">&nbsp;</td>
  </tr>
</table>
</body>
<!-- #EndTemplate --></html>
