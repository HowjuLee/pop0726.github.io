<html><!-- #BeginTemplate "/Templates/r.dwt" -->
<head>
<!-- #BeginEditable "doctitle" --> 
<title>Untitled Document</title>
<!-- #EndEditable -->
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../css/text.css" type="text/css"><STYLE TYPE="text/css">
<!--
BODY {background-image:  url(../../../img/text/bg.jpg);
background-position: bottom;
background-repeat: no-repeat;
background-attachment: fixed;
}
-->
</STYLE>
</head>

<body bgcolor="#FFFFFF" text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0" background="../../../img/text/bg.jpg" > 

<table width="100%" border="0" cellspacing="0" cellpadding="0" class="pt9-black">
  <tr> 
    <td width="10">&nbsp;</td>
    <td>&nbsp;</td>
    <td width="10">&nbsp;</td>
  </tr>
  <tr>
    <td width="10">&nbsp;</td>
    <td> <!-- #BeginEditable "1" -->　　视图是查询结果的关系，是被存储的查询定义，视图的属性名由子查询确定。因此，视图数据在物理上是不存在的。但是可以看的，故称为视图。 
      视图是一个基于查询的逻辑表，视图本身并不存储数据，但它可以表示来自不同来源的数据，对应用程序来说，视图就相当一个表，数据可以从视图中查得，而且在权限许可的情况下，还可以通过视图来插入、更改和删除基本表中的数据。<br>
      　◆视图概念的优点：提供了一定的数据独立性，修改了基本表，通过建立视图，可不改变应用程序。<br>
      　◆ 通过视图简化了应用程序和用户查询；<br>
      　◆ 不同的用户通过视图从不同的观点观察数据；<br>
      　◆ 视图作为授权的单位提高了系统的安全性。 <br>
      <!-- #EndEditable --></td>
    <td width="10">&nbsp;</td>
  </tr>
</table>
</body>
<!-- #EndTemplate --></html>
