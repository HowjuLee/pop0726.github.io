<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../css/text.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000" background="../../../img/index/r4_c3.gif" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" border="0" cellpadding="0" cellspacing="0">
  <tr> 
    <td width="12">&nbsp;</td>
    <td width="1002">&nbsp;</td>
    <td width="5">&nbsp;</td>
  </tr>
  <tr> 
    <td width="12">　</td>
    <td width="1002"> 
      <h3><span class="biaoti_1">6.3 ADO数据对象 <span class="biaoti_2"><br>
        </span></span><span class="pt9-black">　　<font color="#5a5aad">在Internet发展早期，将数据库发布到Web页面上十分困难。静态HTML本身不适合解决这一问题。为跨越存储在关系数据库中的数据和Web之间的鸿沟，Microsoft推出Active 
        Server Pages (ASP)。开发者可以使用ASP创建动态Web页面来表现关系数据库的数据。<br>
        　　在Web发展期间，Microsoft一直使用数据访问对象(Data Access Objects，DAO)和远程数据对象(Remote 
        Data Objects，RDO)。DAO和RDO都是允许开发者与遵从ODBC规范的数据库进行通讯的工具。但是，无论DAO还是RDO都不适于Web开发环境。于是出现了ActiveX 
        Data Objects(ADO)。<br>
        　　ADO是一个面向OLE DB的基于应用程序层的COM接口，通过它可以使用通用的方法来对不同种类的数据源进行访问。ADO是基于OLE DB的，这使得它一方面得益于由OLE 
        DB所提供的丰富的数据访问功能；另一方面也使程序开发人员避免了对一些必须的COM接口进行编程的工作。</font></span><span class="biaoti_1"><span class="biaoti_2"><br>
        </span>6.3.1 ADO对象模型<br>
        </span><span class="pt9-black">　　按照微软自己的说法，ADO是一种战略性的、高层次的、独立于编程语言的，访问所有种类企业信息的数据访问接口。与DAO和RDO不同，ADO最早出现不是随开发工具发布，而是作为微软的WEB服务器产品Internet 
        Information Server(IIS)的数据访问部件面世的。<br>
        　　ADO解决了访问非关系型数据源的问题，使用OLE DB这一新技术给应用程序以对存储在不同数据源的数据进行统一访问。这意味着应用程序可以和访问关系数据库管理系统如Oracle和SQL 
        Server的数据一样，也可以访问文本文件、非关系数据库、索引服务器和活跃目录服务(Active Directory Service, ADS)的数据。这样就不用局限于遵从ODBC规范的数据源了。除了访问更大范围的数据源之外，ADO的另一主要好处在于易于使用，功能强、高速和低内存开销。在这些特性中，ADO记录集支持无状态环境和对存储过程的简便访问，使得ADO成为访问SQL 
        Server的首选工具。<br>
        　　ADO比RDO和DAO的最大长处是易于使用。DAO和RDO的对象模型比ADO的对象模型庞大得多。ADO对象模型如图6-23所示，由三个主要对象组成：Connection, 
        Command 和Recordset。主要对象可用于独立创建和访问数据源。作为对主要对象的补充有Error, Parameter, Field 
        和Property对象。这些辅助对象用于支持主要对象的功能。另外ADO对象模型还包括四种集合对象：Errors, Parameters, Fields 
        和Properties对象，用来管理辅助对象。因此ADO对象模型非常容易学习；访问的数据源种类最多，不仅包括所有的关系型数据库，而且包括邮件服务器上存储的信息、大型主机上的数据，甚至是网络操作系统中的目录信息。 
        <br>
        　　1. ADO 主要对象<br>
        　　2. ADO 辅助对象<br>
        　　3. ADO各种对象间的关系 <br>
        　　4. 利用ADO访问数据库的一般步骤</span></h3>
    </td>
    <td width="5">&nbsp;</td>
  </tr>
</table>
</body>
</html>
