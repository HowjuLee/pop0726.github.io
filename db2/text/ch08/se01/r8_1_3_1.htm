<html><!-- #BeginTemplate "/Templates/r.dwt" -->
<head>
<!-- #BeginEditable "doctitle" --> 
<title>Untitled Document</title>
<!-- #EndEditable -->
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../css/text.css" type="text/css"><STYLE TYPE="text/css">
<!--
BODY {background-image:  url(../../../img/text/bg.jpg);
background-position: bottom;
background-repeat: no-repeat;
background-attachment: fixed;
}
-->
</STYLE>
</head>

<body bgcolor="#FFFFFF" text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0" background="../../../img/text/bg.jpg" > 

<table width="100%" border="0" cellspacing="0" cellpadding="0" class="pt9-black">
  <tr> 
    <td width="10">&nbsp;</td>
    <td>&nbsp;</td>
    <td width="10">&nbsp;</td>
  </tr>
  <tr>
    <td width="10">&nbsp;</td>
    <td> <!-- #BeginEditable "1" --> 
      <p>　<span class="biaoti_1">1． 面向对象数据模型的发展</span><br>
        <br>
        　　根据核心的面向对象概念，构造面向对象数据模型的一般方法是提供丰富的功能，定义和处理各种复杂对象。复杂对象能够直接地表示现实世界中任意结构的、任意复杂的实体，即具有各种复杂子对象和属性并具有任意可操作性的实体。这种方法可分为三类：结构化的面向对象数据模型、行为化的面向对象数据模型、完全的面向对象的数据模型。<br>
        <br>
        　　<font color="#CC0000">（1） 结构化的面向对象模型：<br>
        　　支持复杂的结构化的对象，也就是由子对象及简单属性构造而成的对象。同时还包括处理这些对象的适当的操作集合。在某种意义上看，这些操作是处理由数据模型的结构化机制定义的所有数据类型，它们是在数据模型中事先定义好的。<br>
        <br>
        　　（2） 行为化的面向对象数据模型：<br>
        　　主要是提供继承机制，允许建立大量新的对象类型，包括适合专用类型的操作。最简单的情况是新类型仅起属性域的作用。行为化的面向对象模型受到程序设计语言领域抽象数据类型概念的影响。<br>
        <br>
        　　（3） 完全的面向对象的数据模型：<br>
        　　是综合了结构化的和行为化的面向对象模型的优点：复杂的结构化的对象可以包括用户定义类型的实例，而用户定义的类型可以使用复杂对象结构来表示。<br>
        <br>
        　　早期的面向对象数据库管理系统的模型多属于结构化的对象模型，它们适合许多工程的和CAx的应用。对行为化的面向对象数据模型，多数基于面向对象的程序设计语言，并增加了对象的永久性和其他的数据库特性。完全的面向对象的数据模型其数据库系统尚处于幼年成长时期。<br>
        </font> </p>
      <!-- #EndEditable --></td>
    <td width="10">&nbsp;</td>
  </tr>
</table>
</body>
<!-- #EndTemplate --></html>
