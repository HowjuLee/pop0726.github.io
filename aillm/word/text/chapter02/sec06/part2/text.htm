<html>
<head>
<title>人工智能原理</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../../css/text.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000">
<table width="97%" border="0" cellspacing="0" cellpadding="0" align="right">
  <tr>
    <td>
      <table width="100%" border="0" cellspacing="3" cellpadding="2">
        <tr> 
          <td> 
            <table width="40%" border="0" cellspacing="0" cellpadding="0" background="../../../../images/pic/bg0401.gif" height="18" align="right" class="chap">
              <tr> 
                <td> 
                  <div align="center"><b>第二章 归结推理方法</b></div>
                </td>
              </tr>
            </table>
          </td>
        </tr>
      </table>
      <span class="text"><span class="text"><br>
      　　</span><span class="part">2.6.2 Horn 子句</span><span class="text"><br>
      　　语句　B←<img src="../../../../images/text/chap02/sec01/a1.gif" width="15" height="11" align="absmiddle">，…，<img src="../../../../images/text/chap02/sec01/an.gif" width="15" height="11" align="absmiddle">和B←都是仅有一个正文字B的子句，称作定子句，而目标语句←<img src="../../../../images/text/chap02/sec01/a1.gif" width="15" height="11" align="absmiddle">，…，<img src="../../../../images/text/chap02/sec01/an.gif" width="15" height="11" align="absmiddle">是没有正文字出现的子句。<br>
      　　定子句和目标子句统称Horn子句，也即最多含有一个正文字的子句是Horn子句。Horn子句有着广泛的应用，是1951年由逻辑学家Alfred 
      Horn提出来的。<br>
      　　这样，Prolog 语句都是Horn 子句。<br>
      　　一个由Horn子句构成的子句集称作Horn 子句集。Horn子句类是一阶谓词公式的真子集，但有与一阶逻辑的同样的表达能力。<br>
      　　一个非Horn 子句集S，可通过变换化成Horn子句集S'，使S'不可满足等价于S不可满足。对Horn 集来说，如果S是不可满足的，那么存在从S到□的不使用因子的正单元归结和输入归结。但不保证有正单元输入归结。</span> 
      <table width="100%" border="0" cellspacing="0" cellpadding="0" class="text">
        <span class="text"> 
        <tr> 
          <td width="30"><span class="text"><img src="../../../../images/text/tb/liti.gif" width="26" height="25" alt="例题"></span></td>
          <td><b>例:</b></td>
        </tr>
        <tr> 
          <td>&nbsp;</td>
          <td>　S={P∨Q,～P∨Q,～P∨～Q,P∨～Q}<br>
            　其中P∨Q非Horn子句从而S不是Horn集 。依 <span class="part">2.3.4</span> 的分离规则，得<br>
            　　　　S'＝{Q，～Q}　S″={Q,～Q}<br>
            　有S不可满足等价于S'、S″同时不可满足。而且S'、S″均为Horn 子句集</td>
        </tr>
        </span> 
      </table>
      <br>
      　　 </span><span class="part">2.6.3 SLD（有选择的线性）归结</span><span class="text"><br>
      　　由一个目标子句和若干个定子句组成的子句集称作定子句集，SLD归结是定子句集上的一种线性归结，从目标子句C0开始的，Ci是Ci-1与S中某定子句的归结式。可证明定子句上的SLD是完备的。<br>
      　　Prolog 解释过程采用的是受限的SLD归结，每次归结总是从目标子句最左边<br>
      文字开始的，而且依次同定子句作归结（宽度优先），当全部定子句均不能与当前目标子句最左边文字作归结时，引起回溯，选定当前目标子句的下一个文字为被归结文字。</span><br>
      <br>
      <table width="100%" border="0" cellspacing="0" cellpadding="0">
        <tr> 
          <td width="30" valign="top"><img src="../../../../images/text/tb/tushi.gif" width="25" height="16" alt="图示"></td>
          <td align="center"><img src="../../../../images/text/chap02/sec06/tu2.5.gif" width="350" height="232"><br>
            <span class="explaination"><br>
            图2.5 Porolog 中采用的SLD归结<br>
            <br>
            <img src="../../../../images/text/chap02/sec06/tu2.6.gif" width="350" height="291"> 
            <br>
            图2.6 深度优先的SLD归结 </span></td>
        </tr>
        <tr> 
          <td width="30"><span class="text"><img src="../../../../images/text/tb/liti.gif" width="26" height="25" alt="例题"></span></td>
          <td class="text"><b>例:</b></td>
        </tr>
        <tr> 
          <td width="30">&nbsp;</td>
          <td class="text">　已知<br>
            　　(1) P(x,z)←Q(x,y),P(y,z)<br>
            　　(2) P(x,x)←<br>
            　　(3) Q(a,b)<br>
            　　目标为←P(x,b)<br>
            　　归结过程见图2.5和2.6</td>
        </tr>
      </table>
      <span class="text"><br>
      </span></td>
  </tr>
</table>
</body>
</html>
