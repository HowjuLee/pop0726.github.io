<html>
<head>
<title>人工智能原理</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../../css/text.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000">
<table width="97%" border="0" cellspacing="0" cellpadding="0" align="right">
  <tr>
    <td class="text">
      <table width="100%" border="0" cellspacing="3" cellpadding="2">
        <tr> 
          <td> 
            <table width="40%" border="0" cellspacing="0" cellpadding="0" height="18" align="right">
              <tr> 
                <td class="pt10" background="../../../../images/pic/bg0401.gif"> 
                  <div align="center" class="chap">第三章 不确定和非单调推理方法</div>
                </td>
              </tr>
            </table>
          </td>
        </tr>
      </table>
      <br>
      　　<span class="part">3.2.8 不一致引起的不确定性</span><span class="text"><br>
      　　</span>当知识源不完全可靠或知识源间出现不一致而引起的不确定性时，如何消除这种不确定性是人工智能系统中知识库管理维护的重要问题。对命题逻辑情形Rescher 
      1976年提出了一种处理方法。<br>
      　　如有知识源S<font size="1">1</font>，S<font size="1">2</font>，S<font size="1">3</font>，它们是一般可信但不完全可靠。<br>
      　　　　　S<font size="1">1</font> 断言～P<br>
      　　　　　S<font size="1">2</font> 断言～Q<br>
      　　　　　S<font size="1">3</font> 断言～P∨Q<br>
      　　于是得断言集{～P,～Q,P∨Q},显然这是不一致的矛盾集。使用标准逻辑是无法进行推理的，需设法消除不一致性。<br>
      　　1.建立PS集<br>
      　　设有多个知识源S<font size="1">1</font>，…，S<font size="1">n</font>。而每个S<font size="1">i</font>对某些命题作了断言而且给出了相应的可信度。那么可对所有断言建立似真值从而得PS集。<br>
      　　规定全体有效断言的似真值为1，PS中带有似真值为1的那些断言必须逻辑上一致。若<font size="2">P</font><font size="1">1</font>∧…∧<font size="2">P</font><font size="1">i</font>→Q，而<font size="2">P</font><font size="1">1</font>,…,<font size="2">P</font><font size="1">j</font>,QíPS,而<font size="2">P</font><font size="1">1</font>,…,<font size="2">P</font><font size="1">j</font>又相容时，则Q的似真值要大于或等于<font size="2">P</font><font size="1">1</font>,…,<font size="2">P</font><font size="1">j</font>中似真值最小的。同一断言的可信度有多个时，该断言的似真值取最高的可信度。<br>
      <table width="100%" border="0" cellspacing="0" cellpadding="0" class="text">
        <tr>
          <td width="30"><span class="text"><img src="../../../../images/text/tb/liti.gif" width="26" height="25" alt="例题"></span></td>
          <td><b>例:</b></td>
        </tr>
        <tr>
          <td>&nbsp;</td>
          <td> 　　　　　断言　　　　　可信度<br>
            　　　S<font size="1">1</font>　P→Q　　　　　 　1.0<br>
            　　　S<font size="1">2</font>　P,P∨R　　　　　0.8<br>
            　　　S<font size="1">3</font>　P,S∨～P　　　　0.6<br>
            　　　S<font size="1">4</font>　Q　　　　　　　　0.4<br>
            　可得PS集<br>
            　　　　　断言　　　　　似真值<br>
            　　(1)　 P　　　　　　 0.8<br>
            　　(2)　 P→Q　　　　　1.0<br>
            ��(3)　 P∨R　　　　　0.8<br>
            　　(4)　 S∨～P　　　　0.6<br>
            　　(5) 　Q　　　　　　 0.8<br>
            　其中(1)的断言P，依S<font size="1">2</font>可信度为0.8，依S<font size="1">3</font>可信度为0.6，取其中较大的0.8作为似真值。(5)中的断言Q，可由P，P→Q推得，从而Q的似真值大于或等于P可信度0.8和P→Q的可信度1，从而可取Q的似真值为0.8，而不是直接由S<font size="1">4</font>来确定Q的似真值为0.4。</td>
        </tr>
      </table>
      <br>
      　　2.最大一致集的选取<br>
      　　PS 的一个子集MCS是一个最大一致子集，如果MCS非空逻辑上一致，而将PS中除MCS而外的任一断言加入MCS中便出现不一致。
      <table width="100%" border="0" cellspacing="0" cellpadding="0" class="text">
        <tr> 
          <td width="30"><span class="text"><img src="../../../../images/text/tb/liti.gif" width="26" height="25" alt="例题"></span></td>
          <td><b>例:</b></td>
        </tr>
        <tr> 
          <td>&nbsp;</td>
          <td> 　PS＝{P∨Q,P→R,Q→R,～R}<br>
            　便有<br>
            　　　MCS<font size="1">1</font>＝PS－{～R}<br>
            　　　MCS<font size="1">2</font>= PS-{Q→R}<br>
            　　　MCS<font size="1">3</font>= PS-{P→R}<br>
            　　　MCS<font size="1">4</font>＝PS－{P∨Q}<br>
            　如果～R，P→R具有教高的似真值，那么可不考虑MCS<font size="1">1</font>，MCS<font size="1">3</font>，从而MCS<font size="1">2</font>， 
            MCS<font size="1">4</font>便是可接受的最大一致集，进而求得MCS<font size="1">2</font>， 
            MCS<font size="1">4</font>的共同元素便得一致集，可使用标准逻辑推理了。</td>
        </tr>
      </table>
      <br>
    </td>
  </tr>
</table>
</body>
</html>
