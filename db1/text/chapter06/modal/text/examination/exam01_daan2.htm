<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../css/text.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000" background="../../../../../image/pop/r2_c3.gif">
<center>
  <table width="100%" border="0" cellspacing="0" cellpadding="0">
    <tr>
      <td class=text> 
        <p><b>问答题答案</b></p>
        <p><span class="explaination">问答第1题</span><br>
          　　按照规范的设计方法，一个完整的数据库设计一般分为以下六个阶段：<br>
          　　 ⑴　需求分析：分析用户的需求，包括数据、功能和性能需求；<br>
          　　 ⑵　概念结构设计：主要采用E-R模型进行设计，包括画E-R图； <br>
          　　 ⑶　逻辑结构设计：通过将E-R图转换成表，实现从E-R模型到关系模型的转换； <br>
          　　 ⑷　数据库物理设计：主要是为所设计的数据库选择合适的存储结构和存取路径； <br>
          　　 ⑸　数据库的实施：包括编程、测试和试运行； <br>
          　　 ⑹　数据库运行与维护：系统的运行与数据库的日常维护。<br>
          　　 数据库设计的这六个阶段，用图表示如下： <br>
          <img src="../../../../../image/shiti/20.gif" width="354" height="385"><br>
          需要说明的是： <br>
          　　 ⑴在数据库的逻辑结构设计完成之后，要对数据模型进行优化。优化时可采用在第五章"完整性约束与模式分解"的5.8.3小节中介绍的模式分解方法对关系模式进行规范化。如果在优化过程中发现数据库的逻辑结构有诸多问题，则需要返回到上一层修改或重新进行数据库的逻辑结构设计。 
          <br>
          　　 ⑵在数据库的物理结构设计完成之后，就可以针对系统常用的操作进行性能预测，评价所做的设计。如果发现目前的设计不能保证系统常用操作的性能要求的话，就需要返回到上两层重新调整数据库的逻辑结构设计。<br>
          　　 ⑶在完成数据库的物理实现之后，进行系统的试验性运行。如果在运行过程中发现系统的性能不满足要求，就需要返回到上一层，重新调整数据库的物理设计。 
          <br>
          　　 <br>
          <span class="explaination"> 问答第2题</span><br>
          　　数据库物理设计的目的有二： <br>
          　　 一是提高数据库的性能，特别是满足主要应用的性能要求；<br>
          　　 二是有效地利用存储空间。<br>
          　　 在这两个目的中，第一个目的更为重要，因为性能依然是当今数据库系统的薄弱环节，而相比较而言存储介质却越来越便宜。<br>
          　　 数据库物理设计的内容主要包括： <br>
          　　 ①　确定数据的存储结构；<br>
          　　 ②　为数据选择和调整存取路径，即索引的设计； <br>
          　　 ③　确定数据分布，如数据的垂直划分和水平划分； <br>
          　　 ④　调整和优化数据库的性能，如调整DBMS的某些系统参数。 数据库物理设计的特点是： 数据库的内模式和逻辑模式、用户模式不一样，它不直接面向用户，而且一般的用户不一定、也不需要了解内模式的设计细节。因此，内模式的设计，即物理设计可以不考虑用户理解的方便性。 
          <br>
          　　 <br>
          <span class="explaination">问答第3题</span><br>
          　　对数据库的物理设计不断地进行调整的原因是由于影响数据库物理设计的以下因素在不断地变化着：<br>
          　　 应用需求的因素：数据库的物理设计与多种因素有关，首先是应用的处理需求，例如在某个具体的应用中，事务的内容和事务出现的频率如何。而这些处理需求还会随着应用环境的变化而变化。 
          <br>
          　　 数据特性的因素：其次是数据本身的特性，例如某个关系中某个属性值的分布、记录的长度及个数等等。数据的特性也会随着数据库状态的改变而变化，而且数据的特性在数据库设计阶段是很难准确估计的。 
          <br>
          　　 其他因素：在进行物理设计时还得考虑DBMS、操作系统以及计算机硬件的特性。从整个计算机系统来说，数据库系统只是其负荷的一部分。数据库应用的性能不但取决于数据库的设计，而且与计算机系统的运行环境有关，而计算机的运行环境也不是固定不变的。例如，计算机系统是单用户的还是多用户的？数据库系统是分布的还是集中的？磁盘是数据库专用的，还是全系统共享的？等等诸如此类的问题都是会随时改变的。 
          <br>
          　　 最后从整体的角度考虑：在进行数据库的物理设计时，可供选择的方案很多。例如各种文件结构和存取路径的选择，就可以形成庞大的组合。要穷尽各种可能，寻求最佳设计，几乎是不可能的。数据库设计和一般产品的设计不一样，数据库设计只提供一个初始设计，在数据库运行过程中还可根据用户的要求、应用的需求、数据的特性以及其他因素不断地调整。过分追求所谓的精确设计，企图一次成功，是不符合数据库应用的特点的。 
          <br>
          <br>
          <span class="explaination">问答第4题</span><br>
          　　一般来说可以在三个层次上对数据库系统进行调整，最低是在硬件层上。这一层上调整系统的选项包括：如果磁盘I/O是瓶颈，则增加磁盘或使用RAID系统；如果磁盘缓冲是瓶颈，则增加内存；如果CPU使用是瓶颈，则改用更快的处理器或增加处理器。 
          <br>
          　　 第二层由数据库系统参数组成，例如缓冲区大小和检查点间隔等。可调数据库系统参数的精确集合同具体的DBMS相关。大多数DBMS手册给出了哪些数据库系统参数可调以及用户如何选择参数值等方面的信息。 
          <br>
          　　 第三层是高层设计，包括模式和事务。你可以调整模式的设计、创建的索引以及执行的事务来提高性能。这一层的调整相对而言对系统的依赖较小，而效果可能最明显，也是最能发挥人的聪明才智的调整层次。 
          <br>
          <br>
          <span class="explaination">问答第5题</span><br>
          　　图书馆数据库的E-R图如下所示：<br>
          <img src="../../../../../image/shiti/21.gif" width="366" height="419"><br>
          将E-R图转换为关系模型后得到如下的关系模式和关系：<br>
          　　 Reader-schema = (reader-number, reader-name, address, sex, age, unit) 
          <br>
          　　 Book-schema = (book-number, book-name, authors, publisher) <br>
          　　 Borrower-schema = (reader-number, book-number, date-of-borrowed, 
          date-of-returned) <br>
          　　 reader(Reader-schema), book(Book-schema), borrower(Borrower-schema) 
          <br>
          <!--czp-wenda-daan-->
          <br>
          <br>
          　</p>
      </td>
  </tr>
</table>
  </center>

</body>
</html>
