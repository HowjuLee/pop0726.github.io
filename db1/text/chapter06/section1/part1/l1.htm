<html>
<head>
<title>无标题文档</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../../css/text.css" type="text/css">
</head>
<body bgproperties=fixed bgcolor="#FFFFFF" background="../../../../image/moban/15.gif">
<table width="100%" border="0" cellspacing="0" cellpadding="0" height="100%">
  <tr> 
    <td align="center" valign="top"> 
      <table width="92%" border="0" cellspacing="0" cellpadding="0" height="8">
        <tr> 
          <td class="text" align="left" height="2"> 
            <p class="part"><span class="text">��数据库设计的这六个阶段，用</span>图6-1-1<span class="text">表示如下：</span><br>
            </p>
          </td>
        </tr>
        <tr>
          <td class="text" align="left">
            <div align="center"><span class="part">图6-1-1：数据库的设计过程</span><br>
              <img src="../../../../image/chapter/06/6-1-1.gif" width="420" height="286"> 
            </div>
          </td>
        </tr>
        <tr>
          <td class="text" align="left"> ��对于<span class="part">图6-1-1</span>，需要说明的是：<br>
            ��<b>⑴�概念结构是独立于任何一种数据模型的信息结构。</b>逻辑结构设计的任务就是把概念结构设计阶段设计好的基本E-R图转换为与选用的DBMS产品所支持的数据模型相符合的逻辑结构。从理论上讲，设计逻辑结构应该选择最适宜于相应概念结构的数据模型，然后对支持这种数据模型的各种DBMS进行比较，从中选出最合适的DBMS。但实际情况往往是已经给定了某种DBMS，设计人员没有其他的选择余地。目前DBMS产品一般支持关系、网状、层次三种模型中的一种，对某一种数据模型，各个机器系统又有许多不同的限制，提供不同的环境与工具。所以设计逻辑结构时一般要分三步进行：<br>
            ��<span class="part">①</span>�将概念结构转换为一般的关系、网状、层次模型；<br>
            ��<span class="part">②</span>�将转换的关系、网状、层次模型向特定的DBMS支持下的数据模型转换；<br>
            ��<span class="part">③</span>�对数据模型进行优化；<br>
            ��<b>⑵�在数据库的逻辑结构设计完成之后，要对数据模型进行优化。</b>因为数据库逻辑设计的结果不是唯一的。为了进一步提高数据库应用系统的性能，还应该根据应用需要适当地修改、调整数据模型的结构，这就是数据模型的优化。关系数据模型的优化通常以规范化理论为指导，优化时可采用在<u>第五章&quot;完整性约束与模式分解&quot;的5.8.3小节</u>中介绍的模式分解方法对关系模式进行规范化。如果在优化过程中发现数据库的逻辑结构有诸多问题，则需要返回到上一层修改或重新进行数据库的逻辑结构设计；<br>
            ��<b>⑶�其实将概念模型转换为全局逻辑模型之后，还应该根据局部应用的需求，结合具体DBMS的特点，设计用户的外模式</b>，这一点在<span class="part">图6-1-1</span>中没有体现。目前关系数据库管理系统一般都提供了视图的概念，可以利用视图来设计更符合局部用户需要的用户外模式。定义数据库全局模式主要是从系统的时间效率、空间效率、易维护等角度出发。由于用户外模式与模式是相对独立的，因此在定义用户外模式时可以注重考虑用户的习惯与方便，包括：<br>
            ��<span class="part">①</span>�使用更符合用户习惯的别名；<br>
            ��<span class="part">②</span>�可以对不同级别的用户定义不同的VIEW，以保证系统的安全性；<br>
            ��<span class="part">③</span>�简化用户对系统的使用；<br>
            ��<b>⑷�在数据库的物理结构设计完成之后，就可以针对系统常用的操作进行性能预测，评价所做的设计。</b>如果发现目前的设计不能保证系统常用操作的性能要求的话，就需要返回到上两层重新调整数据库的逻辑结构设计；<br>
            <br>
            <span class="menu">��当评价一个DBMS产品时，性能指标是一个主要的因素。一个DBMS是一个复杂的软件，而且不同的厂商可能将它们的系统定位于不同的市场。为此，他们对系统的某些特定部分进行更多的优化，或者选择不同的设计。例如，一些系统要求有效地运行复杂查询，而另一些系统用来在一秒中内运行很多简单事务。在每一类系统中，都有很多竞争产品。为了帮助用户在选择DBMS的过程中找到适合自身的系统，人们提出了几个性能基准测试。它们之中包括度量特定一类应用性能的基准测试和度量一个DBMS完成各种操作的好坏的基准测试（如，Wisconsin 
            Benchmark）。<br>
            ��基准测试应该是可移植的、易于理解的，并且可以很自然地就扩展到大的问题实例上。它们应该能够度量峰值性能（如，每秒中处理事务的个数，即tps），同时也能度量在给定应用域内工作负载的性能价格比（如，＄/tps）。现在已经建立了事务处理委员会（简称TPC）来定义事务处理和数据库系统的基准测试。其他著名的基准测试已经被学术研究者和工业组织提了出来。属于特定厂商的基准测试对于比较不同的系统没有多大的用处（尽管它们可能在特定工作负载下判断一个给定系统的好坏是有用的）。<br>
            ��在万维网上，通过URL：http://www.tpc.org可以获得联机版本的所有TPC基准程序描述以及基准程序结果。<br>
            <br>
            ��</span><b>⑸�完成数据库的物理设计之后，设计人员就要用RDBMS提供的数据定义语言和其他实用程序将数据库的逻辑设计和物理设计的结果严格地描述出来，成为DBMS可以接受的源代码。</b>再经过调试产生目标模式，然后就可以组织数据入库了，这就是数据库实施阶段，即数据库的物理实现。数据库的物理实现包括两项重要的工作：一是数据载入；二是应用程序的编码和调试。<br>
            ��<b>⑹�在完成数据库的物理实现之后，进行系统的试验性运行。</b>这一阶段实际运行数据库应用程序，执行对数据库的各种操作，测试应用程序的功能是否满足设计要求。如果不满足，对应用程序部分则要修改、调整，直到达到设计要求为止。如果在运行过程中发现系统的性能不满足要求，就需要返回到上一层，重新调整数据库的物理设计。<br>
            ��<b>⑺�数据库试运行合格后，数据库开发工作就基本完成，即可投入正式运行了。</b>但是，由于应用环境在不断变化，数据库运行过程中物理存储也会不断变化，因此对数据库设计进行评价、调整、修改等维护工作是一个长期的任务。也是设计工作的继续和提高。在数据库运行阶段，对数据库的经常性的维护工作主要是由DBA完成的，它包括：<br>
            ��<span class="part">①</span>�数据库的转储和恢复；<br>
            ��<span class="part">②</span>�数据库的安全性和完整性控制；<br>
            ��<span class="part">③</span>�数据库性能的监督、分析和改造；<br>
            ��<span class="part">④</span>�数据库的重组织与重构造；<br>
            <br>
            ��<span class="menu">正像我们所强调的那样，这个设计步骤既是数据库的设计过程，也包括了数据库应用系统的设计过程。在设计过程中把数据库的设计和对数据库中数据处理的设计紧密结合起来，将这两方面的需求分析、抽象、设计、实现在各个阶段同时进行，相互参照，相互补充，以完善两方面的设计。事实上，如果不了解应用环境对数据的处理要求，或没有考虑如何去实现这些处理要求，是不可能设计一个良好的数据库结构的！</span></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
