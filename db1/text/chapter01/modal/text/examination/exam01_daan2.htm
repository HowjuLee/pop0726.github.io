<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../css/text.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000" background="../../../../../image/pop/r2_c3.gif">
<center><table width="95%" border="0" cellspacing="0" cellpadding="0">
  <tr>
      <td class=text> 
        <p><b>问答题答案</b></p>
        <p><span class="section">问答第1题</span><br>
          ��物理数据独立性是指修改数据库的物理模式而不必重写应用程序的能力，而逻辑数据独立性是指修改数据库的逻辑模式而不必重写应用程序的能力。逻辑数据独立性比物理数据独立性更难作到，这是因为应用程序对于它们所要访问的数据的逻辑结构依赖性很大，因为应用程序与数据库的逻辑层靠得更近一些。<br>
          <br>
          <span class="section">问答第2题</span><br>
          ��简单地说数据库管理员主要负责对DBMS进行集中的管理与控制，例如：磁盘空间的管理、用户的管理、数据的备份与恢复、用户权限的控制等等。<br>
          <br>
          <span class="section">问答第3题</span><br>
          ��数据库中的数据会随时发生变化，特定时刻存储在数据库中的信息的集合称作数据库的一个实例。而数据库的总体设计称作数据库模式，数据库模式不会频繁地发生变化。例如，在数据库中有一张表customer，它包含字段name、sex、age、address等，所谓的模式就是指customer表的结构，包括字段的名称、类型和长度一般都不会发生变化。而customer表中的数据，即数据库实例的一部分，会随着数据的插入、删除和更新而不断地发生变化。<br>
          <br>
          <span class="section">问答第4题</span><br>
          �<span class="part">�</span><span class="explaination">物理层：</span>最低层次的抽象，描述数据实际上是如何存储的。由于物理层详细描述复杂的低层数据结构，因而一般是开发DBMS的数据库供应商应该研究的事情； 
          逻辑层：比物理层稍高层次的抽象，描述数据库中存储什么数据以及这些数据间存在什么关系。虽然简单的逻辑层结构的实现涉及到复杂的物理层结构，但逻辑层的用户不必知道这种复杂性。逻辑层抽象是由数据库管理员和数据库应用开发人员使用的，他们必须确定数据库中应该保存哪些信息； 
          <br>
          �� <span class="explaination">视图层（概念层）：</span>最高层次的抽象，但只描述整个数据库的某个部分。尽管在逻辑层使用了比较简单的结构，但由于数据库的规模巨大，所以仍存在一定程度的复杂性。数据库系统的多数用户并不需要关心所有的信息，而只需要访问数据库的一部分。视图抽象层的定义正是为了使用户与系统的交互更简单。系统可以为同一数据库提供多个视图，而视图又保证了数据的安全性。<br>
          �� 例如：假设数据库中有一张表customer，它的定义如下： <br>
          �� create table customer(<br>
          ������������� name varchar(30), <br>
          ������������� sex char(1), <br>
          ������������� age integer, <br>
          ������������� address varchar(50)) <br>
          �� 在物理层，customer记录可能被描述为由连续的存储位置（如字或字节）组成的存储块，而数据库管理系统为数据库程序设计人员屏蔽了这些低层的存储细节； 
          <br>
          �� 在逻辑层，正如前面的代码所示，每个这样的记录通过表的定义进行描述，而数据库管理员或程序设计人员也常常在这个抽象层次上工作。 <br>
          �� 在视图层，数据库管理系统定义了数据库的多个视图，例如，视图view1来自表customer，但是只包含name和sex两个字段，数据库用户看到的是这些视图。除了屏蔽数据库的逻辑层细节外，视图还提供了防止用户访问数据库某些数据的安全机制。例如，通过视图view1就不能访问客户的年龄和地址信息。 
          <br>
          <!--czp-wenda-daan-->
        </p>
      </td>
  </tr>
</table>
  </center>

</body>
</html>
