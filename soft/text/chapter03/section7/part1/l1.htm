<html>
<head>
<title>l1</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../../css/text.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" border="0" cellspacing="0" cellpadding="0" height="100%">
  <tr>
    <td valign="top">
      <table width="92%" border="0" cellspacing="0" cellpadding="0" align="center">
        <tr>
          <td class="text">��<br>
            Pressman提出了一组<span class="part">原则</span>，用来定义和设计数据。<br>
            <br>
            �　<span class="part">1、</span>用于软件的系统化方法也适用于数据。应当考虑几种不同的数据组织方案，还应当分析数据设计给软件设计带来的影响。<br>
            <br>
            �　<span class="part">2、</span>要确定所有的数据结构和在每种数据结构上施加的操作。对于涉及到软件中若干个功能的实现处理的复杂数据结构，可以为它定义一个抽象数据类型。<br>
            <br>
            �　<span class="part">3、</span>应当建立一个数据词典并用它来定义数据和软件的设计。<br>
            <br>
            �　<span class="part">4、</span>低层数据设计的决策应推迟到设计过程的后期进行。可以将逐步细化的方法用于数据设计。在需求分析时确定总体数据组织，在概要设计阶段加以细化，而在详细设计阶段才规定具体的细节。<br>
            <br>
            �　<span class="part">5、</span>数据结构的表示只限于那些必须直接使用该数据结构内数据的模块才能知道。此原则就是信息隐蔽和与此相关的耦合性原则，把数据对象的逻辑形式与物理形式分开。<br>
            <br>
            �　<span class="part">6、</span>数据结构应当设计成为可复用的。建立一个存有各种可复用的数据结构模型的构件库，以减少数据定义和设计的工作量。<br>
            <br>
            �　<span class="part">7、</span>软件设计和程序设计语言应当支持抽象数据类型的定义和实现。如果没有直接定义某种复杂数据结构的手段，这种结构的设计和实现往往是很困难的。<br>
            <br>
            ��以上原则可适用于软件工程的定义阶段和开发阶段。&quot;清晰的信息定义是软件开发成功的关键&quot;。<br>
            ��</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
