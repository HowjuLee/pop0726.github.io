<html>
<head>
<title>l3_4</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../../css/text.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" border="0" cellspacing="0" cellpadding="0" height="100%">
  <tr>
    <td valign="top">
      <table width="92%" border="0" cellspacing="0" cellpadding="0" align="center" height="143">
        <tr>
          <td class="text"><span class="part">　<br>
            (4) 数据结构设计</span><br>
            <br>
            　　确定软件涉及的文件系统的结构以及数据库的模式、子模式，进行数据完整性和安全性的设计。它包括：<br>
            　<span class="part">①</span> 确定输入，输出文件的详细的数据结构。<br>
            <br>
            　<span class="part">②</span> 结合算法设计，确定算法所必需的逻辑数据结构及其操作。<br>
            <br>
            　<span class="part">③</span> 确定对逻辑数据结构所必需的那些操作的程序模块（软件包）。限制和确定各个数据设计决策的影响范围。<br>
            <br>
            　<span class="part">④</span> 若需要与操作系统或调度程序接口所必须的控制表等数据时，确定其详细的数据结构和使用规则。<br>
            <br>
            　<span class="part">⑤</span> 数据库设计<br>
            　　数据库的设计指数据存储文件的设计。在需求分析阶段已经进行了数据分析，采用自底向上的方法，从用户的角度，用实体�D关系模型建立了数据的模型，这一步也称为概念设计。在概要设计阶段进一步做逻辑设计。因为实体�D关系模型独立于数据库管理(DBMS)，需结合具体的DBMS特征来建立数据库的逻辑结构。 
            <br>
            　　对于关系型DBMS来说，将概念结构转换为应用子模式和数据库模式并进行规范化，定义数据结构所含的数据项、类型、长度、它们之间的层次或相互关系的表格等。<br>
            <br>
            　<span class="part">⑥</span> 数据的保护性设计<br>
            　 <span class="part">・</span>防卫性设计：在软件设计中就插入自动检错，报错和纠错的功能。<br>
            　 <span class="part">・</span>一致性设计：有两个方面。其一是保证软件运行过程中所使用的数据的类型和取值范围不变。其二是在并发处理过程中使用封锁和解除封锁机制保持数据不被破坏。<br>
            　 <span class="part">・</span>冗余性设计：针对同一问题，由两个开发者采用不同的程序设计风格不同的算法设计软件，当两者运行结果之差不在允许范围内时，利用检错系统予以纠正，或使用表决技术决定一个正确的结果，以保证软件容错。<br>
            　 </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
