<html>
<head>
<title>l1_2</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../../css/text.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" border="0" cellspacing="0" cellpadding="0" height="100%">
  <tr>
    <td valign="top">
      <table width="92%" border="0" cellspacing="0" cellpadding="0" align="center">
        <tr>
          <td><span class="text">　　<br>
            <span class="section">2、调用�D返回系统</span><br>
            　　这种结构包括主程序�M子程序及层次结构。在层次结构中，每一层都只与上下相邻的两层通信。每一层在利用下层基础服务的条件下，为上层提供服务。最典型的例子就是各种虚拟机、X-window以及OSI-ISO的7层网络协议。 
            <br>
            　　这种结构的</span><span class="part">优点</span><span class="text">是：提供逐步抽象的编程支持，支持复用及系统升级。</span><span class="part">缺点</span><span class="text">是：不是所有的系统都适合于建成层次结构，不能提供最佳性能。 
            <br>
            <span class="section"><br>
            3、面向对象的系统</span><br>
            　　在这种系统中，数据和其相关的基本操作被封装在一起。系统的构件是对象。对象具有诸如封装、隐蔽、继承等良好的特性。对象必须自己维护其数据的一致性。<br>
            　　这种结构的<span class="part">优点</span>是：将具体的实现部分隐蔽在对象中，使得代码之间的独立性很好，有利于将复杂的系统分解为相互操纵的子任务。<span class="part">缺点</span>是：对象间进行一般的调用时必须知道对方的标识。如果一个对象的标识发生变化，所有显式调用这个对象操作的地方都要修改。对象之间的同步等还缺乏现成的机制。<br>
            　　 </span></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
