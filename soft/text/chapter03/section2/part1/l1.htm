<html>
<head>
<title>l1</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../../css/text.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" border="0" cellspacing="0" cellpadding="0" height="100%">
  <tr>
    <td valign="top">
      <table width="92%" border="0" cellspacing="0" cellpadding="0" align="center">
        <tr>
          <td class="text"><br>
            <span class="section">1 过程抽象</span><br>
            　　在软件工程过程中，从系统定义到实现，每进展一步都可以看做是对软件解决方案的抽象化过程的一次细化。在软件计划阶段，软件被当做整个计算机系统中的一个元素来看待。在软件需求分析阶段，用&quot;问题所处环境的为大家所熟悉的术语&quot;来描述软件的解决方法。而在从概要设计到详细设计的过程中，抽象化的层次逐次降低。当产生源程序时到达最低的抽象层次。<br>
            <br>
            <span class="section">2 数据抽象</span><br>
            　　数据抽象与过程抽象一样，允许设计人员在不同层次上描述数据对象的细节。例如，可以定义一个draw数据对象，并将它规定为一个抽象数据类型，用它的构成元素来定义它的内部细节。此时，数据抽象draw本身是由另外一些数据抽象构成。而且在定义draw的抽象数据类型之后，就可以引用它来定义其它数据对象，而不必涉及draw的内部细节。<br>
            <br>
            <span class="section">3 控制抽象</span><br>
            　　与过程抽象和数据抽象一样，控制抽象可以包含一个程序控制机制而无须规定其内部细节。控制抽象的例子就是在操作系统中用以协调某些活动的同步信号。<br>
            　　 </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
