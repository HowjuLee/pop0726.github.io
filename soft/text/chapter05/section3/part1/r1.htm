<html>
<head>
<title>r</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../../css/text.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0" background="../../../../images/html/right_r6_c11.gif">
<table width="100%" border="0" cellspacing="0" cellpadding="0" height="100%">
  <tr>
    <td valign="top">
      <table width="92%" border="0" cellspacing="0" cellpadding="0" align="center">
        <tr> 
          <td class="explaination" height="2">��<br>
            <span class="zhishidian">5.3.1 单元测试 </span><br>
            <br>
            ��单元测试针对程序模块，进行正确性检验的测试。其目的在于发现各模块内部可能存在的各种差错。单元测试需要从程序的内部结构出发设计测试用例。多个模块可以平行地独立进行单元测试。<br>
            <br>
            <span class="section">1、单元测试的内容</span><br>
            ��在单元测试时，测试者需要依据详细设计说明书和源程序清单，了解该模块的I／O条件和模块的逻辑结构，主要采用白盒测试的测试用例，辅之以黑盒测试的测试用例，使之对任何合理的输入和不合理的输入，都能鉴别和响应。这要求对所有的局部的和全局的数据结构、外部接口和程序代码的关键部分，都要进行桌前检查和严格的代码审查。<br>
            ��在单元测试中进行的测试工作如<span class="part">图5.4</span>所示，需要在五个方面对被测模块进行检查。<br>
            <br>
            <span class="part">��(1) 模块接口测试<br>
            <br>
            ��(2) 局部数据结构测试<br>
            <br>
            ��(3) 路径测试<br>
            <br>
            ��(4) 错误处理测试<br>
            <br>
            ��(5) 边界测试</span><br>
            ��</td>
        </tr>
      </table>
      
    </td>
  </tr>
</table>
</body>
</html>
