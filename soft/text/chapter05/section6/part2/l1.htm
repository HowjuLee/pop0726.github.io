<html>
<head>
<title>l1</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../../css/text.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" border="0" cellspacing="0" cellpadding="0" height="100%">
  <tr>
    <td valign="top">
      <table width="92%" border="0" cellspacing="0" cellpadding="0" align="center" height="8">
        <tr> 
          <td class="text"> 
            <p><br>
              <img src="../../../../images/tubiao/lt.gif" width="26" height="25" alt="例题"> 
              例如： </p>
          </td>
        </tr>
        <tr>
          <td class="text">��<br>
            <span class="part">(1) 通过内存全部打印来排错（Memory Dump）</span><br>
            ��将计算机存储器和寄存器的全部内容打印出来，然后在这大量的数据中寻找出错的位置。虽然有时使用它可以获得成功，但是更多的是浪费了机时、纸张和人力。可能是效率最低的方法。其缺点是：<br>
            ��<span class="part">・</span>建立内存地址与源程序变量之间的对应关系很困难，仅汇编和手编程序才有可能。<br>
            ��<span class="part">・</span>人们将面对大量（八进制或十六进制）数据，其中大多数与所查错误无关。<br>
            ��<span class="part">・</span>一个内存全部内容打印清单只显示了源程序在某一瞬间的状态，即所谓静态映象；但为了发现错误，需要的是程序的随时间变化的动态过程。<br>
            ��<span class="part">・</span>一个内存全部内容打印清单不能反映在出错位置处程序的状态。程序在出错时刻与打印信息时刻之间的时间间隔内所做的事情可能会掩盖所需要的线索。 
            <br>
            ��<span class="part">・</span>缺乏从分析全部内存打印信息来找到错误原因的算法。<br>
            ��</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
