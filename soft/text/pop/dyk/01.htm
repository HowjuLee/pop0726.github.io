<html>
<head>
<title>无标题文档</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../css/text.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0" background="../../../images/tanchu/di.gif">
<table width="100%" border="0" cellspacing="0" cellpadding="0" height="100%">
  <tr>
    <td valign="top" align="center"> 
      <table width="92%" border="0" cellspacing="0" cellpadding="0" height="697">
        <tr> 
          <td height="304"><a name="00"></a><a href="01.htm#01"><font color=black><span class="text"><br>
            问题1：【为什么要学习软件工程?】</span></font></a><span class="text"><br>
            <a href="01.htm#02" class="text">问题2：【软件工程包括那些内容？】</a><br>
            <a href="01.htm#03" class="text">问题3：【如何学好软件工程？】</a><br>
            </span><a href="01.htm#04"><font color="black"><span class="text">问题4：【如何考试？】</span></font></a><span class="text"><br>
            <a href="01.htm#05" class="text">问题5：【为什么在开发软件时都要从建模开始？】</a><br>
            <a href="01.htm#06" class="text">问题6：【什么是范型？有哪些常用的范型？】</a><br>
            <a href="01.htm#07" class="text">问题7：【什么是软件生存期?它分为几个阶段?】</a><br>
            <a href="01.htm#08" class="text">问题8：【在软件计划阶段需要解决什么问题？】</a><br>
            <a href="01.htm#09" class="text">问题9：【在软件需求分析阶段要解决什么问题？】</a><br>
            <a href="01.htm#10" class="text">问题10：【软件设计要解决什么问题？】</a><br>
            <a href="01.htm#11" class="text">问题11：【软件测试要解决什么问题？】</a><br>
            <a href="01.htm#12" class="text">问题12：【软件工程有一个原则，叫做抽象化，这是什么意思？】</a><br>
            <a href="01.htm#13" class="text">问题13：【需求分析的原则有哪些？】</a><br>
            <a href="01.htm#14" class="text">问题14：【什么是软件质量？如何度量软件质量？】</a><br>
            <a href="01.htm#15" class="text">问题15：【什么是软件维护？为什么要做软件维护？】 </a><a href="01.htm#16"><br>
            </a></span><a href="01.htm#16" class="text">问题16：【结构化开发方法和面向对象开发方法的区别何在？】</a><span class="text"><br>
            <a href="01.htm#17" class="text">问题17：【测试的目的是什么？程序测试与调试区别何在？】</a><br>
            </span><a href="01.htm#18" class="text">问题18：【为什么要开展质量保证活动？它有那些方面？】</a><span class="text"><br>
            <a href="01.htm#19" class="text">问题19：【为什么要讨论程序设计风格问题？】</a><br>
            <a href="01.htm#20" class="text">问题20：【什么是软件工程过程？有哪些过程？】</a><br>
            ��</span></td>
        </tr>
        <tr> 
          <td class="text" valign="top"><span class="section"><a name="01"></a></span><span class="part">问题1：【为什么要学习软件工程?】</span><span class="zhishidian"><br>
            </span><span class="part">解答: </span>�随着计算机在各行各业的普遍使用，对软件的需求也越来越大。但这样随之带来的问题是：软件的功能越来越复杂，规模越来越大，而人们的开发技术跟不上要求，软件的质量提不高，成本则越来越高。为此，许多科学家研究，如何借助其他领域的经验和技术解决软件开发中遇到的问题，终于得到一个结论：软件危机的出路在于标准化和工程化。1968年，在北大西洋公约组织召开的一个计算机会议上，正式提出了软件工程。其目的是要开发出能满足人们要求的软件产品。迄今为止，软件工程的研究和应用已经取得了很大成果，在软件工程方法、工具和管理技术等方面的应用，令软件开发人员受益不浅，大大提高了软件产品的质量，缩短了开发工期，节约了成本。<span class="zhishidian"><br>
            <br>
            </span><span class="section"><a name="02"></a></span><span class="part">问题2：【软件工程包括那些内容？】</span><span class="zhishidian"><br>
            </span><span class="part">解答:</span> <span class="section">�</span>软件工程包括三个方面：方法、工具和过程。软件工程方法为软件开发提供了&quot;如何做&quot;的技术。它包括了多方面的任务，如项目计划与估算、软件系统需求分析、数据结构、系统总体结构的设计、算法过程的设计、编码、测试以及维护等。软件工具为软件工程方法提供了自动的或半自动的软件支撑环境。软件工程的过程则将软件工程的方法和工具综合起来以达到合理、及时地进行计算机软件开发的目的。过程定义了方法使用的顺序、要求交付的文档资料、为保证质量和协调变化所需要的管理、及软件开发各个阶段完成的里程碑。<br>
            <span class="zhishidian"><br>
            </span><span class="section"><a name="03"></a></span><span class="part">问题3：【如何学好软件工程？】</span><span class="section"><br>
            </span><span class="part">解答:</span><span class="section"> </span>�软件工程的内容十分繁杂，但有一条主线，即软件生存期。抓住这条主线，一步步来学习。各章节的安排就是循这条主线的，从用户要求定义、需求分析、设计、实现、测试到软件维护。每一步又有一些活动和任务。全部记忆有一定困难，但条理必须清楚，至于很多细节，不一定全要记忆。<span class="section"><br>
            <br>
            <a name="04"></a></span><span class="part">问题4：【如何考试？】</span><span class="section"><br>
            </span><span class="part">解答:</span><span class="section"> </span>�软件工程的考试参看考试大纲中的样卷。大致题型有选择填空题、判断（对错）题、分析/设计/计算题、问答题等。选择填空题和判断题是客观题，答对就有分，答不对就没分，这部分题就看平时概念清不清楚。因此，要搞清每种方法或模型的特点、实施步骤、优缺点等。分析/设计/计算题主要在分析建模、设计方法、质量度量和估算、成本与效益的估算、测试用例设计等方面多下工夫。最后是问答题，要对付这类问题，必须记忆各种概念。但这类题可以发挥，不至于分都扣光。所以，在考试时要权衡。<span class="section"><br>
            <br>
            <a name="05"></a></span><span class="part">问题5：【为什么在开发软件时都要从建模开始？】</span><span class="section"><br>
            </span><span class="part">解答:</span><span class="section">� </span>从1960年代开始，建模已经成为软件开发的重要手段。无论是传统的结构化开发方法、还是面向对象开发方法，都需要建立需求定义模型、分析模型、设计模型，只不过是考虑的出发点、描述问题的方式和记号不同而已。在建立模型时可以根据用户要求，系统地、完整地、细致地、规范地描述问题、研究解决问题的方案，从而有计划、有准备、有控制地实施软件开发。<span class="section"><br>
            <br>
            <a name="06"></a></span><span class="part">问题6：【什么是范型？有哪些常用的范型？】</span><span class="section"><br>
            </span><span class="part">解答: </span>�范型又称为范例、风范或模式(Pattern)。从软件开发角度来看，范型与问题解决技术有关。范型定义了特定的问题和应用的开发过程中将要遵循的步骤，确定用于表示问题和它的解决的那些成分的类型，并利用这些成分表示与问题解决有关的抽象，直接得到问题的结构。因此，范型的选择影响整个软件开发生存期。就是说，它支配了设计方法、编码语言、测试和检验技术的选择。<br>
            ��目前流行有多种范型，它们提供了许多方法，可进行系统分解。流行的范型有：过程性的，逻辑的，面向存取的，面向进程的，面向对象的，函数型的，说明性的。每个范型都有它的支持者和用户，每个范型都特别适合于某种类型的问题或子问题。<span class="section"><br>
            <br>
            <br>
            <a name="07"></a></span><span class="part">问题7：【什么是软件生存期?它分为几个阶段?】</span><span class="section"><br>
            </span><span class="part">解答:</span><span class="section"> </span>�正如同任何事物一样，软件也有一个孕育、诞生、成长、成熟、衰亡的生存过程。我们称其为计算机软件的生存期。<br>
            ��根据这一思想，把上述基本的过程活动进一步展开，可以得到软件生存期的六个步骤。① 制定计划；② 需求分析；③ 软件设计；④ 程序编写；⑤ 
            软件测试；⑥ 运行／维护。<span class="section"><br>
            <br>
            <br>
            <a name="08"></a></span><span class="part">问题8：【在软件计划阶段需要解决什么问题？】</span><span class="section"><br>
            </span><span class="part">解答: </span>�确定要开发软件系统的总目标，给出它的功能、性能、可靠性以及接口等方面的要求；由系统分析员和用户合作，研究完成该项软件任务的可行性，探讨解决问题的可能方案，并对可利用的资源(计算机硬件，软件，人力等)、成本、可取得的效益、开发的进度做出估计，制定出完成开发任务的实施计划，连同可行性研究报告，提交管理部门审查。<span class="section"><br>
            <br>
            <a name="09"></a></span><span class="part">问题9：【在软件需求分析阶段要解决什么问题？】</span><span class="section"><br>
            </span><span class="part">解答:</span><span class="section"> </span>�对待开发软件提出的需求进行分析、建立需求定义模型和分析模型，从数据结构、功能结构和动态行为诸方面对系统进行详细定义。软件人员和用户共同讨论决定：哪些需求是可以满足的，并对其加以确切地描述。然后编写出软件需求说明书或系统功能说明书，及初步的系统用户手册，提交管理机构评审。<span class="section"><br>
            <br>
            <a name="10"></a></span><span class="part">问题10：【软件设计要解决什么问题？】</span><span class="section"><br>
            </span><span class="part">解答:</span><span class="section"> �</span>设计是软件工程的技术核心。在设计阶段中，设计人员把已确定了的各项需求转换成一个相应的体系结构。结构中的每一组成部分都是意义明确的模块，每个模块都和某些需求相对应，即所谓概要设计。进而对每个模块要完成的工作进行具体的描述，为源程序编写打下基础，即所谓详细设计。所有设计中的考虑都应以设计说明书的形式加以描述，以供后继工作使用并提交评审。<span class="section"><br>
            <br>
            <a name="11"></a></span><span class="part">问题11：【软件测试要解决什么问题？】</span><span class="section"><br>
            </span><span class="part">解答: </span>� 测试是保证软件质量的重要手段，其主要方式是在设计测试用例的基础上检验软件的各个组成部分。首先是进行单元测试，查找各模块在功能和结构上存在的问题并加以纠正；其次是进行组装测试，将已测试过的模块按一定顺序组装起来；最后按规定的各项需求，逐项进行有效性测试，决定已开发的软件是否合格，能否交付用户使用。<span class="section"><br>
            <br>
            <a name="12"></a></span><span class="part">问题12：【软件工程有一个原则，叫做抽象化，这是什么意思？】</span><span class="section"><br>
            </span><span class="part">解答:</span><span class="section"> </span>� 
            当对软件系统进行设计时，可以有不同的抽象层次。在最高的抽象层次上，可以使用问题所处环境的语言概括地描述问题的解法。而在较低的抽象层次上，则采用过程化的方法。在描述问题的解法时，可以配合使用面向问题的术语和面向现实的术语。但最后在最低的抽象层次上，则应使用能够直接实现的方式来描述这个解法。<br>
            ��<span class="part">(1) </span>过程的抽象：在软件工程中，从系统定义到实现，每进展一步都可以看做是对软件解决方法的抽象化过程的一次细化。在计划阶段，软件被当做整个计算机系统中的一个元素来看待。在需求分析阶段，用&quot;问题所处环境的为大家所熟悉的术语&quot;来描述软件的解决方法。而在从概要设计到详细设计的过程中，抽象化的层次逐次降低。当产生源程序时到达最低的抽象层次。<br>
            ��<span class="part">(2) </span>数据抽象：数据抽象与过程抽象一样，允许设计人员在不同层次上描述数据对象的细节，更重要的是，可以通过定义与该数据对象相关的操作来规定数据对象。<br>
            ��<span class="part">(3) </span>控制抽象：与过程抽象和数据抽象一样，控制抽象可以包含一个程序控制机制而无须规定其内部细节。<br>
            <span class="section"> <br>
            <br>
            <a name="13"></a></span><span class="part">问题13：【需求分析的原则有哪些？】</span><span class="section"><br>
            </span><span class="part">解答: </span><span class="section">�</span><span class="part">(1)</span> 
            需要能够表达和理解问题的信息域和功能域。其信息域应包括信息流、信息内容和信息结构。<br>
            ��<span class="part">(2)</span> 要能以层次化的方式对问题进行分解和不断细化。在需求分析阶段，软件的功能域和信息域都能做进一步的分解。<br>
            ��<span class="part">(3)</span> 要给出系统的逻辑视图和物理视图。逻辑视图给出软件要达到的功能和要处理信息间的关系，而不是实现的细节。软件需求的物理视图给出的是处理功能和信息结构的实际表现形式。<br>
            <span class="section"> <br>
            <br>
            <a name="14"></a></span><span class="part">问题14：【什么是软件质量？如何度量软件质量？】</span><span class="section"><br>
            </span><span class="part">解答:</span><span class="section"> �</span>ANSI/IEEE 
            Std 729-1983定义软件质量为&quot;与软件产品满足规定的和隐含的需求的能力有关的特征或特性的全体&quot;。M.J. 
            Fisher 定义软件质量为&quot;所有描述计算机软件优秀程度的特性的组合&quot;。也就是说，为满足软件的各项精确定义的功能、性能需求，符合文档化的开发标准，需要相应地给出或设计一些质量特性及其组合，作为在软件开发与维护中的重要考虑因素。如果这些质量特性及其组合都能在产品中得到满足，则这个软件产品质量就是高的。<br>
            ��1991年ISO发布的ISO/IEC9126质量特性国际标准定义了6个质量特性，即功能性、可靠性、可维护性、效率、可使用性、可移植性；并推荐了21个子特性，如适合性、准确性、互用性、依从性、安全性、成熟性、容错性、可恢复性、可理解性、易学习性、操作性、时间特性、资源特性、可分析性、可变更性、稳定性、可测试性、适应性、可安装性、一致性、可替换性，但不做为标准。<br>
            <span class="section"> <br>
            <a name="15"></a></span><span class="part">问题15：【什么是软件维护？为什么要做软件维护？】</span><span class="section"><br>
            </span><span class="part">解答: </span>�称在软件运行／维护阶段对软件产品所进行的修改就是所谓的维护。要求进行维护的原因多种多样，归结起来有三种类型：① 
            改正在特定的使用条件下暴露出来的一些潜在程序错误或设计缺陷；② 因在软件使用过程中数据环境发生变化（例如一个事务处理代码发生改变）或处理环境发生变化（例如安装了新的硬件或操作系统），需要修改软件以适应这种变化。③ 
            用户和数据处理人员在使用时常提出改进现有功能，增加新的功能，以及改善总体性能的要求，为满足这些要求，就需要修改软件把这些要求纳入到软件之中。<span class="section"><br>
            <br>
            <a name="16"></a></span><span class="part">问题16：【结构化开发方法和面向对象开发方法的区别何在？】</span><span class="section"><br>
            </span><span class="part">解答:</span><span class="section"> </span>� 
            结构化开发方法属于过程性范型，它产生过程的抽象，这些抽象的基础是把软件视为处理流，并定义成由一系列步骤构成的算法。每一步骤都是带有预定输入和特定输出的一个过程，把这些步骤串联在一起可产生合理的稳定的贯通于整个程序的控制流，最终产生一个简单的具有静态结构的体系结构。<br>
            ��在结构化方法中优先考虑的是过程抽象，而在面向对象方法中优先考虑的是实体，即问题论域的对象。它把标识和模型化问题论域中的主要实体做为系统开发的起点，主要考虑对象的行为而不是必须执行的一系列动作。在面向对象系统中的对象是数据抽象与过程抽象的综合。系统的状态保存在各个数据抽象的核心所定义的数据存储中。控制流包含在各个数据抽象中的操作内。不像在过程性范型里那样，把数据从一个过程传送到另一个过程，而是把控制流从一个数据抽象通过消息传送到另一个数据抽象。完成的系统体系结构更复杂但也更灵活。<br>
            <span class="section"> <br>
            <a name="17"></a></span><span class="part">问题17：【测试的目的是什么？程序测试与调试区别何在？】</span><span class="section"><br>
            </span><span class="part">解答:</span><span class="section">� </span>软件测试是为了发现错误而执行程序的过程。或者说，软件测试是根据软件开发各阶段的规格说明和程序的内部结构而精心设计一批测试用例（即输入数据及其预期的输出结果），并利用这些测试用例去运行程序，以发现程序错误的过程。<br>
            ��而软件调试则是在进行了成功的测试之后才开始的工作。它与软件测试不同，软件测试的目的是尽可能多地发现软件中的错误，但进一步诊断和改正程序中潜在的错误，则是调试的任务。<br>
            调试活动由两部分组成：<br>
            ��<span class="part">①</span> 确定程序中可疑错误的确切性质和位置。<br>
            ��<span class="part">②</span> 对程序（设计，编码）进行修改，排除这个错误。<span class="section"><br>
            <br>
            <br>
            <a name="18"></a></span><span class="part">问题18：【为什么要开展质量保证活动？它有那些方面？】</span><span class="section"><br>
            </span><span class="part">解答:</span><span class="section"> </span> 
            � 软件的质量保证就是向用户及社会提供满意的高质量的产品。进一步地，软件的质量保证活动也和一般的质量保证活动一样，是确保软件产品从诞生到消亡为止的所有阶段的质量的活动。即为了确定、达到和维护需要的软件质量而进行的所有有计划、有系统的管理活动。<br>
            ��软件质量保证的主要任务大致可归结为8点。<br>
            ��<span class="part">①</span> 必须熟练掌握正确定义用户要求的技术和熟练使用和指导他人使用定义软件需求的支持工具。<br>
            ��<span class="part">②</span> 力争不重复劳动，在开发过程中，随时考虑所生产软件的复用性。<br>
            ��<span class="part">③</span> 应在开发新软件的过程中大力使用和推行软件工程学中的开发方法和工具。<br>
            ��<span class="part">④</span> 组织外部力量协作的的体制。<br>
            ��<span class="part">⑤</span> 排除因需求规格说明有误、设计有误而造成的返工。<br>
            ��<span class="part">⑥</span> 发挥每个开发者的能力。<br>
            ��<span class="part">⑦</span> 提高软件开发的工程能力。<br>
            ��<span class="part">⑧</span> 提高工程项目管理能力，重视和强化项目开发初期计划阶段的项目计划评价，计划执行过程中及计划完成报告的评价。<span class="section"><br>
            <br>
            <a name="19"></a></span><span class="part">问题19：【为什么要讨论程序设计风格问题？】</span><span class="section"><br>
            </span><span class="part">解答:</span><span class="section"> </span>�有相当长的一段时间，许多人认为程序只是给机器执行的，而不是供人阅读的，所以只要程序逻辑正确，能被机器理解并依次执行就足够了。至于&quot;文体（即风格）&quot;如何是无关紧要的。但是，随着软件规模越来越大，复杂性增加，人们逐渐看到，在软件生存期中，人们经常要阅读程序。特别是在软件测试阶段和维护阶段，编写程序的人与参与测试、维护的人都要阅读程序。人们认识到，阅读程序是软件开发和维护过程中的一个重要组成部分，而且读程序的时间比写程序的时间还要多。<br>
            ��因此，程序实际上也是一种供人阅读的文章，既然如此，就有一个文章的风格问题。1970年代初，有人提出在编写时，应该使程序具有良好的风格。这个想法很快就为人们所接受。人们认识到，程序员在编写程序时，应当意识到今后会有人反复地阅读这个程序，并沿着你的思路去理解程序的功能。所以应当在编写程序时多花些工夫，讲求程序的风格，这将大量地减少人们读程序的时间，从整体上看，效率是高的。<br>
            ��程序设计风格包含4个方面的要求，即源程序文档化，数据说明的方法，语句结构和输入／输出方法。<br>
            <span class="section"> <br>
            <a name="20"></a></span><span class="part">问题20：【什么是软件工程过程？有哪些过程？】</span><span class="section"><br>
            </span><span class="part">解答:</span><span class="section"> </span> 
            �软件过程是软件生存期中的一系列相关软件工程活动的集合。每一个软件过程又是由一组工作任务、项目里程碑、软件工程产品和交付物以及质量保证点等组成。<br>
            ��软件过程的考虑主要针对软件生产和管理。为了得到满足要求的软件产品，不但需要有好的开发方法，还需要有好的工程支持和工程管理。就是说，软件过程不仅要有工程观点，还应有系统观点、管理观点、运行观点和用户观点。<br>
            ��ISO�MIEC 12207�D1995中将软件过程分为3类：基本过程、支持过程和组织过程。基本过程类有5种过程：获取过程、供应过程、开发过程、运行过程和维护过程。支持过程类有8种过程：文档编制过程、配置管理过程、质量保证过程、验证过程、确认过程、联合评审过程、审核过程和问题解决过程。组织过程类有4种过程：管理过程、基础设施过程、改进过程和培训过程。<br>
            <span class="section"> </span></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
