<html>
<head>
<title>无标题文档</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../css/text.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0" background="../../../images/tanchu/di.gif">
<table width="100%" border="0" cellspacing="0" cellpadding="0" height="100%">
  <tr>
    <td valign="top" align="center"> 
      <table width="92%" border="0" cellspacing="0" cellpadding="0">
        <tr> 
          <td class="text"> 
            <p><span class="section"><br>
              白盒测试 【White-box testing】</span><br>
              　　软件的白盒测试是对软件的过程性细节做细致的检查。这一方法是把测试对象看做一个透明的盒子，它允许测试人员利用程序内部的逻辑结构及有关信息，设计或选择测试用例，对程序所有逻辑路径进行测试。通过在不同点检查程序的状态，确定实际的状态是否与预期的状态一致。因此白盒测试又称为结构测试或逻辑驱动测试。</p>
            <p><span class="section">版本管理 【Version control】</span><br>
              　　版本管理是软件配置管理的基础，它管理并保护开发者的软件资源。它的主要功能有：(1) 集中管理档案，安全授权机制：档案集中地存放在服务器上，经系统管理员授权给各个用户。用户通过check 
              in和check out的方式访问服务器上的文件，未经授权的用户则无法访问服务器上的文件。(2) 软件版本升级管理：每次登入时，在服务器上都会生成新的版本，任何版本都可以随时检出编辑。(3) 
              加锁功能：在文件更新时保护文件，避免不同的用户更改同一文件时发生冲突。(4) 提供不同版本源程序的比较。</p>
            <p><span class="section">边界值测试 【Boundary value testing】</span><br>
              　　人们从长期的测试工作经验得知，大量的错误是发生在输入或输出范围的边界上，而不是在输入范围的内部。因此针对各种边界情况设计测试用例，可以查出更多的错误。使用边界值分析方法设计测试用例，首先应确定边界情况。通常输入等价类与输出等价类的边界，就是应着重测试的边界情况。应当选取正好等于，刚刚大于，或刚刚小于边界的值做为测试数据，而不是选取等价类中的典型值或任意值做为测试数据。</p>
            <p><span class="section">变更管理 【Change management】</span><br>
              　　软件生存周期内全部的软件配置是软件产品的真正代表，必须使其保持精确。软件工程过程中某一阶段的变更，均要引起软件配置的变更，这种变更必须严格加以控制和管理，保持修改信息，并把精确、清晰的信息传递到软件工程过程的下一步骤。软件变更管理包括建立控制点和建立报告与审查制度。<br>
            </p>
            </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
