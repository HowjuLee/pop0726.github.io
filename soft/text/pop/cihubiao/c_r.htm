<html>
<head>
<title>无标题文档</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../css/text.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0" background="../../../images/tanchu/di.gif">
<table width="100%" border="0" cellspacing="0" cellpadding="0" height="367">
  <tr>
    <td height="319" valign="top" align="center"> 
      <table width="92%" border="0" cellspacing="0" cellpadding="0" height="8">
        <tr> 
          <td class="text"> 
            <p><br>
              <span class="section">容量测试 【Volume testing】</span><br>
              　　容量测试是要检验系统的能力最高能达到什么程度。例如，对于编译程序，让它处理特别长的源程序；对于操作系统，让它作业队列&quot;满员&quot;；对于有多个终端的分时系统，让它所有的终端都开动；对于信息检索系统，让它使用频率达到最大。在使系统的全部资源达到&quot;满负荷&quot;的情形下，测试系统的承受能力。</p>
            <p><span class="section">软件 【Software】</span><br>
              　　软件是计算机系统中与硬件相互依存的另一部分，它是包括程序，数据及其相关文档的完整集合。其中，程序是按事先设计的功能和性能要求执行的指令序列；数据是使程序能正常操纵信息的数据结构；文档是与程序开发，维护和使用有关的图文材料。 
              <br>
              <span class="section"><br>
              软件测试 【Software testing】</span><br>
              　　软件测试是为了发现错误而执行程序的过程。或者说，软件测试是根据软件开发各阶段的规格说明和程序的内部结构而精心设计一批测试用例（即输入数据及其预期的输出结果），并利用这些测试用例去运行程序，以发现程序错误的过程。</p>
            <p><span class="section">软件范围 【Software scope】</span><br>
              　　软件范围包括功能、性能、约束、接口和可靠性。在项目估算开始之前，应对软件的功能进行评价，由于成本和进度的估算都与功能有关，因此常常采用某种程度的功能分解。性能的考虑包括处理和响应时间的需求。约束条件则标识外部硬件、可用存储或其它现有系统对软件的限制。此外，由于软件与其它系统元素是相互作用的，人们还要考虑每个接口的性质和复杂性，以确定对开发资源、成本和进度的影响。接口包括：(1) 
              运行软件的硬件及间接受软件控制的设备；(2) 必须与新软件链接的现有的软件；(3) 通过终端或其它输入/输出设备使用该软件的人；(4) 
              该软件运行前后的一系列操作过程。对于每一种情况，都必须清楚地了解通过接口的信息转换。最后，可以按照软件的一般性质规定一些具体的要求以保证它的可靠性。</p>
            <p><span class="section">软件风险 【Software risk】</span><br>
              　　在软件开发中存在各种不确定性，这些就构成了软件风险。它包括项目风险、技术风险和商业风险。项目风险识别潜在的预算、进度、个人（包括人员和组织）、资源、用户和需求方面的问题，以及它们对软件项目的影响。项目复杂性、规模和结构也构成风险因素。技术风险识别潜在的设计、实现、接口、检验和维护方面的问题。此外，规格说明的多义性、技术上的不确定性、技术陈旧、最新技术（不成熟）也是风险因素。商业风险有市场需求的风险、软件产品战略的风险、如何推销的风险、人员改变而失去上级管理部门支持的风险，以及失去预算或人员的承诺（预算风险）。</p>
            <p><span class="section">软件复用 【Software reuse】</span><br>
              　　对建立软件目标系统而言，所谓复用，就是利用某些早先开发的对建立新软件系统有用的软件元素来生产新系统。它是一项活动，而不是一个对象。这里所说的软件元素可以包括需求规格说明、设计过程、设计规格说明、程序代码、测试用例、度量等等。对于新的软件开发项目而言，它们或者是构成新软件系统的构件，或者是在软件开发过程中发挥某种作用。通常将这些软件元素称为可复用构件。<br>
              <span class="section"><br>
              软件工程 【Software Engineering】</span><br>
              　　1983年IEEE给出的定义为：&quot;软件工程是开发、运行、维护和修复软件的系统方法&quot;，其中，&quot;软件&quot;的定义为：计算机程序、方法、规则、相关的文档资料以及在计算机上运行时所必需的数据。</p>
            <p><span class="section">软件工具 【Software tools】</span><br>
              　　软件工具是指为了支援软件人员的开发和维护活动而使用的软件。例如项目估算工具、需求分析工具、设计工具、编程和调试工具、测试工具和维护工具等。使用了软件工具后可以大大提高软件的生产率和质量。</p>
            <p><span class="section">软件过程 【Software process】</span><br>
              　　软件过程是软件生存周期中的一系列相关软件工程活动的集合。每一个软件过程又是由一组工作任务、项目里程碑、软件工程产品和交付物以及质量保证(SQA)点等组成。</p>
            <p><span class="section">软件过程改进 【Software process improvement】</span><br>
              　　软件过程需要不断完善。首先从非工程化的软件开发方式转变为工程化的软件开发方式，按照软件工程的系统方法进行软件的工程活动和管理活动，进而不断完善各个软件过程，不断提高软件过程能力。过程改进的实施要从已有的软件过程开始，改进工作需经历一系列步骤，包括过程分析、确定改进方案、过程变更、培训、调整过程变更。过程改进的步骤需要反复进行。在完成调整后，又可能要返回去重新进行过程分析，再执行其后续步骤。</p>
            <p><span class="section">软件开发环境 【Software development environment】</span><br>
              　　软件开发环境是支持软件产品开发的软件系统，它由软件工具集和环境集成机制组成。前者用于支持软件开发的相关过程、活动和任务，后者为工具集成和软件开发、维护和管理提供统一的支持。目前，已推出多种软件开发环境。其中，有的支持某种软件生存周期模型和某种软件开发方法，有的支持通用的软件的开发，有的支持专用软件的开发，还有的支持全部开发阶段，可以通过裁剪，得到支持某个开发阶段的环境。 
              软件可靠性 Software reliability<br>
              软件可靠性是软件在给定的时间间隔及给定的环境条件下，按设计要求，成功地运行程序的概率。</p>
            <p><span class="section">软件能力成熟度模型 【Software capability maturity model】</span><br>
              　　不同的软件开发机构，在组织人员完成软件项目中所依据的管理策略有很大差别，软件项目所遵循的软件过程也有很大差别。因此，用软件机构的成熟度加以区别。为了做出客观、公正的比较，需要建立一种衡量的标尺。使用这个标尺可以评价软件承包机构的质量保证能力，也成为软件机构改进软件质量，加强质量管理，以及提高软件产品质量的依据。1987年美国卡内基-梅隆大学软件工程研究所SEI受国防部资助，提出了软件机构的能力成熟度模型CMM（Capability 
              Maturity Model），经过几年的使用及91年和93年两次修改，现已成为具有广泛影响的模型。它将软件机构的过程成熟度分为5级：初始级、可重复级、已定义级、已管理级和优化级。</p>
            <p><span class="section">软件配置管理 【Software configuration management】</span><br>
              　　软件配置管理，简称SCM，是一种&quot;保护伞&quot;活动，它应用于整个软件工程过程。因为变更在任何时刻都可能发生，因此SCM活动的目标就是为了 
              标识变更、控制变更、确保变更正确地实现、向其他有关的人报告变更。软件配置管理是一组追踪和控制活动，它们开始于软件开发项目开始之时，结束于软件被淘汰之时。</p>
            <p><span class="section">软件生存周期 【Software life cycle】</span><br>
              　　正如同任何事物一样，软件也有一个孕育、诞生、成长、成熟、衰亡的生存过程。我们称其为计算机软件的生存周期。软件生存周期是工程中产品生存周期的概念而得来的。引入软件生存周期概念对于软件生产的管理、进度控制有着非常重要的意义，使得软件生产有相应的模式、相应的流程、相应的工序和步骤。<br>
              <br>
              <span class="section">软件视图 【Software view】</span><br>
              　　软件视图是软件的一种表达形式，或是有关软件的一种报告。它可以作为软件的一种过渡性表示。其中的视图信息是指视图中出现的特定信息，或者是根据视图中信息分解而得到的知识构成的信息库。软件视图的实例包括有规格说明、数据流图(DFD)、源程序、度量值、根据静态源程序导出的报告、以及表明软件性能的测试数据等。</p>
            <p><span class="section">软件体系结构 【Software architecture】</span><br>
              　　软件设计的一个目标是建立软件的体系结构表示。将这个表示当作一个框架，从事更详细的设计活动。软件体系结构的三要素是程序构件（模块）的层次结构、<span class="section">构件之间交互的方式，以及数据的结构。</span></p>
            <p><span class="section">软件再工程 【Software reengineering】</span><br>
              　　软件再工程组合了逆向工程的分析和设计抽象的特点，具有对程序数据、体系结构和逻辑的重构能力。执行重构可生成一个设计，它产生与原来程序相同的功能，但具有比原来程序更高的质量。</p>
            <p><span class="section">软件质量 【Software quality】</span><br>
              　　ANSI/IEEE Std 729-1983定义软件质量为&quot;与软件产品满足规定的和隐含的需求的能力有关的特征或特性的全体&quot;。M.J. 
              Fisher 定义软件质量为&quot;所有描述计算机软件优秀程度的特性的组合&quot;。也就是说，为满足软件的各项精确定义的功能、性能需求，符合文档化的开发标准，需要相应地给出或设计一些质量特性及其组合，作为在软件开发与维护中的重要考虑因素。如果这些质量特性及其组合都能在产品中得到满足，则这个软件产品质量就是高的。<br>
              　　</p>
          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
