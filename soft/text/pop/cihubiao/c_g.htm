<html>
<head>
<title>无标题文档</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../css/text.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0" background="../../../images/tanchu/di.gif">
<table width="100%" border="0" cellspacing="0" cellpadding="0" height="367">
  <tr>
    <td height="319" valign="top" align="center"> 
      <table width="92%" border="0" cellspacing="0" cellpadding="0">
        <tr> 
          <td class="text"> 
            <p><span class="section"><br>
              改正性维护 【Corrective maintenance】</span><br>
              　　在软件交付使用后，由于开发时测试的不彻底、不完全，必然会有一部分隐藏的错误被带到运行阶段来。这些隐藏下来的错误在某些特定的使用环境下就会暴露出来。为了识别和纠正软件错误、改正软件性能上的缺陷、排除实施中的误使用，应当进行的诊断和改正错误的过程，就叫做改正性维护。</p>
            <p><span class="section">功能测试 【Function testing】</span><br>
              　　功能测试是在规定的一段时间内运行软件系统的所有功能，以验证这个软件系统有无严重错误。</p>
            <p><span class="section">功能模型 【Functional model】</span><br>
              　　在对象模型化技术(OMT)中，功能模型着重于系统内部数据的传送和处理。功能模型表明，通过计算，从输入数据能得到什么样的输出数据，不考虑参加计算的数据按什么时序执行。功能模型由多个数据流图组成，它们指明从外部输入，通过操作和内部存储，直到外部输出，这整个的数据流情况。功能模型还包括了对象模型内部数据间的限制。数据流图不指出控制或对象的结构信息，它们包含在动态模型和对象模型中。</p>
            <p><span class="section">构件 【Component】</span><br>
              　　所谓一个构件，可以是一个类型、类或其它的工作成品。对于构件应当按可复用的要求设计、实现、打包、编写文档。构件是内聚性很强的，并具有相当稳定的公开的接口。这里的构件是基于面向对象技术的。面向对象技术中的封装、多态等特性，可简化构件的开发工作。而面向对象技术中的继承机制则有两面性，一方面可以简化开发工作，另一方面使构件的维护变得很复杂。<br>
              　　</p>
            </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
