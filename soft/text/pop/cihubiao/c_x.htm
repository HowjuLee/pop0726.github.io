<html>
<head>
<title>无标题文档</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../css/text.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0" background="../../../images/tanchu/di.gif">
<table width="100%" border="0" cellspacing="0" cellpadding="0" height="100%">
  <tr>
    <td height="760" valign="top" align="center"> 
      <table width="92%" border="0" cellspacing="0" cellpadding="0" height="325">
        <tr> 
          <td class="text"><span class="section"><br>
            项目组 【Project team】</span><br>
            　　将参加软件项目的人员组织起来，组成软件项目组。组织采用什么形式，要针对软件项目的特点来决定，同时也与参与人员的素质有关。通常有三种组织结构的模式：(1) 
            按课题划分的模式(Project Format)；(2) 按职能划分的模式(Functional Format)；(3) 矩阵形模式(Matrix 
            Format)。 
            <p><span class="section">消息 【Message】</span><br>
              　　消息是一个对象与另一个对象的通信单元，是要求某个对象执行类中定义的某个操作的规格说明。发送给一个对象的消息定义了一个操作名和一个参数表(可能是空的)，并指定某一个对象。由一个对象接收的消息则调用消息中指定的操作，并将传递过来的实际参数与参数表中相应的形式参数结合起来。接收对象对消息的处理可能会改变对象中的状态，即改变接收对象的属性，并发送一个消息给自己或另一个对象。可以认为，这种消息的传递大致等价于传统的函数调用。<br>
              <span class="section"><br>
              信息隐蔽 【Information hiding】</span><br>
              　　由parnas提倡的信息隐蔽是指，每个模块的实现细节对于其它模块来说是隐蔽的。就是说，模块中所包含的信息（包括数据和过程）不允许其它不需要这些信息的模块使用。由于一个软件系统在整个软件生存期内要经过多次修改，所以在划分模块时要采取措施，使得大多数过程和数据对软件的其它部分是隐蔽的。这样，在将来修改软件时偶然引入错误所造成的影响就可以局限在一个或几个模块内部，不致波及到软件的其它部分。</p>
            <p><span class="section">信息域 【Information domain】</span><br>
              　　对于计算机程序处理的数据，其信息域应包括信息流、信息内容和信息结构。信息流是指数据通过一个系统时的变化方式。信息内容是指构成某些更大的信息项的单个数据项。信息结构是指各种数据项的逻辑组织。</p>
            <p><span class="section">行为模型 【Behavioral model】</span><br>
              　　在对象模型化技术(OMT)中，要想对一个系统了解得比较清楚，首先应考察它的静态结构，即在某一时刻它的对象和这些对象之间相互关系的结构；然后应考察在任何时刻对对象及其关系的改变。系统的这些涉及时序和改变的状况，用行为模型(或称动态模型)来描述。行为模型着重于系统的控制逻辑。它包括两个图，一是状态图，一是事件追踪图。</p>
            <p><span class="section">性能测试 【Performance testing】</span><br>
              　　性能测试是要检查系统是否满足在需求说明书中规定的性能。特别是对于实时系统或嵌入式系统，软件只满足要求的功能而达不到要求的性能是不行的。性能测试可以出现在测试过程的各个阶段，甚至在单元层次上。这时，不但需要对单个程序的逻辑进行白盒测试（结构测试），还可以对程序的性能进行评估。然而，只有当所有系统的元素全部组装完毕，系统性能才能完全确定。 
              <br>
              <span class="section"><br>
              系统测试 【System testing】</span><br>
              　　所谓系统测试，是将通过确认测试的软件，作为整个基于计算机系统的一个元素，与计算机硬件、外设、某些支持软件、数据和人员等其它系统元素结合在一起，在实际运行（使用）环境下，对计算机系统进行一系列的组装测试和确认测试。系统测试的目的在于通过与系统的需求定义作比较，发现软件与系统定义不符合或与之矛盾的地方。系统测试的测试用例应根据需求分析说明书来设计，并在实际使用环境下来运行。</p>
            <p><span class="section">需求分析 【Requirement analysis】</span><br>
              　　软件需求分析是软件生存期中重要的一步，也是决定性的一步。只有通过软件需求分析才能把软件功能和性能的总体概念描述为具体的软件需求规格说明，从而奠定软件开发的基础。软件需求分析也是一个不断认识和逐步细化的过程。该过程将软件计划阶段所确定的软件范围逐步细化到可详细定义的程度，并分析出各种不同的软件元素，然后为这些元素找到可行的解决方法。 
              <br>
              　　</p>
          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
