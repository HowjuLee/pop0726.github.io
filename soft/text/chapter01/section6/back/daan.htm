
<link rel="stylesheet" href="../../../../css/text.css" type="text/css">
<body background="../../../../images/tanchu/di.gif" leftmargin="0" marginwidth="0" marginheight="0">
<P class="section">三、选择填空题</P>
<P class="text">1、解答：A. ②,&nbsp;&nbsp; B. ⑦,&nbsp;&nbsp; C. ⑤</P>
<P class="text">2、解答：A. ①,&nbsp;&nbsp; B. ①,&nbsp;&nbsp; C. ③,&nbsp;&nbsp; D. 
  ⑥</P>
<P class="text">3、解答：A. ①,&nbsp; B. ④,&nbsp; C. ⑤,&nbsp; D. ⑧,&nbsp; E. ⑤,&nbsp; 
  F. ④,&nbsp; G. ①。<BR>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 注意，C与D的答案顺序可互换。</P>
<P class="text">4、解答：A. ⑦,&nbsp; B. ⑧,&nbsp; C. ⑥,&nbsp; D. ③,&nbsp; E. ②,&nbsp; 
  F. ⑤,&nbsp; G. ④。<BR>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 注意，A、B、C、D的答案顺序可互换。E、F、G的答案顺序可互换。</P>
<P class="section">四、问答题</P>
<P class="text"><span class="part">1．解答：</span>软件是计算机系统中与硬件相互依存的另一部分，它是包括程序，数据及其相关文档的完整集合。其中，程序是按事先设计的功能和性能要求执行的指令序列；数据是使程序能正常操纵信息的数据结构；文档是与程序开发，维护和使用有关的图文材料。<BR>
  软件的特点是：<BR>
  (1) 软件是一种逻辑实体，而不是具体的物理实体。它具有抽象性。<BR>
  (2) 软件的生产与硬件不同，它没有明显的制造过程。<BR>
  (3) 在软件的运行和使用期间，没有硬件那样的机械磨损，老化问题。然而它存在退化问题。<BR>
  (4) 软件的开发和运行常常受到计算机系统的限制，对计算机系统有着不同程度的依赖性。<BR>
  (5) 软件的开发至今尚未完全摆脱手工艺的开发方式。<BR>
  (6) 软件本身是复杂的。软件的复杂性可能来自它所反映的实际问题的复杂性，也可能来自程序逻辑结构的复杂性。<BR>
  (7) 软件成本相当昂贵。</P>
<P class="text"><span class="part">2．解答：</span><BR>
  �<IMG alt="" hspace=0 src="images/biao1.gif" align=baseline border=0 width="391" height="313"></P>
<P class="text"><span class="part">3．解答：</span>软件工程包括三个要素：方法、工具和过程。<BR>
  &nbsp; 软件工程方法为软件开发提供了“如何做”的技术。它包括了多方面的任务，如项目计划与估算、软件系统需求分析、数据结构、系统总体结构的设计、算法过程的设计、编码、测试以及维护等。<BR>
  软件工具为软件工程方法提供了自动的或半自动的软件支撑环境。<BR>
  软件工程的过程则将软件工程的方法和工具综合起来以达到合理、及时地进行计算机软件开发的目的。过程定义了方法使用的顺序、要求交付的文档资料、为保证质量和协调变化所需要的管理、及软件开发各个阶段完成的里程碑。</P>
<P class="text"><span class="part">4． 解答：</span>软件工程过程的基本过程活动有4步：<BR>
  &nbsp; 　・ P (Plan) : 软件规格说明。规定软件的功能及其运行的限制；<BR>
  &nbsp; 　・ D (Do) : 软件开发。产生满足规格说明的软件；<BR>
  &nbsp; 　・ C (Check) : 软件确认。确认软件能够完成客户提出的要求；<BR>
  &nbsp; 　・ A (Action) : 软件演进。为满足客户的变更要求，软件必须在使用的过程中演进。</P>
<P class="text"><span class="part">5．解答：</span>软件与任何一个事物一样，有它的孕育、诞生、成长、成熟、衰亡的生存过程。这就是软件的生存期。它分为6个阶段：<BR>
  &nbsp; 　　(1) 软件项目计划 ：在这一步要确定软件工作范围，进行软件风险分析，预计软件开发所需要的资源，建立成本与进度的估算。根据有关成本与进度的限制分析项目的可行性。<BR>
  &nbsp; 　　(2) 软件需求分析和定义 ：在这一步详细定义分配给软件的系统元素。可以用以下两种方式中的一种对需求进行分析和定义。一种是正式的信息域分析，可用于建立信息流和信息结构的模型，然后逐渐扩充这些模型成为软件的规格说明。另一种是软件原型化方法，即建立软件原型，并由用户进行评价，从而确定软件需求。<BR>
  &nbsp; 　　(3) 软件设计 ：软件的设计过程分两步走。第一步进行概要设计，以结构设计和数据设计开始，建立程序的模块结构，定义接口并建立数据结构。第二步做详细设计，考虑设计每一个模块部件的过程描述。经过评审后，把每一个加细的过程性描述加到设计规格说明中去。<BR>
  &nbsp; 　　(4) 程序编码 ：在设计完成之后，用一种适当的程序设计语言或CASE工具生成源程序。应当就风格及清晰性对代码进行评审，而且反过来应能直接追溯到详细设计描述。<BR>
  &nbsp; 　　(5) 软件测试 ：单元测试检查每一单独的模块部件的功能和性能。组装测试提供了构造软件模块结构的手段，同时测试其功能和接口。确认测试检查所有的需求是否都得到满足。在每一个测试步骤之后，要进行调试，以诊断和纠正软件的故障。<BR>
  &nbsp; 　　(6) 软件维护 ：为改正错误，适应环境变化及功能增强而进行的一系列修改活动。与软件维护相关联的那些任务依赖于所要实施的维护的类型。</P>
<P class="text"><span class="part">6．解答：</span>瀑布模型规定了各项软件工程活动，包括：制定软件项目计划，进行需求分析和定义，软件设计，程序编码，测试及运行维护。并且规定了它们自上而下，相互衔接的固定次序，如同瀑布流水，逐级下落。<BR>
  瀑布模型为软件开发和软件维护提供了一种有效的管理图式。根据这一图式制定开发计划、进行成本预算、组织开发力量，以项目的阶段评审和文档控制为手段有效地对整个开发过程进行指导，从而保证了软件产品及时交付，并达到预期的质量要求。<BR>
  瀑布模型的缺点是缺乏灵活性，特别无法解决软件需求本身不明确或不准确的问题。这些问题的存在对软件开发会带来严重影响，最终可能导致开发出的软件并不是用户真正需要的软件，并且这一点在开发过程完成后才有所察觉。面对这些情况，无疑需要进行返工或是不得不在维护中纠正需求的偏差。但无论上述哪一种情况都必须付出高额的代价，并将为软件开发带来不必要的损失。</P>
<P class="text"><span class="part">7．解答：</span>由于在项目开发的初始阶段人们对软件的需求认识常常不够清晰，因而使得开发项目难于做到一次开发成功，出现返工再开发在所难免。因此，可以先做试验开发，其目标只是在于探索可行性，弄清软件需求；然后在此基础上获得较为满意的软件产品。通常把第一次得到的试验性产品称为“原型”。 
  <BR>
  　　演化模型从需求分析开始。软件开发人员与用户一起定义待开发软件系统的总目标，定义需求，确定软件的工作范围。然后快速设计软件中对使用者可见部分的表示，进而建造原型，再让用户或客户评估原型，根据评估结果，修改和细化待开发软件系统的需求，使之满足用户的需求。这个过程是一个迭代的过程。<BR>
  演化模型的优点是：<BR>
  &nbsp; 　・ 演化模型能够得到更好的软件需求，它不仅能够处理模糊的需求，而且开发人员与用户可通过原型充分进行交流；<BR>
  &nbsp; 　・ 演化模型给用户提供了机会，以更改用户原来设想的不尽合理的最终系统；<BR>
  &nbsp; 　・ 演化模型使得开发出来的最终系统更容易维护，对用户更友好；<BR>
  &nbsp; 　・ 演化模型可以降低总的开发费用，缩短开发时间。<BR>
  演化模型的缺点是：<BR>
  &nbsp; 　・ 对于开发人员不熟悉的领域，演化模型可能误导开发者把系统的次要部分当作主要框架，作出不切题的原型；<BR>
  &nbsp; 　・ 原型过快地收敛于需求集合，使得某些基本方面被忽视；<BR>
  &nbsp; 　・ 长期在原型环境下开发，只注意得到令人满意的原型，容易“遗忘”用户环境与实际客户环境之间的差别。</P>
<P class="text"><span class="part">8．解答：</span>对于复杂的大型软件，开发一个原型往往达不到要求。螺旋模型将瀑布模型与演化模型结合起来，并且加入两种模型均忽略了的风险分析，弥补了两者的不足。<BR>
  &nbsp; 　　螺旋模型是一种风险驱动的模型。在软件开发中存在各种风险。项目越复杂，设计方案、资源、成本、进度等因素的不确定性越大，项目开发的风险也就越大。及时对风险进行识别、分析，采取对策，可消除或减少风险的损害。<BR>
  &nbsp; 　　螺旋模型将开发过程分为几个螺旋周期，每个螺旋周期大致和瀑布模型相吻合。在每个螺旋周期内按四个象限，分为四个工作步。第一，制定计划：确定软件目标，选定实施方案，明确项目开发的限制条件；第二，风险分析：分析所选方案，识别风险，通过原型消除风险；第三，开发实施：实施软件开发；第四，客户评估：评价开发工作，提出修正建议，建立下一个周期的计划。<BR>
  &nbsp; 　　螺旋模型适合于大型软件的开发，应该说它是最为实际的方法，它吸收了软件工程“演化”的概念，使得开发人员和客户对每个演化层出现的风险有所了解，继而做出应有的反映。<BR>
  &nbsp; 　　螺旋模型的优越性比起其它模型来说是明显的，但并不是绝对的。模型的使用需要具有相当丰富的风险评估经验和专门知识。如果项目风险较大，又未能及时发现，势必造成重大损失。此外，螺旋模型是出现较晚的新模型，远不如瀑布模型普及，要让广大软件人员和用户充分肯定它，还有待于更多的实践。</P>
<P class="text"><span class="part">9．解答：</span>组织实施软件工程项目，从技术上和管理上采取了多项措施以后，最终希望达到以下几个主要的目标：付出较低的开发成本；达到要求的软件功能；取得较好的软件性能；开发的软件易于移植；需要较低的维护费用；能按时完成开发工作，及时交付使用。<BR>
  &nbsp;在具体项目的实际开发中，企图让以上几个目标都达到理想的程度往往是非常困难的。</P>
<P class="text"><span class="part">10． 解答：</span>在软件开发过程中必须遵循下列软件工程原则。<BR>
  &nbsp; 　・ 抽象 : 采用分层次抽象，自顶向下、逐层细化的办法进行功能分解和过程分解，可以由抽象到具体、由复杂到简单，逐步得到问题的解。<BR>
  &nbsp; 　・ 信息隐蔽 : 遵循信息封装，使用与实现分离的原则，将模块设计成“黑箱”，可以将实现的细节隐藏在模块内部，使用者只能通过模块接口访问模块中封装的数据。<BR>
  &nbsp; 　・ 模块化 : 按模块划分系统的体系结构，使得各模块间有良好的接口。这样有助于信息隐蔽和抽象，有助于表示复杂的系统。<BR>
  &nbsp; 　・ 局部化 : 按抽象数据类型思想及问题域中的概念来建立模块，确保模块之间低耦合，模块内部高内聚。这有助于控制解的复杂性。<BR>
  &nbsp; 　・ 确定性 : 软件开发过程中所有概念的表达应是确定的、无歧义性的、规范的。这有助于人们之间的沟通，保证整个开发工作协调一致。<BR>
  &nbsp; 　・ 一致性 : 强调软件开发过程的标准化、统一化。包括文档格式的一致，工作流程的一致，内、外部接口的一致，系统规格说明与系统行为的一致等。<BR>
  &nbsp; 　・ 完备性 : 软件系统不丢失任何重要成分，可以完全实现系统所要求功能。<BR>
  &nbsp; 　・ 可验证性 : 开发大型的软件系统需要对系统自顶向下、逐层分解。系统分解应遵循系统易于检查、测试、评审的原则，以确保系统的正确性。</P>
<P class="text"><span class="part">11． 解答：</span>软件工程的基本原理是：<BR>
  &nbsp; 　・ 按软件生存期分阶段制定计划并认真实施。在软件生存期中需要完成许多不同性质的工作，所以应把软件生存期划分为若干阶段，并相应制定出可行的计划，且按照计划对软件的开发和维护活动进行管理。不同层次的管理人员都必须严格按照计划各尽其职地管理软件的开发和维护工作。<BR>
  &nbsp; 　・ 坚持进行阶段评审。软件的质量保证工作不能等到编码阶段结束之后再进行。错误发现得越晚，为改正它所需付出的代价就越大。因此，在每个阶段都要进行严格的评审，以尽早发现在软件开发过程中产生的错误。<BR>
  &nbsp; 　・ 坚持严格的产品控制。在软件开发过程中不应随意改变需求，因为改变一项需求往往需要付出较高的代价。但由于外界环境的变化或软件工作范围的变化，在软件开发过程中改变需求又是难免的，不能硬性规定禁止客户改变需求，只能依靠科学的产品变更控制技术来顺应需求的变更。其中主要是实施基线配置管理。<BR>
  &nbsp; 　・ 使用现代程序设计技术。实践表明，采用先进的技术可提高软件开发的生产率，还可提高软件的可维护性。其中包括结构化程序设计技术，Jackson程序设计技术，面向对象程序设计技术等。<BR>
  &nbsp; 　・ 明确责任。软件产品是看不见摸不着的逻辑产品。为了提高软件开发过程的可见性，有效地进行管理，应当根据软件开发项目的总目标及完成期限，规定开发组织的责任和产品标准，使得工作结果能够得到清楚的审查。<BR>
  &nbsp; 　・ 用人少而精。合理安排软件开发小组人员的原则是参与人员应当少而精，即小组的成员应当具有较高的素质，且人数不应过多。人员素质高能大大提高软件开发的生产率，明显减少软件中的错误。软件开发小组人员少而精可以减少因交流开发进展情况和讨论遇到的问题而造成的通信开销。<BR>
  &nbsp; 　・ 不断改进开发过程。必须不断地灵活地改进软件工程过程，积极主动地采用新的软件技术，注意不断总结经验。此外，需要注意收集和积累出错类型、问题报告等数据，用以评估软件技术的效果和软件人员的能力，确定必须着重开发的软件工具和应当优先研究的技术。</P>
<P><span class="part">12．解答：</span><span class="text">软件开发时，一个错误发现得越晚，为改正它所付出的代价就越大。这个说法是对的。在1970年代，GTE、TRW和IBM等三家公司对此问题做了独立研究，最后它们得到相似的结论：<br>
  �<IMG alt="" hspace=0 src="images/biao2.gif" align=baseline border=0 width="383" height="76"><BR>
  　　从表中可以看出，在需求分析阶段检查和修复一个错误所需的代价只有编码阶段所需代价的1/5到1/10，而在维护阶段做同样的工作所付出的代价却是编码阶段的20倍。<BR>
  </span> </P>
