 
<link rel="stylesheet" href="../../../../../css/text.css" type="text/css">
 
<script language="JavaScript">
<!--
function MM_openBrWindow(theURL,winName,features) { //v2.0
  window.open(theURL,winName,features);
}
//-->
</script>
<body bgcolor="#FFFFFF" background="../../../../../images/tanchu/di.gif" leftmargin="0" marginwidth="0">
<P class="section">三、选择填空题</P>
<P>&nbsp;<span class="part">1、解答：</span><span class="text">A. ④&nbsp;&nbsp;&nbsp; 
  B. ③&nbsp;&nbsp;&nbsp; C. ⑥&nbsp;&nbsp;&nbsp; D. ⑧&nbsp;&nbsp;&nbsp; E. ②&nbsp;&nbsp;&nbsp; 
  F. ⑤</span></P>
<P class="text">&nbsp;<span class="part">2、解答：</span>A. ②&nbsp;&nbsp; B. ⑥&nbsp;&nbsp; 
  C. ③&nbsp;&nbsp; D. ②&nbsp;&nbsp; E. ④&nbsp;&nbsp; F. ①&nbsp;&nbsp; G. ⑥&nbsp;&nbsp; 
  H. ⑤<BR>
  &nbsp; �由于软件工程有如下的特点：软件产品不可见；不存在标准的软件过程；大型软件项目往往是“一次性”的项目，使得软件得管理比其它工程的管理更为困难；通常，软件人员和用户确定了软件项目的目标和范围之后，度量的作用就是为了有效地定量地进行管理。对开发过程进行度量的目的是为了改进开发过程，而对产品进行度量的目的是为了提高产品的质量。在软件项目管理过程中一个关键的活动是制定计划。在做计划时，必须就需要的人力、项目持续时间、成本作出估算；风险分析对于软件项目管理是决定性的，它实际上就是贯穿于软件工程过程中一系列风险管理步骤，其中包括风险识别、风险估计、风险评价和风险驾驭等步骤。每一个软件项目都要制定一个进度安排，但不是所有的进度都要一样地安排。一旦制定了开发计划，就可以开始着手追踪和控制活动。 
</P>
<P class="text">&nbsp;<span class="part">3、解答：</span>A. ①&nbsp;&nbsp; B. ④&nbsp;&nbsp; 
  C. ④&nbsp;&nbsp; D. ①&nbsp;&nbsp; E. ②&nbsp;&nbsp; F. ⑤&nbsp;&nbsp; G. ⑦&nbsp;&nbsp; 
  H. ③</P>
<P class="text">&nbsp;<span class="part">4、解答：</span>A. ③&nbsp;&nbsp; B. ②&nbsp;&nbsp; 
  C. ⑦&nbsp;&nbsp; D. ①&nbsp;&nbsp; E. ③&nbsp;&nbsp; F. ②<BR>
  &nbsp;�估算资源、成本和进度时需要经验、有用的历史信息、足够的定量数据和作定量度量的勇气。通常估算本身带有风险。<BR>
  &nbsp;项目的复杂性对于增加软件估算的不确定性影响很大。复杂性越高，估算的风险就越高。但是，复杂性是相对度量，它与项目参加人员的经验有关。<BR>
  &nbsp;�项目的规模对于软件估算的精确性和功效影响也比较大。因为随着软件规模的扩大，软件元素之间的相互依赖、相互影响程度迅速增加，问题分解会变得更加困难。由此可知，项目的规模越大，开发工作量越大，估算的风险越高。<BR>
  &nbsp;�项目的结构化程度也影响项目估算的风险。结构化程度的提高，进行精确估算的能力就能提高，而风险将减少。<BR>
  &nbsp;�历史信息的有效性也影响估算的风险。回顾过去，就能够仿效做过的事，且改进出现问题的地方。在对过去的项目进行综合的软件度量之后，就可以借用来比较准确地进行估算，安排进度以避免重走过去的弯路，而总的风险也减少了。<BR>
  &nbsp;�风险靠对不确定性程度定量地进行估算来度量，此外，如果对软件项目的作用范围还不十分清楚，或者用户的要求经常变更，都会导致对软件项目所需资源、成本、进度的估算频频变动，增加估算的风险。</P>
<P class="text">&nbsp;<span class="part">5、解答：</span>A. ③,&nbsp; B. ⑦,&nbsp; C. 
  ⑤,&nbsp; D. ①,&nbsp; E. ②,&nbsp; F. ①,&nbsp; G. ②,&nbsp; H. ③。<BR>
  &nbsp;�在软件项目估算时，将代码行LOC和功能点FP数据在两个方面使用：一是作为一个估算变量，度量软件每一个分量的大小；一是联合使用从过去的项目中收集到的基线数据(即对以往项目所做的估算值，保留下来作为后续项目的估算参考)和其它估算变量，进行成本和工作量估算。<BR>
  &nbsp;�LOC和FP是两种不同的估算技术，但两者有许多共同的特征，项目计划人员首先给出一个有界的软件范围的叙述，再由此叙述尝试着把软件分解成一些小的可分别独立进行估算的子功能。然后对每一个子功能估算其LOC或FP(即估算变量)。接着，把基线生产率度量(如，LOC／PM或FP／PM)用做特定的估算变量，导出子功能的成本或工作量。将子功能的估算进行综合后就能得到整个项目的总估算。<BR>
  &nbsp;�LOC或FP估算技术对于分解所需要的详细程度是不同的。当用LOC做为估算变量时，功能分解是绝对必要的且需要达到很详细的程度。而估算功能点所需要的数据是宏观的量，当把FP当做估算变量时所需要的分解程度不很详细。我们还应注意，LOC是直接估算的,而FP是通过估计输入、输出、数据文件、查询和外部接口的数目，以及14种复杂性校正值间接地确定的。避开所用到的估算变量，项目计划人员可对每一个分解的功能提出一个有代表性的估算值范围。利用历史数据或凭实际经验(当其它的方法失效时)，项目计划人员对每个功能分别按最佳的、可能的、悲观的三种情况给出LOC或FP估计值。记作a、m、b。当这些值的范围被确定之后，也就隐含地指明了估计值的不确定程度。<BR>
  &nbsp;接着计算LOC或FP的期望值E。<BR>
  &nbsp;&nbsp;&nbsp;�E = (a + 4m + b) / 6. &nbsp;&nbsp;(加权平均)&nbsp;&nbsp;<BR>
  其中，可能的估计值m是加权最重的最可能的估算值且遵循β概率分布。</P>
<P class="text">&nbsp;<span class="part">6、解答：</span>A. ②&nbsp;&nbsp; B. ③&nbsp;&nbsp; 
  C. ②&nbsp;&nbsp; D. ④&nbsp;&nbsp; E. ⑥&nbsp;&nbsp; F. ⑤<BR>
  &nbsp;&nbsp;�其中，C、D的答案顺序可互换。<BR>
  &nbsp;�软件项目计划的第二个任务是对完成该软件项目所需的资源进行估算。若把软件开发所需的资源画成一个金字塔，在塔的底部必须有现成的用以支持软件开发的工具──硬件工具及软件工具，在塔的高层是最基本的资源──人。<BR>
  &nbsp;在考虑各种软件开发资源时，人是最重要的资源。在安排开发活动时必须考虑人员的技术水平、专业、人数、以及在开发过程各阶段中对各种人员的需要。<BR>
  &nbsp;�硬件是作为软件开发项目的一种工具而投入的。在软件项目计划期间，考虑三种硬件资源：宿主机（软件开发时使用的计算机及外围设备）；目标机（运行已开发成功软件的计算机及外围设备）；其它硬件设备（专用软件开发时需要的特殊硬件资源）。宿主机连同必要的软件工具构成一个软件开发系统。通常这样的开发系统能够支持多种用户的需要，且能保持大量的由软件开发小组成员共享的信息。<BR>
  &nbsp;�软件在开发期间使用了许多软件工具来帮助软件的开发。这些软件工具叫做计算机辅助软件工程(CASE)。主要的软件工具分类为：业务系统计划工具集；项目管理工具集；支持工具；分析和设计工具；编程工具；组装和测试工具；原型化和模拟工具；维护工具；框架工具。这些框架工具能够提供一个建立集成项目支撑环境(IPSE)的框架。在多数情况，框架工具实际提供了数据库管理和配置管理的能力与一些实用工具，能够把各种工具集成到IPSE中。<BR>
  &nbsp;�为了促成软件的复用，以提高软件的生产率和软件产品的质量，可建立可复用的软件构件库。根据需要，对软件构件稍做加工，就可以构成一些大的软件包。</P>
<P>&nbsp;<span class="part">7、解答：</span><span class="text">A. ④&nbsp;&nbsp; B. 
  ②&nbsp;&nbsp; C. ④&nbsp;&nbsp; D. ①&nbsp;&nbsp; E. ①&nbsp;&nbsp; F. ②&nbsp;&nbsp; 
  G. ④<BR>
  &nbsp;�定义一个人参加劳动时间的长短为劳动量，其度量单位为PM(人月)，PY(人年)。它不同于工作量。而定义完成一个软件项目(或软件任务)所需的劳动量为工作量，其度量单位是人月／项目(任务)，记作PM(人月)。进一步地，定义单位劳动量所能完成的软件产品的数量为软件生产率，其度量单位为LOC／PM。它表明一般指开发全过程的一个平均值。题例所示的软件共有源代码2900行，其中， 
  500行用于测试，2400行是执行程序的源代码。则劳动生产率是(2900－500)／10 ＝ 240（LOC／PM）。</span></P>
<P class="text">&nbsp;<span class="part">8、解答：</span>A. ③,&nbsp; B. ①,&nbsp; C. 
  ②,&nbsp; D. ③,&nbsp; E. ①,&nbsp; F. ④。<BR>
  &nbsp;�对于一个大型的软件项目，由于项目的复杂性，开发成本的估算不是一件简单的事，要进行一系列的估算处理。主要靠分解和类推的手段进行。基本估算方法分为三类。<BR>
  &nbsp;�① 自顶向下的估算方法：这种方法从项目的整体出发，进行类推。即估算人员根据以前已完成项目所消耗的总成本(或总工作量)，来推算将要开发的软件的总成本(或总工作量)，然后按比例将它分配到各开发任务单元中去。<BR>
  &nbsp;�② 自底向上的估计法：这种方法把待开发的软件细分，直到每一个子任务都已经明确所需要的开发工作量，然后把它们加起来，得到软件开发的总工作量。这是一种常见的估算方法。<BR>
  &nbsp;�③ 差别估计法：这种方法综合了上述两种方法的优点，其主要思想是把待开发的软件项目与过去已完成的软件项目进行类比，从其开发的各个子任务中区分出类似的部分和不同的部分。类似的部分按实际量进行计算，不同的部分则采用相应的方法进行估算。<BR>
  &nbsp;专家判定技术是由多位专家进行成本估算。由于单独一位专家可能会有种种偏见，最好由多位专家进行估算，取得多个估算值。</P>
<P><span class="text">&nbsp;</span><span class="part">9、解答：</span><span class="text">A. 
  ④&nbsp;&nbsp; B. ④&nbsp;&nbsp; C. ①&nbsp;&nbsp; D. ②&nbsp;&nbsp; E. ⑤&nbsp;&nbsp; 
  F. ④&nbsp;&nbsp; G. ③&nbsp;&nbsp; H. ① <BR>
  &nbsp;�Putnam模型是1978年Putnam提出的模型，是一种动态多变量模型。它假定在软件开发的整个生存期中工作量有特定的分布。这种模型是依据在一些大型项目(总工作量达到或超过30个人年)中收集到的工作量分布情况而推导出来的，但也可以应用在一些较小的软件项目中。大型软件项目的开发工作量分布可以用下图所示的Rayleigh-Norden曲线表示。</span><BR>
  <BR>
  <a href="#"><IMG alt="" hspace=0 src="image/06b.gif" align=baseline border=0 width="300" height="199" onClick="MM_openBrWindow('6b.htm','','width=446,height=296')"></a><BR>
  &nbsp;<BR>
  <span class="text">该曲线的典型形状由Lord Rayleigh最早有分析地导出，并由Norden使用收集到的软件开发中的经验数据证实了这条曲线。</span></P>
<P class="text">&nbsp;<span class="part">10、解答：</span>A. ③,&nbsp; B. ②,&nbsp; 
  C. ①,&nbsp; D. ④。<BR>
  &nbsp;�考虑如题中表2的15种影响软件工作量的因素，通过定下乘法因子，修正COCOMO工作量公式和进度公式，可更合理地估算软件(各阶段)的工作量和进度。此时，实际工作量计算公式改成：<BR>
  <IMG alt="" hspace=0 src="image/09.gif" align=baseline border=0 width="170" height="46"><BR>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
  <BR>
  由此得到程序名义工作量 MM = 2.8 *(10)1.20 ＝ 44.38 （MM）<br>
  <BR>
  程序实际工作量<br>
  <IMG alt="" hspace=0 src="image/10.gif" align=baseline border=0 width="310" height="46"><BR>
  &nbsp; <BR>
  &nbsp;开发所用时间 TDEV ＝ 2.5 *（51.5）0.32 ＝ 8.9 （月）<BR>
  &nbsp;如果分析员与程序员的工资都按每月6,000美元计算，则该项目的开发人员的工资总额为51.5 * 6000 ＝ 309000 （美元）</P>
<P class="text">&nbsp;<span class="part">11、解答：</span>A. ④,&nbsp; B. ②,&nbsp; 
  C. ③。<BR>
  &nbsp;�效益包括经济效益，也包括社会效益。前者是有形的，后者是无形的。系统的经济效益等于因使用新系统而增加的收入加上使用新系统可以节省的运行费用。运行费用包括操作员人数、工作时间、消耗的物资等。在计算系统的经济效益时，应按照货币的时间价值来计算，这是因为对项目的投资在前，而系统效益的产生在后，且常常有一个较长的过程。<BR>
  &nbsp;�通常，用利率表示货币的时间价值。若设年利率为i，现已存入P元，则n年后可得到的钱数为：F = ( 1 + i ) n，F就是P元钱在n年后的价值。 
  反之，若n年后能收入F元，那么这些钱现在的价值是：P = F�M( 1 + i ) n。<BR>
  &nbsp;由此，可从题意得：<BR>
  &nbsp;该计算机应用系统在5年中的纯收入为：3612.27 - 3000 = 612.27 (元)。<BR>
  &nbsp;投资回收期约为：3 +(3000-2407.15)/(3044.09-2407.15) ≈ 3.93 (年)。<BR>
  &nbsp;投资回收率设为r，由下列方程式：<BR>
  <IMG alt="" hspace=0 src="image/20.gif" align=baseline border=0 width="３７０" height="１４"><BR>
  &nbsp;解得r = 20%。<BR>
  &nbsp;�纯收入就是在整个生存期之内系统的累计经济效益(折合成现在值)与投资之差。投资回收期就是使累计的经济效益等于最初的投资所需的时间。投资回收率时投入资金所获得的利率。</P>
<P><span class="text">&nbsp;</span><span class="part">12、解答：</span><span class="text">A. 
  ②&nbsp;&nbsp; B. ①&nbsp;&nbsp; C. ②&nbsp;&nbsp; D. ②&nbsp;&nbsp; E. ③&nbsp;&nbsp; 
  F. ④&nbsp;&nbsp; G. ③<BR>
  &nbsp;�在特定的情况下，是否必须进行风险分析，是对项目的开发形势进行风险估计后确定的。因为风险分析需要相当大的费用。只有在软件的费用、软件的作用、软件的性能及软件与系统的关系等各方面对系统有比较大的影响时，即软件的风险对于整个系统的成败，或对系统的风险有关键的影响时，才有必要进行软件的风险分析和管理。风险估计的步骤如下：<BR>
  &nbsp;�・明确项目的目标、总策略、具体策略和为完成所标识的目标而使用的方法和资源；<BR>
  &nbsp;�・保证该目标是可度量的，项目成功的标准也是可度量的；<BR>
  &nbsp;�・考虑采用以下的某些条目作为项目成功的标准：① 最大限度的收益，② 最小的费用，③ 最小的风险损失，④ 最大限度的市场，⑤ 最小的周期性的波动，⑥ 
  形成有益的形象，⑦ 最佳的服务质量，⑧ 最高的增长率，⑨ 员工的满意度最高，⑩ 公司声望最高；<BR>
  &nbsp;�・根据估计的结果来确定是否要进行风险分析。<BR>
  &nbsp;一般来说，风险分析的方法要依赖于特定问题的需求和有关部门所关心的方面。下面给出一种结构化的、一致的方法来进行风险分析。具体分3步进行。<BR>
  &nbsp; 　・第一步识别潜在的风险项。当确定要进行风险分析之后，就要收集信息，表明相关的风险。这就需要观察风险的征兆，理解其产生的原因，并列出所有的风险项。<BR>
  &nbsp;　首先进行信息收集。可以从过去完成的项目中收集已有的经验和收集来自群众的经验；可以模拟著名的事例；可以考虑类似的因素和进行常识性的判断；可以进行试验或测试以得到有关的结果，可以用各种方式来获得可能忽略的情况；此外，还可以针对经常发生的错误进行普查统计等。一般来说，通过过去的历史来认识软件项目的风险也许时一种最好的办法。例如，一些数字表明修复一个需求或设计阶段的错误的费用可能比修复一个测试阶段的错误的费用高100倍到1000倍。因此，可以把需求阶段标识为一个软件开发各阶段的风险区域。<BR>
  &nbsp;　然后进行信息分类。必须将收集到的信息以某种方式进行分类。一种简单而有用的方法是把风险项分为三类：有风险、可预见的风险、不可预见的风险。“有风险”是指经常发生的情况；“可预见的风险”是指以较高概率出现的情况；“不可预见的风险”是指不能识别的、未知的、不能观察的风险，是可能发生但事前很难预料的风险。对于每一种类型，还可以按其原因分成三种子类型：缺乏信息、缺乏管理及缺乏时间。其它分类方法可以按直接或间接分类，按运行性或策略性分类，按技术、进度、成本、支持分类。<BR>
  &nbsp;　・第二步估计每个风险的大小及其出现的可能性，风险估计要度量所标识的各个风险可能造成的损失，即各种风险项的值(后果及程度)，用以减少度量的不确定性。可以按以下步骤进行：<BR>
  &nbsp;　选择某一种度量尺度，用以估计计算各种风险项的值，并具有合适的精度。由于要估计的风险信息可能有3种形式：叙述性、定性或定量，所以可选的尺度可以是命名尺度、序次尺度、坐标尺度或比例尺度。待估计的信息与度量尺度之间要建立对应关系，不同类型的信息有不同的度量尺度。例如，叙述性信息需要有命名尺度或序次尺度，定量的信息需要坐标或比例性的尺度。下表列出定量的风险等级：</span><BR>
  <BR>
  <IMG alt="" hspace=0 src="image/12.gif" align=baseline border=0 width="392" height="168"><BR>
  <span class="text"><BR>
  　在使用不同的方法和技术进行风险估计时常常会出现偏差，这是由于缺少可用来进行判断的信息，从而限制了风险估计的精度。由于信息分散，各人的理解和解释不同，造成“信息可用性偏差”。其次，选择的观念不同、专家的偏爱、采样规模的影响、样本相关的影响，以及修正的偏差等，都会产生估计的偏差。特别要注意的是：对于连续发生的事件和间断的不连续发生事件，这些偏差会造成什么样的影响。<BR>
  &nbsp;必须采用一些技术来克服或消减风险估计中的不确定性。风险一般可以看成属于以下三种过程之一：行为型、自然型和随机型。</span><BR>
  <BR>
  <img alt="" hspace=0 src="image/13.gif" align=baseline border=0 width="387" height="97"></P>
<P class="text">&nbsp;　<span class="text">・</span>第三步进行风险评估。因为软件项目所面临的是风险的一个较大的集合及其相互之间的影响，因此，必须针对这一点进行风险评估，以达到以下的目的：<BR>
  &nbsp;　首先，考虑各种风险的综合影响后，对已识别风险发生的可能性及其后果给出最终的量值(如果情况发生变化，也许要重新分析风险发生的可能性和可能的后果)；其次，提供某种机制，对各个风险标明优先次序，以便予以适当安排；最后，通过考虑其它可替代的方案，寻找避免风险的基本方法，即为高层决策人员提供全部必要的信息，以作出合理的有依据的决策。<BR>
  &nbsp;进行风险评估有三个步骤：<BR>
  &nbsp;　① 确定风险评估的标准。其目的是可用以衡量每个风险的后果，即判定在项目的生存期中各个阶段的风险的后果是否可以接受。此标准应与项目成功的标准相关。<BR>
  &nbsp;　② 确定风险的级别。其目的是把项目作为整体来评估。就是说，人们必须理解各种风险之间的相互作用，以及修改某些因素会如何影响它们之间的相互作用。<BR>
  &nbsp;　为了说明可被评估的风险，引入“参照风险”。“参照风险”可以是一组单个风险的集合，或对项目会造成最大损害的一个或多个风险。必须仔细认清各风险间可能发生的耦合或复合情况。说明在把系统视为一个整体时，风险将导致系统失败的概率。<BR>
  &nbsp;　③ 把风险与“参照风险”做比较。把已评定的风险与在早期确定的“参照风险”相比较，结果可能是以下3种情况之一：<BR>
  &nbsp;　<span class="text">・</span>可接受(评定的风险低于“参照风险”)；<BR>
  &nbsp;　<span class="text">・</span>不可能接受(评定的风险大大高于“参照风险”)；<BR>
  &nbsp;　<span class="text">・</span>不适合接受(评定的风险大于，但几乎等于“参照风险”)。</P>
<P class="text">&nbsp;<span class="part">13、解答：</span>A. ②,&nbsp; B. ③,&nbsp; 
  C. ①,&nbsp; D. ②,&nbsp; E. ①,&nbsp; F. ③,&nbsp; G. ④,&nbsp; H. ⑥,&nbsp; I. ②,&nbsp; 
  J. ④。其中，F、G、H的答案顺序可互换。<BR>
  &nbsp;　风险分析实际上是4个不同的活动： 风险识别，风险估计，风险评价和风险驾驭与监控。&nbsp;在进行风险评价时，可建立一系列三元组：[ ri, 
  li, xi ]，其中，ri是风险，li是风险出现的可能性(概率)，而xi是风险产生的影响。在做风险评价时，应进一步审查在风险估计时所得到的估计的准确性，尝试对已发现的风险进行优先排队，并着手考虑控制和�M或消除可能出现风险的方法。<BR>
  &nbsp;　在做风险评价时常采用的一个非常有效的方法就是定义风险参照水准。对于大多数软件项目来说，性能、支持、成本、进度就是典型的风险参照水准。就是说，对于成本超支、进度延期、性能降低、支持困难，或它们的某种组合，都有一个水准值，超出它就会导致项目被迫终止。在软件风险分析的上下文中，一个风险参照水准就有一个点，叫做参照点或崩溃点。在这个点上，要公平地给出可接受的判断，看是继续执行项目工作，还是终止它们（出的问题太大）。实际上，参照点能在图上被表示成一条平滑的曲线的情况很少。在多数情况中，它是一个区域，在此区域中存在许多不确定性的范围。<BR>
  <IMG alt="" hspace=0 src="image/14.gif" align=baseline border=0 width="214" height="191"></P>
<P>&nbsp;<span class="part">14、解答：</span><span class="text">A. ④&nbsp;&nbsp; B. 
  ②&nbsp;&nbsp; C. ③&nbsp;&nbsp; D. ③&nbsp;&nbsp; E. ①<BR>
  &nbsp;　PERT技术叫做计划评审技术，是安排开发进度，制定软件开发计划的最常用的方法。它采用网络图来描述一个项目的任务网络。通常用两张表来定义网络图。一张表给出与一特定软件项目有关的所有任务(也称为任务分解结构)，另一张表给出应当按照什么样的次序来完成这些任务(有时称为限制表)。<BR>
  &nbsp;　当某一开发项目的进度有可能拖延时，应该分析拖期原因加以补救，切忌中途加人，否则反而会降低软件生产率。对于一个典型的软件开发项目，各开发阶段需投入的工作量的百分比大致遵循40－20－40规则。即在整个软件开发过程中，编码的工作量占20％，编码前的工作量占40％，编码后的工作量占40％。<BR>
  &nbsp;　对于一些规模较小的项目(1个人年或者更少)，只要向专家做些咨询，也许一个人就可以完成所有的软件工程步骤。而对一些规模较大的项目，在整个软件生存期中，各种人员的参与情况是不一样的。如图所示。在软件计划和需求分析阶段，对软件系统进行定义，主要工作是由管理人员和高级技术人员在做，初级技术人员参与较少。待到对软件进行具体设计、编码及测试时，管理人员逐渐减少对开发工作的参与，高级技术人员主要在设计方面把关，具体编码及调试参与较少，大量的工作将由初级技术人员去做。到了软件开发的后期，需要对软件进行检验、评价和验收，管理人员和高级技术人员又将投入很多的精力。</span><BR>
  <IMG alt="" hspace=0 src="image/16.gif" align=baseline border=0 width="357" height="270"><BR>
  &nbsp;<BR>
  &nbsp;<span class="part">15、解答：</span><span class="text">A. ③&nbsp;&nbsp; B. 
  ②&nbsp;&nbsp; C. ①&nbsp;&nbsp; D. ②&nbsp;&nbsp; E. ③&nbsp;&nbsp; F. ②&nbsp;&nbsp; 
  G. ④<BR>
  &nbsp;　对于一个小型的软件开发项目，一个人就可以完成需求分析、设计、编码和测试工作。但是，随着软件开发项目规模的增大，就会有更多的人共同参与同一软件项目的工作。例如10个人1年可以完成的项目，若让1个人干10年是不行的。因此，需要多人组成开发小组共同参加一个项目的开发。但是，当几个人共同承担软件开发项目中的某一任务时，人与人之间必须通过交流来解决各自承担任务之间的接口问题，即所谓通信问题。通信需花费时间和代价，会引起软件错误增加，降低软件生产率。<BR>
  &nbsp;若两个人之间需要通信，则称在这两个人之间存在一条通信路径。如果一个软件开发小组有n个人，每两人之间都需要通信，则总的通信路径有n(n-1)/2条。<BR>
  &nbsp;　假设一个人单独开发软件，生产率是5000行／人年。若4个人组成一个小组共同开发这个软件，则需要6条通信路径。若在每条通信路径上耗费的工作量是250行／人年。则小组中每个人的软件生产率降低为<BR>
  &nbsp;&nbsp;　5000－6×250／4 ＝ 5000－375 ＝ 4625 行／人年。<BR>
  &nbsp;　如果小组有6名成员,通信路径增加到15条。每条通信路径消耗的工作量不变，则小组中每个成员的软件生产率降低为<BR>
  &nbsp;&nbsp;　5000－15×250／6 ＝ 5000－625 ＝ 4375 行／人年。<BR>
  &nbsp;　从上述简单分析可知，一个软件任务由一个人单独开发，生产率最高；而对于一个稍大型的软件项目，一个人单独开发，时间太长。因此软件开发小组是必要的。有人提出，软件开发小组的规模不能太大，人数不能太多，一般在2～8人左右为宜。</span></P>
<P class="text">&nbsp;<span class="part">16、解答：</span>A. ②&nbsp;&nbsp; B. ①&nbsp;&nbsp; 
  C. ③&nbsp;&nbsp; D. ⑥&nbsp;&nbsp; E. ③&nbsp;&nbsp; F. ⑤<BR>
  &nbsp;　软件项目的进度计划和工作的实际进展情况，对于较大的项目来说, 难以用语言叙述清楚。特别是表现各项任务之间进度的相互依赖关系，需要采用图示的方法。常用的图示方法有甘特图、时标网状图、PERT等，IPO图是用于在结构化设计中描述程序结构中输入�D处理�D输出的，不是进度控制的图示工具。<BR>
  &nbsp;　甘特图以水平线段表示任务的工作阶段；线段的起点和终点分别对应着任务的开工时间和完成时间；线段的长度表示完成任务所需的时间。从甘特图上可以很清楚地看出各子任务在时间上的对比关系，并以文档编制与评审作为软件开发进度的里程碑。甘特图的优点是标明了各任务的计划进度和当前进度，能动态地反映软件开发进展情况。缺点是难以反映多个任务之间存在的复杂的逻辑关系。<BR>
  &nbsp;　时标网状图克服了甘特图的缺点，用具有时标的网状图来表示各个任务的分解情况，以及各个子任务之间在进度上的逻辑依赖关系(参看下图)。时标网状图中的箭头(直线、折线)表示各任务间的(先决)依赖关系；箭头上的名字表示任务代号；箭头的水平长度表示完成该任务的时间；而圆圈表示一个任务结束、另一个任务开始的事件。</P>
<P>&nbsp;<IMG alt="" hspace=0 src="image/17.gif" align=baseline border=0 width="３５０" height="242"><BR>
  &nbsp;<span class="text">　PERT图也叫做计划评审技术，它采用网络图来描述一个项目的任务网络。不仅可以表达子任务的计划安排，还可以在任务计划执行过程中估计任务完成的情况，分析某些子任务完成情况对全局的影响，找出影响全局的区域和关键子任务，以便及时采取措施，确保整个项目的完成。在PERT图中，用箭头表示任务或子任务，箭头上附带的数字表示完成任务所需的时间；圆形结点表示事件，每一事件标明某些任务都已完成，下面另外一些任务将要开始。</span></P>
<P class="text">&nbsp;<span class="part">17、解答：</span>A. ②&nbsp; B. ④&nbsp; C. 
  ⑥&nbsp; D. ②&nbsp; E. ③&nbsp; F. ⑤&nbsp; G. ④&nbsp; H. ①&nbsp; I. ④<BR>
  &nbsp;　软件管理的主要职能包括：<BR>
  &nbsp;　<span class="text">・</span>制定计划：规定待完成的任务、要求、资源、人力和进度等。<BR>
  &nbsp;　<span class="text">・</span>建立组织：为实施计划，保证任务的完成，需要建立分工明确的责任制机构。<BR>
  &nbsp;　<span class="text">・</span>配备人员：任用各种层次的技术人员和管理人员。<BR>
  &nbsp;　<span class="text">・</span>指导：鼓励和动员软件人员完成所分配的工作。<BR>
  &nbsp;　<span class="text">・</span>检验：对照计划或标准，监督和检查实施的情况。<BR>
  &nbsp;软件项目管理上的困难主要有：<BR>
  &nbsp;　① 智力密集，可见性差：软件工程过程充满了大量高强度的脑力劳动。<BR>
  &nbsp;　② 单件生产：在特定机型上，利用特定的硬件配置，由特定的系统软件或支撑软件的支持，形成了特定的开发环境。再加上软件项目特定的目标，采用特定的开发方法、工具和语言，使得软件具有独一无二的特色，几乎找不到与之完全相同的软件产品。<BR>
  &nbsp;　③ 劳动密集，自动化程度低：软件项目经历的各个阶段都渗透了大量的手工劳动，这些劳动又十分细致、复杂和容易出错。<BR>
  &nbsp;　④ 使用方法繁琐，维护困难：用户使用软件需要掌握计算机的基本知识，或者接受专门的培训，否则面对多种使用手册、说明和繁琐的操作步骤，学会使用要花费很大力气。<BR>
  &nbsp;　⑤ 软件工作渗透了人的因素：为高质量地完成软件项目，充分发掘人员的智力才能和创造精神，不仅要求软件人员具有一定的技术水平和工作经验，而且还要求他们具有良好的心理素质。软件人员的情绪和他们的工作环境，对他们工作有很大的影响。<BR>
  &nbsp;　在总结和分析足够数量失误的软件项目之后，看出其原因大多与管理工作有关。种种问题主要涉及软件项目研制中的计划制定、进度估计、资源使用、人员配备、组织机构和管理方法等软件管理的许多侧面。</P>
<P class="text">&nbsp;<span class="part">18、解答：</span>A. ②&nbsp;&nbsp; B. ③&nbsp;&nbsp; 
  C. ⑥&nbsp;&nbsp; D. ③&nbsp;&nbsp; E. ④&nbsp;&nbsp; F. ①<BR>
  &nbsp;　其中，A、B、C答案顺序可互换。<BR>
  &nbsp;在建立项目组织时应注意到以下原则：<BR>
  &nbsp;　<span class="text">・</span>尽早落实责任：在软件项目工作的开始，要尽早指定专人负责。使他有权进行管理，并对任务的完成负全责。<BR>
  &nbsp;　<span class="text">・</span>减少接口：在开发过程中，人与人之间的联系是必不可少的，存在着通信路径。一个组织的生产率是和完成任务中存在的通信路径数目是相互抵触的。 
  因此，要有合理的人员分工、好的组织结构、有效的通信，减少不必要的生产率的损失。<BR>
  &nbsp;　<span class="text">・</span>责权均衡：软件经理人员所负的责任不应比委任给他的权力还大。<BR>
  &nbsp;通常有三种组织结构的模式可供选择：<BR>
  &nbsp;　<span class="text">・</span>按课题划分的模式：把软件开发人员按课题组成小组，小组成员自始至终参加所承担课题的各项任务。他们应负责完成软件产品的定义、设计、实现、测试、复查、文档编制、甚至包括维护在内的全过程。<BR>
  &nbsp;　<span class="text">・</span>按职能划分的模式：把参加开发项目的软件人员按任务的工作阶段划分成若干个专业小组。要开发的软件产品在每个专业小组完成阶段加工（即工序）以后，沿工序流水线向下传递。例如，分别建立计划组、需求分析组、设计组、实现组、系统测试组、质量保证组、维护组等。各种文档资料按工序在各组之间传递。这种模式在小组之间的联系形成的接口较多，但便于软件人员熟悉小组的工作，进而变成这方面的专家。<BR>
  &nbsp;　<span class="text">・</span>矩阵形模式：这种模式实际上是以上两种模式的复合。一方面，按工作性质，成立一些专门组，如开发组、业务组、测试组等；另一方面，每一个项目又有它的经理人员负责管理。每个软件人员属于某一个专门组，又参加某一项目的工作。</P>
<P class="text">&nbsp;<span class="part">19、解答：</span>A. ②&nbsp;&nbsp; B. ④&nbsp;&nbsp; 
  C. ③&nbsp;&nbsp; D. ②&nbsp;&nbsp; E. ①<BR>
  &nbsp;　软件开发小组的主要目的是发挥集体的力量进行软件研制。因此，小组培养从“全局”的观点出发进行程序设计，消除软件的“个人”性质，并促进更充分的复审，小组提倡在共同工作中互相学习从而改善软件的质量。<BR>
  &nbsp;小组内部人员的组织形式对生产率也有影响。现有的组织形式有三种。<BR>
  &nbsp;　① 主程序员制小组：突出了主程序员的领导，强调主程序员与其他技术人员的直接联系，简化了人际通信。这种集中领导的组织形式能否取得好的效果, 
  很大程度上取决于主程序员的技术水平和管理才能。美国的软件产业中大多是主程序员制的工作方式。<BR>
  &nbsp;　② 民主制小组：组内成员之间可以平等地交换意见，工作目标的制定及做出决定都由全体成员参加。这种组织形式强调发挥小组每个成员的积极性，要求每个成员充分发挥主动精神和协作精神。有人认为这种组织形式适合于研制时间长、开发难度大的项目。日本在发展计算机事业中，组织软件开发大多采用这种形式的开发小组，取得了很好的效果。<BR>
  &nbsp;　③ 层次式小组：这种结构比较适合项目本身就是层次结构状的课题。因为这样可以把项目按功能划分成若干个子项目，把子项目分配给基层小组，由基层小组完成。基层小组的领导与项目负责人直接联系。这种组织方式比较适合于大型软件项目的开发。<BR>
  &nbsp;以上三种组织形式可以根据实际情况，组合起来灵活运用。例如，较大的软件项目也许是把主程序员小组组织成层次式结构；也许基层小组的领导又是一个民主制小组的成员。</P>
<P class="section">四、问答题</P>
<P><span class="text">&nbsp;</span><span class="part">解答：</span><span class="text">对于这样一个规模为10KDSI的商用微机远程通信的嵌入式软件，使用中间COCOMO模型进行软件成本估算。名义工作量为MM 
  = 3.0*(10)1.12 = 146 (人月)。又查表知 f1 = 0.75，其它 fi = 1.00，则最终计算出的实际工作量为MM = 146 
  * 0.75 = 110 (人月)。<BR>
  </span> </P>


