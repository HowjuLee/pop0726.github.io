<html>
<head>
<title>l1</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../../css/text.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" border="0" cellspacing="0" cellpadding="0" height="100%">
  <tr>
    <td valign="top">
      <table width="92%" border="0" cellspacing="0" cellpadding="0" align="center" height="8">
        <tr> 
          <td class="text"> 
            <p><br>
              <span class="section">1、单一概念的模型</span><br>
              ��在分析与高层设计阶段, 常常需要使用多个类来表示一个&quot;概念&quot;。一般人们在使用面向对象方法开发软件时，常常把一个概念进行分解，用一组类来表示这个概念。当然，也可以只用一个独立的类来表示一个概念。<br>
              <br>
              <span class="section">2、可复用的&quot;插接相容性&quot;构件</span><br>
              ��开发出的构件应当可以在未来的应用中使用。因此，需要一些附加特性。例如，在相关的类的集合中界面的标准化，在一个集合内部的类的&quot;插接相容性&quot;等。<br>
              <br>
              <span class="section">3、可靠的构件</span><br>
              ��应用软件必须是可靠的（健壮的和正确定义的）软件。而这种可靠性与它的构件有关。每个构件必须经过充分的测试。但由于成本关系，往往测试不够完备。然而，如果要建立可复用的类，则通过测试确保构件的可靠性是绝对必要的。<br>
              <br>
              <span class="section">4、可集成的构件</span><br>
              ��我们希望把类的实例用到其它类的开发和应用中，这要求类的界面应当尽可能小，一个类所需要的数据和操作都定义在类定义中。因此，类的设计应当尽量减少命名冲突。面向对象语言的消息语法可通过鉴别带有实例名的操作名来减少可能的命名冲突。<br>
              ��类结构提供的封装使得把概念集成到应用的工作变得很容易。封装特性保证了把一个概念的所有细节都组合在一个界面下，而信息隐蔽则保证了实现级的名字将不会其它类的名字互相干扰。 
              <br>
              ��</p>
            </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
