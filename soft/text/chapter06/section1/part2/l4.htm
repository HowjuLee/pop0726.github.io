<html>
<head>
<title>l1</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../../css/text.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" border="0" cellspacing="0" cellpadding="0" height="100%">
  <tr>
    <td valign="top">
      <table width="92%" border="0" cellspacing="0" cellpadding="0" align="center" height="8">
        <tr> 
          <td class="text"> 
            <p><br>
              <img src="../../../../images/tubiao/ts.gif" width="25" height="16" alt="图示"> 
            </p>
          </td>
        </tr>
        <tr>
          <td class="text">
            <div align="center"><img src="../../../../images/images/chapter06/6_9.gif" width="450" height="199"><br>
              <span class="part">图6.9 对象、类与实例 <br>
              　　</span></div>
          </td>
        </tr>
        <tr>
          <td class="text"> ��面向对象程序设计语言，如C++和 smalltalk都定义了一个new操作，可建立一个类的新实例。C++还引入了构造函数，用它在声明一个对象时建立实例。此外，程序设计语言给出了不同的方法，来撤消(称为析构)实例，即当某些对象不再使用时把它们删去，把存储释放以备其它对象使用。C++给出了一个操作delete，可以释放一个对象所用的空间。C++还允许每个类定义自己的析构方法，在撤消一个对象时调用它。　　　　smalltalk没有提供一个机制来撤消对象，但可以进行无用单元收集。 
            <br>
            ��类常常可看做是一个抽象数据类型(ADT)的实现。但更重要的是把类看做是表示某种概念的一个模型。事实上，类是单个的语义单元，它可以很自然地管理系统中的对象，匹配数据定义与操作。类加进了操作，给通常的记录赋予了语义，可提供各种级别的可访问性。<br>
            ��</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
