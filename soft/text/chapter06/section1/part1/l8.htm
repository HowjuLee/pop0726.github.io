<html>
<head>
<title>l1</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../../css/text.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" border="0" cellspacing="0" cellpadding="0" height="100%">
  <tr>
    <td valign="top">
      <table width="92%" border="0" cellspacing="0" cellpadding="0" align="center" height="8">
        <tr> 
          <td class="text"> 
            <p><br>
              <img src="../../../../images/tubiao/ts.gif" width="25" height="16" alt="图示"> 
            </p>
          </td>
        </tr>
        <tr>
          <td class="text">
            <div align="center"><img src="../../../../images/images/chapter06/6_6.gif" width="330" height="279"><br>
              <span class="part">图6.6 对于draw程序的进程体系结构</span> <br>
              　　</div>
          </td>
        </tr>
        <tr>
          <td class="text">��面向进程范型的用户群体相对比较小；但这种范型将给用户提供很成熟的技术。许多主流语言，像Ada语言，通过tasking（派任务）功能支持这种范型。Ada还提供了一个抽象界面来产生进程，而C／UNIX环境则允许设计者直接存取操作系统级服务。 
            <br>
            ��总之，面向进程范型给设计者提供了一种方法，可在操作系统环境下把问题分解成一组独立的实体，这些实体可以并行操作及以各种方式互相通信。面向进程范型在信息隐蔽与抽象方面非常类似于面向对象范型。<br>
            ��</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
