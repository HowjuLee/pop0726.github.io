<html>
<head>
<title>l1</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../../css/text.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" border="0" cellspacing="0" cellpadding="0" height="100%">
  <tr>
    <td valign="top">
      <table width="92%" border="0" cellspacing="0" cellpadding="0" align="center" height="8">
        <tr> 
          <td class="text"><span class="section">【课前思考】</span><br>
            �<span class="part">�1、</span>什么是软件质量？软件质量反映哪三方面问题？<br>
            　　<span class="part">2、</span>什么是软件质量特性？在软件的质量模型中将质量特性如何分层？<br>
            　　<span class="part">3、</span>McCall质量模型将11种质量特性分布在三个方面，如何分布？<br>
            　　<span class="part">4、</span>ISO质量模型由哪3层组成？质量特性之间有什么关系？<br>
            　　<span class="part">5、</span>TQC的4个步骤是什么？<br>
            　　<span class="part">6、</span>软件维护有哪4种？各在什么情况发生？工作量 比例如何？<br>
            　　<span class="part">7、</span>影响维护工作量的因素有6种，说明理由。<br>
            　　<span class="part">8、</span>维护工作量分为生产性活动和非生产性活动，它们对总工作量有什么影响？<br>
            　　<span class="part">9、</span>程序修改的步骤分为3步。每一步的任务是什么？<br>
            　　<span class="part">10、</span>修改程序的副作用有哪3种？请举例说明。 <br>
            　　<span class="part">11、</span>重新验证程序分静态确认和计算机确认。各检查什么问题？<br>
            　　<span class="part">12、</span>软件可维护性为什么是软件开发各阶段的关键目标？它用哪7种特性来衡量？<br>
            　　<span class="part">13、</span>提高可维护性有哪些措施？<br>
            　　<span class="part">14、</span>为保证软件可维护性，需要有4种类型的审查。那些审查是在开发阶段做的？哪些审查是在维护阶段做的？<br>
            　　<span class="part">15、</span>为什么维护阶段需要文档的帮助？历史文档有哪3种，各有什么作用？<br>
            　　<span class="part">16、</span>什么是软件再工程？为什么要实施软件再工程？<br>
            　　<span class="part">17、</span>什么是逆向工程？它的抽象层次有哪4层？各用什么表示？<br>
            　　<span class="part">18、</span>软件再工程的技术有3类，各有哪些技术？<br>
            　　<span class="part">19、</span>软件视图分为4类，每一类有哪些视图编辑器？<br>
            　　<span class="part">20、</span>软件再工程的风险有哪些？举例说明。<br>
            <br>
            <p><span class="section">【学习目标</span><span class="section">】</span><br>
              　�<span class="part">1. </span>了解软件质量定义和软件质量度量。<br>
              　　<span class="part">2. </span>了解软件维护的类型与策略。<br>
              　　<span class="part">3. </span>了解软件维护的过程与管理方法。<br>
              　　<span class="part">4.</span> 了解可维护性的概念。<br>
              　　<span class="part">5.</span> 了解提高可维护性的方法。<br>
              　　<span class="part">6. </span>了解软件逆向工程与再工程的概念<br>
            </p>
            <p><span class="section">【</span><span class="section">学习指南</span><span class="section">】</span><br>
              　　本章主要讨论软件维护的相关问题，包括质量、维护活动、可维护性、可维护性度量、如何提高可维护性，以及通过软件再工程进行自动维护等。因为软件的维护关系到软件的生存期，为了延长软件的生存期，需要通过维护来改进软件，以适应不断变化的用户需求和环境。因此，维护在生存期中所占工作量的比例是最高的。<br>
              　　本章最先讨论软件质量模型，说明可维护性在质量模型中应用什么质量特性来衡量。接下来介绍软件维护的定义，说明有<span class="part">4</span>种类型的维护。根据影响维护工作量的因素，确定每一种类型的维护需要采取什么样的维护策略。<br>
              　　维护的实施分为结构化维护和非结构化维护，不同的维护活动对维护结果有显著影响，这不但取决于维护的组织，还取决于开发阶段的组织。在维护中如何修改程序，必须遵循<span class="part">3</span>个步骤：<span class="part">理解程序、修改程序、重新验证程序</span>。必须注意的是，在修改程序时会引起程序修改的副作用。可能的副作用有<span class="part">3</span>类：<span class="part">修改代码的副作用、修改数据的副作用和文档的副作用</span>。<br>
              　　软件可维护性反映了软件在改正错误、适应新的环境及扩充功能方面的容易程度。如果软件产品的可维护性强，说明软件将来的维护容易，修改工作量小。为此必须在开发的过程中注意可维护性问题。在本章，通过<span class="part">7</span>个质量特性的检查表，说明了如何才能保证软件的可维护性，并介绍了提高可维护性的<span class="part">5</span>个方法：<span class="part">建立明确的质量目标和优先级、使用提高软件质量的技术和工具、进行明确的质量保证审查、选择可维护的程序设计语言和改进程序的文档。</span><br>
              　　本章的最后介绍了软件再工程和逆向工程技术。它对于软件维护提供了强有力的支持。从不同层次理解软件、改进软件、获取、保护和扩充软件知识。但它也有风险，必须加以防范。<br>
            </p>
            <p><span class="section">【难重点</span><span class="section">】</span><br>
              　　<span class="part">◇</span>　分层的软件质量模型定义，重点在McCall模型和ISO模型框架<br>
              <span class="part">　　◇</span>　质量特性间的竞争关系：有互相促进的、有互相抵触的<br>
              <span class="part">　　◇</span>　全面质量管理的4个步骤：开展、当然的质量、感性、有魅力的质量<br>
              <span class="part">　　◇</span>　维护的4种类型：改正性维护、适应性维护、完善性维护、预防性维护<br>
              <span class="part">　　◇</span>　程序修改的步骤：分析和理解程序、修改程序、重新验证程序<br>
              <span class="part">　　◇</span>　程序修改的副作用：修改程序副作用、修改数据副作用、文档副作用<br>
              <span class="part">　　◇</span>　衡量可维护性的7个特性：可理解性、可测试性、可修改性、可靠性、可移植性、可使用性、效率。它们在各种维护类型中的侧重点。<br>
              <span class="part">　　◇</span>　为提高软件可维护性的技术和工具有模块化、结构化程序设计、面向对象方法，以及软件再工程和逆向工程等。 
              <br>
              <span class="part">　　◇</span>　为提高软件可维护性而进行的质量保证审查有：在检查点复审、验收审查、周期性维护审查、对软件包检查等。<br>
              <span class="part">　　◇</span>　软件再工程技术包括改进软件、理解软件、获取、保护和扩充软件知识<br>
              <span class="part">　　◇</span>　逆向工程包括4层抽象：过程性设计的表示(最低层)、程序和数据结构信息(低层)、数据和控制流模型(中层)、试题关系模型(高层)。<br>
              <span class="part">　　◇</span>　软件再工程的风险有过程风险、人员风险、应用问题风险、技术风险、工具风险、策略风险。<br>
              　　</p>
          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
