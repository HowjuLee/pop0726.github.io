<html>
<head>
<title>l1</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../../css/text.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" border="0" cellspacing="0" cellpadding="0" height="100%">
  <tr>
    <td valign="top">
      <table width="92%" border="0" cellspacing="0" cellpadding="0" align="center" height="8">
        <tr> 
          <td class="text"><br>
            <span class="section">1、分析程序结构图</span><br>
            ��<span class="part">⑴</span> 分析各个过程的源代码，建立一个直接调用矩阵或调用树。<br>
            ��<span class="part">⑵</span> 建立过程的间接调用矩阵。<br>
            ��<span class="part">⑶</span> 分析各个过程的接口，估计更改的复杂性。<br>
            <br>
            <span class="section">2、数据跟踪</span><br>
            ��<span class="part">⑴</span> 建立各层次的程序接口图，展示各模块或过程的调用方式和接口参数；<br>
            ��<span class="part">⑵</span> 利用数据流分析方法，对过程内部的一些变量进行跟踪；维护人员通过这种数据流跟踪，可获得有关数据在过程间如何传递，在过程内如何处理等信息。<br>
            ��这些信息对于判断问题原因特别有用。在跟踪的过程中可在源程序中间插入自己的注释。<br>
            <br>
            <span class="section">3、控制跟踪</span><br>
            ��控制流跟踪同样可在结构图基础上或源程序基础上进行。可采用符号执行或实际动态跟踪的方法，了解数据如何从一个输入源到达输出点的。<br>
            <br>
            <span class="section">4、阅读文档</span><br>
            ��<span class="part">⑴</span> 在分析的过程中，充分阅读和使用源程序清单和文档，分析现有文档的合理性。<br>
            ��<span class="part">⑵</span> 充分使用由编译程序或汇编程序提供的交叉引用表、符号表、以及其它有用的信息。<br>
            <br>
            <span class="section">5、如有可能，积极参加开发工作。</span><br>
            ��</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
