<html>
<head>
<title>l1</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../../css/text.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" border="0" cellspacing="0" cellpadding="0" height="100%">
  <tr>
    <td valign="top">
      <table width="92%" border="0" cellspacing="0" cellpadding="0" align="center" height="8">
        <tr> 
          <td class="text"><br>
            <span class="section">1、改正性维护</span><br>
            ��要生成100％可靠的软件成本太高，不一定合算。但通过使用新技术，可大大提高可靠性，减少进行改正性维护的需要。这些技术包括：数据库管理系统、软件开发环境、程序自动生成系统、较高级(第四代)的语言，应用以上4种方法可产生更加可靠的代码。此外，<br>
            ��<span class="part">(1)</span> 利用应用软件包，可开发出比由用户完全自己开发的系统可靠性更高的软件。<br>
            ��<span class="part">(2)</span> 结构化技术，用它开发的软件易于理解和测试。<br>
            ��<span class="part">(3)</span> 防错性程序设计。把自检能力引入程序，通过非正常状态的检查，提供审查跟踪。<br>
            ��<span class="part">(4)</span> 通过周期性维护审查，在形成维护问题之前就可确定质量缺陷。<br>
            <br>
            <span class="section">2、适应性维护</span><br>
            ��这一类的维护不可避免，但可以控制。<br>
            ��<span class="part">(1)</span> 在配置管理时，把硬件、操作系统和其它相关环境因素的可能变化考虑在内，可以减少某些适应性维护的工作量。<br>
            ��<span class="part">(2)</span> 把与硬件、操作系统，以及其它外围设备有关的程序归到特定的程序模块中。可把因环境变化而必须修改的程序局部于某些程序模块之中。<br>
            ��<span class="part">(3)</span> 使用内部程序列表、外部文件，以及处理的例行程序包，可为维护时修改程序提供方便。<br>
            <br>
            <span class="section">3、完善性维护</span><br>
            ��利用前两类维护中列举的方法，也可以减少这一类维护。特别是数据库管理系统、程序生成器、应用软件包，可减少系统或程序员的维护工作量。 
            <br>
            ��除此之外，建立软件系统的原型，把它在实际系统开发之前提供给用户。用户通过研究原型，进一步完善他们的功能要求，就可以减少以后完善性维护的需要。<br>
            　</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
