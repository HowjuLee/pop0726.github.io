 
<link rel="stylesheet" href="../../../../../css/text.css" type="text/css">
 
<body bgcolor="#FFFFFF" background="../../../../../images/tanchu/di.gif" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<P class="section">三、选择填空题</P>
<P class="text"><span class="part">1、解答：</span>A. ④,&nbsp; B. ①,&nbsp;C. ②,&nbsp;D. 
  ⑤&nbsp;E. ③&nbsp;&nbsp;&nbsp; F. ④&nbsp;&nbsp;&nbsp; G. ②&nbsp;&nbsp;&nbsp; 
  H. ①</P>
<P class="text">软件产品质量是生产者和用户都十分关心的问题，早期的质量管理只看到产品的质量，实行的是最终产品检验的方法，对质量进行控制。把不合格的产品挑拣出来报废或返工后，得到的产品就是合格的。<BR>
  近年来质量管理向过程质量的控制方向发展，一个重要的基本假设是开发过程的质量直接影响交付产品的质量。这一假设最初是根据制造业情况作出的。因为在制造业中，产品的质量与生产过程有着十分密切的关系，过程的改进自然就会得到高质量的产品。<BR>
  过程改进的思想是美国工程师戴明(W. E. Deming)提出来的。二次大战后他到日本工作，在他的指导下，日本产业界一直坚持不断地改进过程，取得了很好的效果。戴明等人在质量管理中引入统计质量控制的概念。这一概念的基础是在产品缺陷数和过程之间建立联系，以降低产品缺陷数作为过程改进的目标。过程改进直到过程成为可以重复的为止，就是说，直到过程的结果成为预期的为止。这时，产品的缺陷数就降下来了，然后再将过程标准化，这时下一步的改进又开始了。产品质量与过程的关系的示意图如下。</P>
<P class="text"><IMG alt="" hspace=0 src="image/02.gif" align=baseline border=0 width="388" height="148"></P>
<P class="text"><span class="part">2、解答：</span>A. ②,&nbsp;&nbsp; B. ③,&nbsp;&nbsp; 
  C. ⑥,&nbsp;&nbsp; D. ⑤,&nbsp;&nbsp; E. ①,&nbsp;&nbsp; F ④,&nbsp;&nbsp; G ⑥, 
  H ②,&nbsp;&nbsp;&nbsp; I ⑦<BR>
  �其中，A、B、C答案顺序可互换，D、E、F答案顺序可互换，G、H、I答案顺序可互换。&nbsp; <BR>
  �对于软件产品来说，有4个方面影响着产品的质量，即开发技术、过程质量、人员素质及成本、时间和进度等条件。这4个方面因素对产品质量究竟有多少影响又取决于项目的项目的规模和项目的类型。<BR>
  �重视软件过程的质量是近年来质量管理理论和实践的新发展，但不能把产品质量的控制与过程质量的控制相对立起来。重视软件过程质量的控制，其部分原因可能是，相对于产品质量的控制来说，过程质量的控制是先期的、主动的、系统的，而产品质量的控制是事后的(产品已经生产出来)、被动的(发现了不合格产品只能报废或采取其它补救措施)、个别的(逐个产品的质量检验)。</P>
<P class="text"><span class="part">3、解答：</span>A ②,&nbsp;&nbsp; B ⑤,&nbsp;&nbsp; 
  C ⑩,&nbsp;&nbsp; D ④,&nbsp;&nbsp; E ⑨,&nbsp;&nbsp; F ⑧,&nbsp;&nbsp; G ⑥,&nbsp;&nbsp; 
  H ⑦<BR>
  �其中，A、B、C、D答案顺序可互换，E、F答案顺序可互换，G、H答案顺序可互换。<BR>
  �McCall质量模型如图所示。用户对于已经投入使用的软件，会特别关注软件运行以后所表现出来的运行特性、修正特性和转移特性。它们直接关系到软件的使用寿命。因此，软件的11个质量特性应分为3组，分别隶属于这3个方面。</P>
<P class="text"><IMG alt="" hspace=0 src="image/04.gif" align=baseline border=0 width="317" height="134"></P>
<P class="text"><span class="part">4、解答：</span>A. ③,&nbsp; B. ⑥,&nbsp; C. ①,&nbsp; 
  D. ③</P>
<P class="text">在ISO�MIEC 9126�D1991中规定了6个质量特性及相关的21个质量子特性。如下表所示。这些特性的规定是基于用户的观点的。</P>
<P class="text"><IMG alt="" hspace=0 src="image/05.gif" align=baseline border=0 width="367" height="897"></P>
<P class="text"><span class="part">5、解答：</span>A. ④,&nbsp; B. ③,&nbsp; C. ④,&nbsp; 
  D. ③,&nbsp;&nbsp; E. ②,&nbsp;&nbsp; F ②,&nbsp;&nbsp; G ①,&nbsp;&nbsp; H ③</P>
<P class="text">�一个软件产品开发完成投入使用后，常常由于各种原因需要对它做适当的变更。在软件的使用过程中，软件原来的功能和性能可能不再适应用户的要求，需要进行变更；软件的工作环境也可能发生变化，最常见的是配合软件工作的硬件有变动；还有一种情况是在软件使用过程中发现错误，需要进行修正。通常把软件交付使用后做的变更称为维护。软件维护是软件生存期中的一个重要阶段。<BR>
  �软件投入使用后的另一项工作是软件再工程，它和上述的软件维护很有关系，但不是一回事，只是近年来才受到重视。<BR>
  近年来，随着计算机的普及，各产业部门、政府机构等在软件方面的投资迅速增长。几乎所有的部门、机构的活动都采用了计算机。但大量软件的维护不是轻松的事，需要维护的软件越来越多，而维护工作的开销又大得惊人，这就使得许多机构不可能在开发新的软件上再投资来提高自己的工作能力。另一方面，待维护的软件又常常是一些单位业务工作的关键，其中渗入了许多业务知识和工作经验，这些知识和经验除在软件中体现外并没有其它记载。如果这些软件是早期开发的，当时没有采用软件工程技术，程序结构很差，甚至使用的是陈旧的程序设计语言，或者这些软件的文档已经过时，也可能原来就极不完整，当时的开发人员早已不知去向，使用单位没有人能够了解和看懂软件内部的细节，这样的软件不可能对他们做维护工作。针对这类软件实施的软件工程活动，主要是对其重新实现，使其具有更好的可维护性，包括软件重构、重写文档，或是改用新的编程语言，或是将其数据转移到现行的数据库管理系统中，或是在分布式平台上实现等。<BR>
  �软件再工程和新的软件开发工作的主要差别在于开发的起点不同。再工程工作并不是从编写需求规格说明开始，而是将原有的软件作为规格说明。正因为如此，我们把常规的软件开发称为正向工程，而逆向工程是从代码开始推导出设计或是规格说明来。再工程的最终目标仍然是产生新的、更容易维护的新系统。</P>
<P class="text"><span class="part">6、解答：</span>&nbsp;A. ④,&nbsp; B. ⑤,&nbsp; C. 
  ①,&nbsp; D. ③,E. ④,&nbsp; F ④,&nbsp; G ④,&nbsp; H ⑤,I ③,&nbsp;&nbsp; J ①,&nbsp;&nbsp; 
  K ②,&nbsp; L ⑥。其中，C、D、E的答案顺序可互换。</P>
<P class="text">在下图中描述了作为维护要求结果可能发生的事件流。<br>
  <BR>
  <IMG alt="" hspace=0 src="image/07.gif" align=baseline border=0 width="237" height="257"><BR>
  �如果软件配置的唯一成分使程序代码，则维护活动从艰难地评价程序代码开始。如果程序内部的文档不足，将使得评价更为困难。诸如软件结构、全局数据结构、系统接口、性能和(或)设计约束等微妙的特征难以搞清，常常会产生误解。最后对程序代码所做变更的后果是难于估量的。因为没有测试方面的文档，所以不可能做回归测试(对修改后的软件进行测试以确认软件的功能没有因修改而退化)。这就是非结构化维护，是我们没有使用良好定义的方法论开发软件的必然结果。因此，必须为此付出代价(大量人力的浪费并要经受挫折)。<BR>
  �如果存在完整的软件配置，则维护工作可以从评价设计文档开始，确定软件重要的结构特征、性能特征以及接口特征，估计要求的改动可能带来的影响，并且计划实施途径。然后首先修改设计并对所做的改动进行仔细的复查。接下来编写相应的源代码程序，使用在测试规格说明中包含的信息进行回归测试。最后，把修改后的软件交付使用。这就是结构化维护。它是在软件开发的早期就应用软件工程方法论的结果。虽然有了完整的软件配置并不能保证维护中一定没有问题，但确实能减少人力的浪费且能提高软件维护的总体质量。</P>
<P class="text"><span class="part">7、解答：</span>A. ④,&nbsp;&nbsp; B. ⑤&nbsp;&nbsp; 
  C. ⑥,&nbsp;&nbsp; D. ③,&nbsp;&nbsp; E. ⑦<BR>
  �论述A是指可移植性。可移植性的定义是：将一个软件系统从一个计算机系统或环境移植到另一个计算机系统或环境中运行时所需工作量的大小。<BR>
  �论述B是指可使用性。可使用性的定义是：程序方便、实用、及易于使用的程度。用户一有请求，就能对每一个操作方式作出解释，始终如一地按照用户的要求运行。计算其按用户请求实现指定功能的概率，是一种度量准则。<BR>
  �论述C是指兼容性。有两类基本的兼容性：向下兼容和交错兼容。向下兼容是软件新版本保留它早期版本的功能的情况；交错兼容是共同存在的两个相关但不同的产品之间的兼容性。软件可以在不同系统约束和不同用户需求下完成指定的工作。<BR>
  �论述D是指可靠性。可靠性的定义是：一个程序按照用户的要求和设计目标，在给定的一段时间内正确执行的概率。<BR>
  �论述E是指容错性。容错性的定义是：系统出错(机器临时发生故障或数据输入不合理)时，能以某种预定方式，做出适当处理，得以继续执行和恢复系统的能力。<BR>
  &nbsp;<BR>
  <span class="part">8、解答：</span>软件维护人员通常不是改软件的开发人员，这给软件维护带来很大的困难。特别是有些软件在开发时没有遵循软件开发的准则，没有开发方法的支持，维护这样的软件就更困难。下面列举一些与软件维护有关的问题。<BR>
  �① 要维护一个软件，首先必须要理解它。而理解一个别人编写的程序通常是很困难的，尤其是对软件配置(指各种相关的文档)不齐全的软件，理解起来就更加困难。<BR>
  �② 需要维护的软件往往缺少合格的文档，或者文档资料不齐全，甚至根本没有文档。在软维护中，合格的文档十分重要，它有助于理解被维护的软件。合格的文档不仅要完整正确地反映开发过程各阶段的工作成果，而且应当容易理解并应与程序源代码一致。而错误的文档会把对软件的理解引入歧途。<BR>
  �③ 在软件维护时，不要指望得到原来开发该软件的人员的帮助。开发人员开发完一个软件后，往往会从事另一软件的开发，甚至已离开原开发单位。即使原来的开发人员还在，也可能时间太久而忘却了实现的细节。。<BR>
  �④ 多数软件在设计时没有考虑到将来的修改，这给软件的修改造成了困难。而且在修改软件时很可能引入新的差错。<BR>
  �⑤ 软件维护通常不是一件吸引人的工作。从事维护工作常使维护人员缺乏成就感，这也严重影响维护工作，从而影响了维护质量的提高。</P>
<P class="text"><span class="part">9、解答：</span>A. ③,&nbsp; B. ①,&nbsp; C. ④,&nbsp; 
  D. ②,&nbsp;&nbsp; E. ②</P>
<P class="text">�在软件维护的实施过程中，为了正确、有效地修改，需要经历以下3个步骤：分析和理解程序、修改程序和重新验证程序。经过分析，全面、准确、迅速地理解程序是决定维护成败和质量好坏的关键。有如下几种方法：分析程序结构图、数据跟踪、控制跟踪及其它方法。在将修改后的程序提交用户之前，需要通过静态确认、计算机确认和维护后的验收，保证修改后的程序的正确性。</P>
<P class="text"><span class="part">10、解答：</span>A. ②,&nbsp; B. ②,&nbsp; C. ⑥,&nbsp; 
  D. ⑤,&nbsp;&nbsp; E. ②。<BR>
  �其中，B、D的答案顺序可互换。<BR>
  �分析：软件可维护性是指纠正软件系统出现的错误和缺陷，以及为满足新的要求进行修改，扩充或压缩的容易程度。目前广泛使用7个特性来衡量软件的可维护性，其中就有可靠性、可理解性和可使用性。其中，可靠性和可理解性主要在改正性维护中侧重应用，可使用性主要在适应性维护和完善性维护中侧重应用。参看下面有关7种质量特性在各类维护中侧重点的列表。</P>
<P class="text"><IMG alt="" hspace=0 src="image/08.gif" align=baseline border=0 width="373" height="185"></P>
<P class="text"><span class="part">11、解答：</span>A. ③,&nbsp;&nbsp; B. ④,&nbsp;&nbsp; 
  C. ③,&nbsp;&nbsp; D. ①,&nbsp;&nbsp; E. ③</P>
<P class="text">�软件可移植性是用来衡量软件质量的重要尺度之一。为了提高软件的可移植性，应注意提高软件的设备独立性。采用表格驱动的方式有助于提高软件的设备独立性。为了提高可移植性，还应有完备的文档资料。使用C语言开发的系统软件具有较好的可移植性。</P>
<P class="text"><span class="part">12、解答：</span>正确的叙述有 ①、③、④、⑥、⑦。<BR>
  &nbsp;<BR>
  �为了提高软件的可移植性，应当尽可能用高级语言编写源程序代码。对于与硬件或操作系统有关的部分，或对效率要求很高的部分，应当为它们建立专门的模块，将用汇编语言写的程序封装在这些模块中，与程序中其它部分以事先约定的标准方式接口。这样，一旦硬件环境或操作系统环境发生变化，只需修改个别模块即可。<BR>
  �采用表格控制方式，将所有的外部设备接口或与其它系统的接口，包括信息传递、驱动程序入口等都用表格控制，即使将来硬件、相关软件发生的变化，只需修改表格中的登记项，原来的程序一律可以不改。<BR>
  �为了将来修改方便，不致于引入新的错误，相关文档一定要齐全、正确，程序中必须有必要的注释，并使用如结构化程序设计方法这样的良好的程序设计方法来编写程序。至于算法选择，与效率有关，与可移植性无关。其它叙述，如⑧、⑨、⑩，都不利于可移植性。</P>
<P class="text"><span class="part">13、解答：</span>A. ①,&nbsp; B. ⑤,&nbsp; C. ③,&nbsp; 
  D. ⑤,&nbsp; E. ①,&nbsp; F ②,&nbsp; G ①,&nbsp; H ②,&nbsp; I ③</P>
<P class="text">�软件再工程技术包括：��) 改进软件，如重构、文档重写、复用工程、重新划分模块、数据再工程、业务过程再工程、可维护分析等。��) 
  理解软件，如浏览、分析、度量、逆向工程和设计恢复等。��) 获取、保护及扩充软件知识，如分解、逆向工程和设计恢复、对象恢复、程序理解、知识库和变换等。<BR>
  �因此，本例题的解答是：软件再工程技术主要有改进软件、获取、保存及扩充软件知识和理解软件。分析、度量属于理解软件，知识库和变换属于获取、保存及扩充软件知识；复用工程属于改进软件，其目的是修改软件，使其更容易复用。通常是先寻找构件，然后将其改造，使之能放入可复用库中。实际应用可从库中选取可复用的构件，以实现复用。<br>
  <BR>
  <IMG alt="" hspace=0 src="image/09.gif" align=baseline border=0 width="215" height="180"></P>
<P class="text"><span class="part">14、解答：</span>A ③,&nbsp;&nbsp; B ④,&nbsp;&nbsp; 
  C ①,&nbsp;&nbsp; D ②,&nbsp;&nbsp; E ②。<BR>
  其中，A、B答案的顺序可互换。</P>
<P class="text"><span class="part">15、解答：</span>A ③,&nbsp; B ⑥,&nbsp; C ⑦,&nbsp; 
  D ⑤,&nbsp; E ④,&nbsp; F ⑤,&nbsp; G ③,&nbsp; H ①。<BR>
  其中，A、B的答案顺序可互换；<BR>
  <IMG alt="" hspace=0 src="image/11.gif" align=baseline border=0 width="244" height="213"></P>
<P class="text">关于软件再工程的定义有这样两种说法。<BR>
  �。┤砑�再工程是变更系统(或程序)的内部机制，或是系统(或程序)的数据结构，而不变更其功能性的一种工程活动。<BR>
  ��）检查并改进对象系统，按新的模式对系统进行重构，进而实现其新的模式。<BR>
  �多数软件再工程工具可按图示的自动进行再工程的模式工作。图中大的矩形框表示某个再工程工具。在分解器中进行语法分析和语义分析之后，将相关信息送到信息库。信息库中的信息经过合成器，可以在软件维护中生成各种视图和其它产品，对于进一步分析，自动进行维护以及进行相关的研究都很有价值。 
</P>
<P class="text"><span class="part">16、解答：</span>A. ③,&nbsp; B. ②,&nbsp; C. ③,&nbsp; 
  D. ①,&nbsp;&nbsp; E. ④,&nbsp;&nbsp; F ⑤<BR>
  �软件视图有规格说明、数据流图(DFD)、源程序、度量值、根据静态源程序导出的报告、以及表明软件性能的测试数据等。图中的软件视图包含了视图信息。在视图得到视图编辑器的支持时，可以使用这种工具加入、变更和浏览视图的信息。视图分为4类：<BR>
  ① 1类视图：非过程性描述和�M或元描述。例如，软件的规格说明和数据库的概念模式即属于此类。<BR>
  ② 2类视图：伪过程性描述和�M或面向体系结构的描述。例如，软件设计、PDL描述和软件的体系结构(如模块调用层次图、数据流图DFD)即属于此类。<BR>
  ③ 3类视图：纯过程性描述或直接导出的信息。例如，源程序、程序段、数据、源程序中的数据定义、由视图分解得到的对象、关系和语法树均属于此类。<BR>
  ④ A类视图：伴随以上各类的分析视图。<BR>
  A1类视图是对1类视图的分析信息。例如，规格说明文本的图索引。<BR>
  A2类视图是有关2类视图的分析信息，如源模块的耦合度。<BR>
  A3类视图是有关3类视图的分析视图，如源程序中的模块数。</P>
<P class="section">四、问答题</P>
<P class="text"><span class="part">1、解答：</span>在软件开发完成交付用户使用后，为了保证软件在一个相当长的时期能够正常运行，就需要对软件进行维护。软件维护的类型有4种：改正性维护、适应性维护、完善性维护和预防性维护。其中，改正性维护是要改正在特定的使用条件下暴露出来的一些潜在程序错误或设计缺陷；适应性维护是要在软件使用过程中数据环境发生变化或处理环境发生变化时修改软件以适应这种变化；完善性维护是在用户和数据处理人员使用软件过程中提出改进现有功能，增加新的功能，以及改善总体性能的要求后，修改软件以把这些要求纳入到软件之中。预防性维护是为了提高软件的可维护性、可靠性等，事先采用先进的软件工程方法对需要维护的软件或软件中的某一部分（重新）进行设计、编制和测试，为以后进一步改进软件打下良好基础。<BR>
  �软件维护的过程如图所示。第一步是先确认维护要求。这需要维护人员与用户反复协商，弄清错误概况以及对业务的影响大小，以及用户希望做什么样的修改，并把这些情况存入故障数据库。然后由维护组织管理员确认维护类型。<BR>
  �对于改正性维护申请，从评价错误的严重性开始。如果存在严重的错误，则必须安排人员，在系统监督员的指导下，进行问题分析，寻找错误发生的原因，进行“救火”性的紧急维护；对于不严重的错误，可根据任务、机时情况、视轻重缓急，进行排队，统一安排时间。对于适应性维护和完善性维护申请，需要先确定每项申请的优先次序。若某项申请的优先级非常高，就可立即开始维护工作，否则，维护申请和其它的开发工作一样，进行排队，统一安排时间。并不是所有的完善性维护申请都必须承担，因为进行完善性维护等于是做二次开发，工作量很大，所以需要根据商业需要、可利用资源的情况、目前和将来软件的发展方向、以及其它的考虑，决定是否承担。<BR>
  &nbsp;<BR>
  &nbsp;&nbsp; <IMG alt="" hspace=0 src="image/12.gif" align=baseline border=0 width="369" height="395"></P>
<P class="text">�尽管维护申请的类型不同，但都要进行同样的技术工作。这些工作有：修改软件需求说明、修改软件设计、设计评审、对源程序做必要的修改、单元测试、集成测试(回归测试)、确认测试、软件配置评审等。在每次软件维护任务完成后，最好进行一次情况评审，情况评审对将来的维护工作如何进行会产生重要的影响，并可为软件机构的有效管理提供重要的反馈信息。</P>
<P class="text"><span class="part">2、解答：</span>改正性维护与“排错(调试)”不是一个概念。调试是作为测试的后继工作而出现的，是当测试发现软件中的错误后，进一步诊断和改正程序中潜在的错误的活动。而改正性维护是指在软件交付使用后，由于开发时测试的不彻底、不完全，必然会有一部分隐藏的错误被带到运行阶段来，这些隐藏下来的错误在某些特定的使用环境下就会暴露出来。为了识别和纠正软件错误、改正软件性能上的缺陷、排除实施中的误使用所进行的诊断和改正错误的过程。调试在程序编码阶段、测试阶段、运行和维护阶段都可以发挥作用，它实际上是一种工具或手段。在软件交付运行之后，用户实际充当了测试员的角色，一旦发现软件运行中的错误或缺陷，就会将问题报告通报软件销售商，申请软件维护。其后软件维护人员可以利用调试手段来诊断和改正软件中存在的错误。这时可能涉及的范围不只包括程序，还有文档和数据，不仅可能修改程序代码，而且可能需要修改设计。甚至需求。所以改正性维护是在更大范围中做工作。</P>
<P class="text"><span class="part">3、解答：</span>所谓副作用是指因修改软件而造成的错误或其它不希望发生的情况，有以下三种副作用：<BR>
  �① 修改代码的副作用：在使用程序设计语言修改源代码时，都可能引入错误。例如，删除或修改一个子程序、删除或修改一个标号、 删除或修改一个标识符、改变程序代码的时序关系、改变占用存储的大小、改变逻辑运算符、修改文件的打开或关闭、改进程序的执行效率，以及把设计上的改变翻译成代码的改变、为边界条件的逻辑测试做出改变时，都容易引入错误。<BR>
  �② 修改数据的副作用：在修改数据结构时，有可能造成软件设计与数据结构不匹配，因而导致软件出错。数据副作用就是修改软件信息结构导致的结果。例如，在重新定义局部的或全局的常量、 
  重新定义记录或文件的格式、增大或减小一个数组或高层数据结构的大小、修改全局或公共数据、重新初始化控制标志或指针、重新排列输入／输出或子程序的参数时，容易导致设计与数据不相容的错误。<BR>
  �③ 文档的副作用：对数据流、软件结构、 模块逻辑或任何其它有关特性进行修改时，必须对相关技术文档进行相应修改。否则会导致文档与程序功能不匹配，缺省条件改变，新错误信息不正确等错误。使得软件文档不能反映软件的当前状态。如果对可执行软件的修改不反映在文档里，就会产生文档的副作用。例如，对交互输入的顺序或格式进行修改，如果没有正确地记入文档中，就可能引起重大的问题。过时的文档内容、索引和文本可能造成冲突，引起用户的失败和不满。</P>
<P class="text"><span class="part">4、解答：</span>所谓适应性维护，是指修改软件以适应外部环境(新的硬、软件配置)或数据环境(数据库、数据格式、数据输入�M输出方式、数据存储介质)发生的变化。<BR>
  �使用高级语言，如FORTRAN，C等，它们以接近自然语言的方式编写程序。这样的程序可理解性强，结构化、模块化都很好，除了与硬件、相关软件(如操作系统)和数据库管理系统有关的部分外，都可以用它们编写程序。但每一种类型的计算机，即使提供同一种高级语言，也有可能渗入它自己特有的功能。为作到可移植，必须避开这些特殊的功能，使用语言的标准文本来编写程序。<BR>
  �当前。许多软件开发商以一些高级语言为核心，开发了众多功能强大的软件编程环境，如Delphi(以Pascal为编程语言)，Vasual C++(以C++为编程语言)，Vasual 
  Basic(以Basic为编程语言)，Powerbuilder(以C++为编程语言)等。在这些软件中提供了大量的控件或类库，可以帮助程序员以最小的工作量实现多种功能，还可以与多种数据库接口。所有这些，对于适应性维护，都有有利的影响。但事情也不是绝对的。在MS 
  Windows*.* 或NT环境下开发的软件不一定能够直接转移到Linux环境下。虽然许多人在这方面正在努力。<BR>
  �国外一些计算机厂商在硬、软件结合的环境下综合考虑软件跨平台使用的问题。例如，Oracle数据库管理系统在几乎所有的硬件平台上，微软和苹果的Windows环境下都可以安装，这样使用Oracle 
  SQL编写的程序在多种硬件平台上，多种数据库和操作系统的环境下，不用修改程序，或修改少量程序，就可以直接运行。</P>
<P class="text"><span class="part">5、解答：</span>针对不同的工作目标，软件计划的可以有以下多种类型：<BR>
  ① 项目实施计划（或称为软件开发计划）──这是软件开发的综合性计划，通常应包括任务、进度、人力、环境、资源、组织等多个方面。<BR>
  ② 质量保证计划──把软件开发的质量要求具体规定为每个开发阶段可以检查的质量保证活动。<BR>
  ③ 软件测试计划──规定测试活动的任务、测试方法、进度、资源、人员职责等。<BR>
  ④ 文档编制计划──规定所开发项目应编制的文档种类、内容、进度、人员职责等。<BR>
  ⑤ 用户培训计划──规定对用户进行培训的目标、要求、进度、人员职责等。<BR>
  ⑥ 综合支持计划──规定软件开发过程中所需要的支持，以及如何获取和利用这些支持。<BR>
  ⑦ 软件分发计划──软件开发项目完成后，如何提供给用户。<BR>
  并未专门考虑软件的维护费用问题。但实际上，为了提高软件的可维护性，在软件开发的具体操作时，必须考虑将来的维护，采取必要的措施，以降低将来维护的费用。</P>


