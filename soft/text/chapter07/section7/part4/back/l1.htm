<html>
<head>
<title>l1</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../../../css/text.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" border="0" cellspacing="0" cellpadding="0" height="100%">
  <tr>
    <td valign="top">
      <table width="92%" border="0" cellspacing="0" cellpadding="0" align="center" height="8">
        <tr> 
          <td class="text"><br>
            <span class="part">〖本章小结〗</span> 
            <p>　软件生存期的第三个时期是运行/维护阶段。这是持续时间最长，花费最多的阶段。如何搞好维护，关系到软件使用寿命能否延长的问题。<br>
              　　本章讨论与软件维护相关的概念、方法和技术。首先，作为预备知识，介绍了软件质量、质量特性和质量模型，主要涉及到的是软件产品的质量。这一部分的重点在ISO的三层质量模型，以及所涉及质量特性的竞争关系。搞清这些概念对于制定软件质量目标有很大的指导意义。<br>
              　　其次，本章介绍了软件维护的相关概念。如维护的类型，影响维护工作量的因素，维护机构的组织，维护成本的估计，根据不同维护类型可采取的对策，维护的工作流程，修改程序的步骤，以及程序修改的副作用等。这部分内容要求做一般了解即可。<br>
              　　接下来是可维护性问题。本章介绍了可维护性的定义，可维护性的度量，并给出了可维护性度量的7个质量特性。注意对于不同的维护类型，这7个质量特性的侧重点不同。在具体介绍这7个质量特性时用到了检查表。要求对这些检查表仔细阅读，这些检查项目是保证质量的具体措施，给出了如何设计实现软件才能将要求的质量制作到软件产品中。<br>
              　　为了提高软件可维护性，必须从5个方面对软件进行质量保证工作。这是从开发角度和维护角度对如何保证软件可维护性所做的质量审查、质量改进工作。通过这一部分的学习，应了解如何权衡以选定要达到的质量目标及其优先级，如何利用一些先进的方法来开发或维护好一个软件，在开发和维护的各个阶段如何进行审查以保证质量的实现，如何选择可维护的程序设计语言等。<br>
              　　软件再工程和逆向工程是维护软件的重要手段，是走向自动维护的必经之路。本章讨论了相关的概念和主要的技术，以及可能的风险。其中，还讨论了软件视图、视图编辑器、逆向工程的抽象层次、程序重构、文档重写、复用工程、数据再工程、业务过程再工程等问题。要求做一般了解即可。<br>
              　　</p>
          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
