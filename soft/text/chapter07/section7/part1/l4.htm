<html>
<head>
<title>l1</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../../css/text.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" border="0" cellspacing="0" cellpadding="0" height="100%">
  <tr>
    <td valign="top">
      <table width="92%" border="0" cellspacing="0" cellpadding="0" align="center" height="8">
        <tr> 
          <td class="text"><br>
            ��逆向工程的文档完全性给出了一个抽象层次所能提供细节的详细程度。在多数情况下，文档完全性随着抽象层次的增加而减少。例如，给出一个源代码清单，可利用它得到比较完全的过程性设计表示；可能还能得到简单的数据流表示；但要得到完全的数据流图则比较困难。 
            <br>
            ��如果逆向工程过程的方向只有一条路，则从源代码或目标代码中提取的所有信息都将提供给软件工程师。他们可以用来进行维护活动。如果方向有两条路，则信息将反馈给再工程工具，以便重新构造或重新生成老的程序。<br>
            ��作为逆向工程的一个子集，设计恢复可以产生有关软件的信息。通常从软件和其相关的文档中获取这些信息并不容易，同时还需投入足够的工作量将其化简。例如，生成一些原则以表明为什么软件需要以这种形式存在；从源代码生成规格说明；在没有文档的条件下生成软件的黑盒测试用例等。<br>
            ��</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
