<html>
<head>
<title>l1</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../../css/text.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" border="0" cellspacing="0" cellpadding="0" height="100%">
  <tr>
    <td valign="top">
      <table width="92%" border="0" cellspacing="0" cellpadding="0" align="center" height="8">
        <tr> 
          <td class="text"><br>
            ��一个可维护的程序应是可理解的、可靠的、可测试的、可修改的、可移植的、效率高的、可使用的。但要实现这所有的目标，需要付出很大的代价，而且也不一定行得通。因为某些质量特性是相互促进的，例如可理解性和可测试性、可理解性和可修改性。但另一些质量特性却是相互抵触的，例如效率和可移植性、效率和可修改性等。因此，尽管可维护性要求每一种质量特性都要得到满足，但它们的相对重要性应随程序的用途及计算环境的不同而不同。 
            <br>
            ��对于编译程序来说，效率和可移植性是主要的；对于信息管理系统来说，可使用性和可修改性可能是主要的。 <br>
            ��大量实验表明，强调效率的程序包含的错误比强调简明性的程序所包含的错误数要高出10倍。所以，应当对程序的质量特性，在提出目标的同时还必须规定它们的优先级。这样有助于提高软件的质量，并对软件生存期的费用产生很大的影响。<br>
            ��</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
