<html>
<head>
<title>l1</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../../css/text.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" border="0" cellspacing="0" cellpadding="0" height="100%">
  <tr>
    <td valign="top">
      <table width="92%" border="0" cellspacing="0" cellpadding="0" align="center" height="8">
        <tr> 
          <td class="text"><br>
            现在人们已经认识到，好的文档是建立可维护性的基本条件。它的作用和意义有三点：<br>
            ��<span class="part">(1)</span> 文档好的程序比没有文档的程序容易操作。因为它增加了程序的可读性和可使用性。但不正确的文档比根本没有文档要坏得多。<br>
            ��<span class="part">(2)</span> 好的文档意味着简洁、风格一致、且易于更新。<br>
            ��<span class="part">(3)</span> 程序应当成为其自身的文档。也就是说，在程序中应插入注释，以提高程序的可理解，并以移行、空行等明显的视觉组织来突出程序的控制结构。如果程序越长、越复杂，则它对文档的需要就越迫切。 
            <br>
            ��在软件维护阶段，利用历史文档，可以大大简化维护工作。例如，通过了解原设计思想，可以指导维护人员选择适当的方法去修改代码而不危及系统的完整性。又例如，了解系统开发人员所认为的系统中最困难的部分，可以向维护人员提供最直接的线索，来判断出错之处。	
            历史文档有三种：<br>
            　　<br>
            <span class="section">1、系统开发日志</span><br>
            ��它记录了项目的开发原则、开发目标、优先次序、选择某种设计方案的理由、决策策略、使用的测试技术和工具、每天出现的问题、计划的成功和失败之处等。系统开发日志在日后对维护人员想要了解系统的开发过程和开发中遇到什么问题是非常必要的。<br>
            　　<br>
            <span class="section">2、错误记载</span><br>
            ��它把出错的历史情况记录下来，对于预测今后可能发生的错误类型及出错频率有很大帮助。也有助于维护人员查明出现故障的程序或模块，以便去修改或替换它们。此外，对错误进行统计、跟踪，可以更合理地评价软件质量以及软件质量度量标准和软件方法的有效性。<br>
            　　<br>
            <span class="section">3、系统维护日志</span><br>
            ��系统维护日志记录了在维护阶段有关系统修改和修改目的的信息。包括修改的宗旨。修改的策略、存在的问题、问题所在的位置、解决问题的办法、修改要求和说明、注意事项、新版本说明等信息。它有助于人们了解程序修改背后的思维过程，以进一步了解修改的内容和修改所带来的影响。<br>
            ��</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
