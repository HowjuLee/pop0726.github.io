<html>
<head>
<title>l1</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../../css/text.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" border="0" cellspacing="0" cellpadding="0" height="100%">
  <tr>
    <td valign="top">
      <table width="92%" border="0" cellspacing="0" cellpadding="0" align="center" height="8">
        <tr> 
          <td class="text"><br>
            ��使用结构化程序设计技术，提高现有系统的可维护性的方法有：<br>
            <br>
            ��<span class="part">⑴ 采用备用件的方法</span>──当要修改某一个模块时，用一个新的结构良好的模块替换掉整个模块。这种方法要求了解所替换模块的外部（接口）特性，可以不了解其内部工作情况。它有利于减少新的错误，并提供了一个用结构化模块逐步替换掉非结构化模块的机会。<br>
            <br>
            ��<span class="part">⑵ 采用自动重建结构和重新格式化的工具(结构更新技术)</span>──这种方法采用如代码评价程序、重定格式程序、结构化工具等自动软件工具，把非结构化代码转换成良好结构代码。<br>
            <br>
            ��<span class="part">⑶ 改进现有程序的不完善的文档</span>──改进和补充文档的目的是为了提高程序的可理解性，以提高可维护性。<br>
            <br>
            ��<span class="part">⑷ 使用结构化程序设计方法实现新的子系统。<br>
            </span><br>
            ��<span class="part">⑸ 采用结构化小组程序设计的思想和结构文档工具</span>──软件开发过程中，建立主程序员小组，实现严格的组织化结构，强调规范，明确领导以及职能分工，能够改善通信、提高程序生产率；在检查程序质量时，采取有组织分工的结构普查，分工合作，各司其职，能够有效地实施质量检查。同样，在软件维护过程中，维护小组也可以采取与主程序员小组和结构普查类似的方式，以保证程序的质量。<br>
            ��</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
