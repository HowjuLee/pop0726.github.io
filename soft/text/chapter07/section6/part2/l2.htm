<html>
<head>
<title>l1</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../../css/text.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" border="0" cellspacing="0" cellpadding="0" height="100%">
  <tr>
    <td valign="top">
      <table width="92%" border="0" cellspacing="0" cellpadding="0" align="center" height="8">
        <tr> 
          <td class="text"><br>
            �� 面向对象方法构造的软件可复用性好。对象固有的封装性和信息隐蔽机制，使得对象内部的实现与外界隔离，具有较强的独立性。因此，对象类提供了比较理想的模块化机制和可复用的软件成分。<br>
            ��因为对象类是理想的模块机制，它的独立性好，修改一个类通常很少涉及到其他类。若只修改一个类的内部实现部分而不修改该类的对外接口，则可以完全不影响软件的其他部分。由于面向对象的软件技术符合人们习惯的思维方式，用这种方式建立的软件系统的结构与问题论域的结构基本一致，因此面向对象软件系统比较容易理解。<br>
            ��对面向对象的软件系统进行维护，主要通过对从既存类派生出的一些新类的维护来实现。因此，维护时的测试和调试工作也主要围绕这些新派生出来的类进行。类是独立性很强的模块，向类的实例发送消息即可运行它，观察它是否能够正确地完成要求它做的工作。对类的测试一般比较容易测试，如果发现错误也往往集中在类的内部，比较容易调试。 
            <br>
            ��总之，用面向对象方法开发出来的软件系统稳定性好、容易修改、容易理解、也易于测试和调试，因而可维护性好。<br>
            ��</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
