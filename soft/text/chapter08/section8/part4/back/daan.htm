 
<link rel="stylesheet" href="../../../../../css/text.css" type="text/css">
 
<body bgcolor="#FFFFFF" leftmargin="0" marginwidth="0" marginheight="0">
<P class="section">三、选择填空题</P>
<P class="text"><span class="part">1、解答：</span>A. ③&nbsp;&nbsp; B. ①&nbsp;&nbsp; 
  C. ③&nbsp;&nbsp; D. ⑤&nbsp;&nbsp; E. ②&nbsp;&nbsp; F. ③&nbsp;&nbsp; G. ⑤<BR>
  &nbsp;其中，E、F、G的答案顺序可互换。<BR>
  &nbsp; �实施软件复用的目的是要使软件开发工作进行得是更快、更好、更省。“更快”是指在市场竞争环境中，软件开发工作能满足市场上时间方面的要求(即在提供软件产品的时间方面能赛过竞争对手)；“更好”是指开发出来的软件在未来的运行中失效可能性小；“更省”是指在开发和维护期间所花费的开销少。<BR>
  &nbsp;�日美一些大公司的资料表明，软件复用率最高可望达到90 %，而且软件复用使得企业在及时满足市场、软件质量、软件开发和维护费用等方面都得到显著的改进。<BR>
  &nbsp;�除了复用率之外，在企业的经营管理方面也可望达到理想的效益。例如，上市时间可缩短2～5倍；软件产品的缺陷密度可减少5～10倍；软件产品的维护费用可减少5～10倍；软件开发总费用可减少1～75%，其中，75%是针对长期项目，包括开发可复用构件及支持复用的负担。<BR>
  &nbsp;新的应用软件开发技术和工具是以“构件”作为关键，复用大粒度的“对象”，为的是快速开发应用软件。这些新技术包括微软的Visual Basic、Active 
  X、OLE(对象链接与嵌入)，SUN公司的Java，OMG公司的CORBA(公用对象请求代理程序体系结构)、IDL(接口定义语言)等。非面向对象语言(如COBOL和Fortran)在复用实践中已经器的相当的成功。这些非面向对象程序设计语言构件技术的成功实践说明了：实现软件复用并不限于面向对象语言构件或类库。</P>
<P class="text"><span class="part">2、解答：</span>A. ②&nbsp;&nbsp; B. ④&nbsp;&nbsp; 
  C. ④&nbsp;&nbsp; D. ①&nbsp;&nbsp; E. ③<BR>
  &nbsp;�其中，A、B的答案的顺序可互换。<BR>
  &nbsp;�以往的软件工程技术不能满足复用的需要，体现在工程、过程、组织管理、经营业务等4个方面。这里所说的“工程”是指软件开发工程，其技术和方法面对复用的需要已显得低效，主要表现在：<BR>
  &nbsp;�・缺乏界定手段：为了软件复用，需要循软件开发流程的各个阶段，通过分析它们的描述模型，明确界定出潜在可复用的部分，被界定出的部分，可能是可被复用的部分，也可能是可被可复用构件代用的部分。而以往的软件工程缺乏这种界定手段。<BR>
  &nbsp; 　・缺乏可复用的构件：者反映在许多方面。例如，不能有效地挑选出可复用构件并对它们进行强化；缺乏对构件打包、文档化、分类、界定的技术；缺乏有效方法进行(构件)库的设计和实现；缺乏良好的构件库存取方法。<BR>
  &nbsp;　・缺乏对潜在可复用构件的灵活性：如果一个构件很死板，那么它被复用的机会就很少。而过去的软件工程方法在设计灵活的、分层的软件体系结构方面一直没有不成熟的办法。过去的方法是对构件进行调节使之满足新的需求，或者使对新的体系结构进行限制。<BR>
  &nbsp;　・缺乏实施复用的工具：为了实施复用，需要一系列新的工具，并把它们集成到面向复用的软件工程环境中去。而过去的工程缺乏这方面的工具。</P>
<P class="text"><span class="part">3、解答：</span>A. ③&nbsp;&nbsp;&nbsp; B. ①&nbsp;&nbsp;&nbsp; 
  C. ②&nbsp;&nbsp;&nbsp; D. ③<BR>
  &nbsp;当今大多数软件复用过程中，都涉及创建过程的一个重要活动，即界定潜在的可复用的资源。在这个活动中需要一整套的界定方法，并需要一个能确保可复用资源被复用的体系结构。这个活动就叫做论域工程。而应用软件的开发过程或复用过程则称为应用系统工程。系统地软件复用的实质是：创建者先投资，即界定并仔细地创建出可复用的资源，从而可以使得复用者能够又快又省地开发应用软件。</P>
<P class="text"><span class="part">4、解答：</span>A. ①&nbsp;&nbsp; B. ③&nbsp;&nbsp; 
  C. ③&nbsp;&nbsp; D. ②&nbsp;&nbsp; E. ②&nbsp;&nbsp; F. ⑥<BR>
  &nbsp;其中，A、B的答案顺序可互换。<BR>
  &nbsp;论域工程过程要在选定的应用论域中界定出共性和可变性，要为多个应用和构件定义一个体系结构，并开发一系列可适度扩展的构件。创建可复用构件既困难又昂贵。所以，应当帮助软件人员进行界定工作，以及按重要性对各项“特性”进行优先性排队。在一定程度上，这项工作要依赖于预测的可靠性(预测需要哪些应用层的可靠性和构件层的可靠性)，这也关系到我们要冒多大的风险。</P>
<P class="text"><span class="part">5、解答：</span>A. ③&nbsp;&nbsp; B. ①&nbsp;&nbsp; 
  C. ②&nbsp;&nbsp; D. ⑥&nbsp;&nbsp; E. ②&nbsp;&nbsp; F. ④<BR>
  &nbsp;所谓一个构件，可以是一个类型、类或其他的工作成品。对于构件应当按可复用的要求设计、实现、打包、编写文档。构件是内聚性很强的，并具有相当稳定的公开的接口。这里的构件是基于面向对象技术的。面向对象技术中的封装、多态等特性，可简化构件的开发工作。而面向对象技术中的继承机制则有两面性，一方面可以简化开发工作，另一方面使构件的维护变得很复杂。</P>
<P class="text"><span class="part">6、解答：</span>A. ⑤&nbsp;&nbsp; B. ①&nbsp;&nbsp; 
  C. ④&nbsp;&nbsp; D. ⑤&nbsp;&nbsp; E. ③&nbsp;&nbsp; F. ④&nbsp;&nbsp; G. ⑥<BR>
  &nbsp;软件开发人员必须用各种抽象化手段来开发代码级构件。典型的抽象方法有3种。功能抽象、数据抽象和过程抽象。功能抽象要求构件的功能仅由接口说明中的输入�D关系确定，把构件的实现细节对构件的使用者隐藏起来。数据抽象则在功能抽象的基础上进一步隐藏除接口参数外的所有数据。构件的功能或行为可以由输入参数和构件自身记忆的内部状态决定。面向对象程序设计语言中的“类”是一种典型的基于数据抽象的构件。而过程抽象在数据抽象的基础上进一步实现在同一构件上并发执行的多个线程的无关性。构件提供端口，以便为多个用户同时访问软件构件中的资源进行同步控制。访问请求首先进入等待队列，构件就绪后，从队列中取出请求逐个执行。使用构件的多个线程之间通过全局共享数据或消息传递进行信息交换。构件的设计必须保证构件接口元素的功能和行为在语义上的正确性，不管各线程操作序列之间的相对时序如何变化。</P>
<P class="text"><span class="part">7、解答：</span>A. ⑤&nbsp;&nbsp; B. ⑥&nbsp;&nbsp; 
  C. ②&nbsp;&nbsp; D. ②&nbsp;&nbsp; E. ⑤&nbsp;&nbsp; F. ①&nbsp;&nbsp; G. ⑦<BR>
  &nbsp;可以有很多方法来描述可复用的构件，其中最理想的是由Tracz提出的3C模型。3C是指概念(concept)、内容(content)和上下文(context)。概念描述软件构件做什么。为此，需要完全地描述构件的接口和表示语义(表示在前置条件和后置条件的上下文中)。概念将传达构件的意图。内容描述软件构件的概念如何实现。一般来讲，内容是对外来用户隐蔽的信息，是只有试图修改或测试该构件的人才需要了解的信息。上下文将可复用的构件安置到它的应用论域中。就是说，上下文将通过定义概念的、操作的和实现的特征，使软件人员能够找到合适的构件以满足应用的需求。</P>
<P class="text"><span class="part">8、解答：</span>A. ②&nbsp;&nbsp; B. ③&nbsp;&nbsp; 
  C. ⑤&nbsp;&nbsp; D. ③&nbsp;&nbsp; E. ①<BR>
  &nbsp;软件体系设计的一个中心问题是能否使用重复的体系模式，以及采用何种软件体系结构风格。例如可以采用通用的基于层次或数据流的系统体系结构，或者采用特殊的系统组织(如经典的编译器分解方式)，OSI七层协议，MVC用户界面语义图等。有原则地使用体系结构风格可带来一系列实际的好处。<BR>
  &nbsp;(1) 它促进了对设计的复用。一些经过实践证实的解决方案可以拿来可靠地解决新问题。<BR>
  &nbsp;(2) 它可以带来显著的代码复用。体系结构风格的不变部分使它们可以共享同一个实现代码。<BR>
  &nbsp;(3) 只要系统是使用常用的、规范的方法组织起来的，就可以让其他设计者很容易地理解软件的体系结构。例如，如果某人把系统描述为“客户机�M服务器”模式，则不必给出细节，人们立刻就会明白它们是如何一部分一部分地组织起来，并在脑海中清晰地得到这个图像。<BR>
  &nbsp;(4) 对标准或规范风格的使用也支持了互操作性，例如像CORBA这样的面向对象的架构和基于事件机制的工具的集成；<BR>
  &nbsp;(5) 在限制了设计空间的情况下，体系结构风格通常允许进行特殊的与风格有关的分析。例如，分析管道过滤器系统的可调度性(吞吐量、延时、死锁的解决)是可行的，但对于任意的、或用其他方法构造的架构来说，这种分析可能毫无意义。<BR>
  &nbsp;(6) 通常可以对特定的风格提供可视化的手段。例如，可以对与客户的专业领域有关的设计作出图解或文字说明。<BR>
  &nbsp;对于应用软件体系结构风格来说，由于视点的不同，软件人员有很大的选择空间。要为系统选择或设计某一个体系结构风格，必须根据特定项目的具体特点，进行分析比较后再确定。体系结构风格的使用几乎完全是特化的。</P>
<P class="text"><span class="part">9、解答：</span>&nbsp;A. ④&nbsp;&nbsp; B. ①&nbsp;&nbsp; 
  C. ②&nbsp;&nbsp; D. ③&nbsp;&nbsp; E. ②&nbsp;&nbsp; F. ③&nbsp;&nbsp; G. ④<BR>
  &nbsp;&nbsp;H. ①&nbsp; I. ⑥&nbsp; J. ③<BR>
  &nbsp;对于分层系统：<BR>
  &nbsp;(1) 基本结构<BR>
  &nbsp;　分层系统采用层次化的组织方法，每一层向其上层提供服务，并利用其下层的服务。在一些分层系统中，内部层次全部被隐藏起来，只有外部层次及一部分精心选择的功能可以被系统外部所见。在这种系统中，软件部件是实现在层次结构中的一些虚拟机，连接是层次与层次之间交互的协议，拓扑约束包括对层次之间交互的限制。如图所示。<BR>
  <BR>
  <IMG alt="" hspace=0 src="image/13.gif" align=baseline border=0><BR>
  <BR>
  &nbsp;(2) 应用<BR>
  &nbsp;　这种系统最广泛的应用是分层通信协议。在这一应用论域中，每一层提供一级抽象的功能，作为上层通信的基础。较低的层次定义低层的交互，最低层通常只定义硬件物理连接。其他应用论域有数据库系统、操作系统等。<BR>
  &nbsp;(3) 分层系统中有许多可取的属性。<BR>
  &nbsp;　首先，它支持基于抽象程度递增的系统设计，这使得设计者可以把一个复杂的系统按递增的步骤分解开来；其次，它支持功能增强，像管道结构的系统一样，因为每一层至多和相邻的上下层交互，因此，功能的改变最多只影响相邻的上下层。另外，它能支持复用，和抽象数据类型一样，只要提供的服务接口定义不变，同一层的不同实现可以交换使用。这样，就可以定义一组标准的接口，并允许有各种不同的实现方法(典型的例子是ISO 
  OSI参考模型和某些X Windows的系统协)。</P>
<P class="text"><span class="part">10、解答：</span>A. ②&nbsp;&nbsp;&nbsp; B. ④&nbsp;&nbsp;&nbsp; 
  C. ②&nbsp;&nbsp;&nbsp; D. ③&nbsp;&nbsp;&nbsp; E. ①<BR>
  &nbsp;在分层式体系结构中，位于同一层上的各个软件系统或子系统具有同等的通用性。每一层的软件建立在低一层的软件层上。低层软件比高层软件更具通用性。最高层是应用软件层，可包容许多应用系统。次高层是特定业务层，包括针对不同业务类型的许多构件库。中间件层位于特定业务层下面，它为其上层提供各种实用软件类，最低层是系统软件层，它包含许多基础设施软件，如操作系统、网络接口软件等。这种4层次的分层体系结构见图。<BR>
  <BR>
  <IMG alt="" hspace=0 src="image/15.gif" align=baseline border=0></P>
<P class="text"><span class="part">11、解答：</span>A. ①&nbsp; B. ④&nbsp;&nbsp; C. 
  ③&nbsp;&nbsp; D. ⑤&nbsp;&nbsp; E. ②&nbsp;&nbsp; F. ④&nbsp;&nbsp; G. ②&nbsp;&nbsp; 
  H. ③<BR>
  &nbsp;　广义来讲，软件复用可分为以下三个层次：<BR>
  &nbsp;　(1) 知识复用（如软件工程知识的复用）；<BR>
  &nbsp;　(2) 方法和标准的复用（如面向对象方法或国家制定的软件开发规范的复用）；<BR>
  &nbsp;　(3) 软件成分的复用。软件成分的复用又可进一步划分为三个级别：① 代码复用（源代码剪贴、源代码包含、继承）；② 设计结果复用；③ 　分析结果复用（这是一种更高级别的复用，即复用某个系统的分析模型）。<BR>
  &nbsp;　为实现软件复用需要付出额外代价，如投资、时间和可复用构件库。<BR>
  &nbsp;　即使不考虑上述的额外代价，软件复用也不是必然能提高软件生产率。为研究软件复用程度与软件生产率的关系，我们首先引入下列两个量：<BR>
  &nbsp;　　生产率P = 程序总长度�M开发该程序所用人时数<BR>
  &nbsp;　　复用率R = 复用代码长度�M程序总长度<BR>
  &nbsp;　令Lt为程序总长度(目标代码条数)，Ln和Lr分别为新编代码和复用代码的长度(都用目标代码条数来度量)。再令Et、En和Er分别代表开发该程序的总工作量、新编程序的工作量和复用已有软件构件的工作量，则有以下等式成立：<BR>
  &nbsp;&nbsp;　Lt = Ln + Lr,&nbsp;&nbsp; Et = En + Er,&nbsp;&nbsp; P = Lt�MEt,&nbsp;&nbsp; 
  R = Lr�MLt.<BR>
  &nbsp;此外，用符号Cn和Cr分别代表开发新代码和复用已有软件构件的生产率，则有：<BR>
  &nbsp;&nbsp;　Cn = Ln�MEn,&nbsp; Cr = Lr�MEr.<BR>
  &nbsp;从上述6个等式出发，可以推导出下列的生产率与复用率之间的关系：<BR>
  <BR>
  <IMG alt="" hspace=0 src="image/17.gif" align=baseline border=0><BR>
  <BR>
  &nbsp;　从上式可知，复用率R越高，生产率不一定就越高。只有当软件开发人员使用已有的软件构件构造应用系统时，其工作效率比重新从底层编写程序的效率高时，复用率的提高才会导致生产率提高。可见，通过软件复用来提高软件生产率，并不是一件轻而易举的事情。构件的实用程度和使用方便程度，以及软件人员的素质、开发环境等因素，都直接影响软件复用的效果。</P>
<P class="section">四、问答题</P>
<P class="text"><span class="part">1、解答：</span>软件复用就是指利用某些早先开发的对建立新软件系统有用的软件元素来生产新系统。软件复用的范围有以下十个方面：<BR>
  &nbsp;① 项目计划：软件项目计划的基本结构和许多内容都可以跨项目复用。<BR>
  &nbsp;② 成本估计：由于不同项目中常包含类似的功能，所以有可能在极少修改或不修改的情况下，复用对该功能的成本估计。<BR>
  &nbsp;③ 体系结构：即便应用论域千差万别，但程序和数据体系结构大同小异。因此，可以创建一组类属的体系结构模板，将这些模板作为可复用的涉及框架。<BR>
  &nbsp;④ 需求模型和规格说明：类和对象的模型和规格说明显然可以复用。此外，用传统软件工程方法开发的分析模型也可以复用。<BR>
  &nbsp;⑤ 设计：用传统方法开发的体系结构、数据、接口和过程化设计，以及用面向对象方法开发的系统和对象的设计都可以复用。<BR>
  &nbsp;⑥ 源程序代码：验证过的程序构件可以拿来复用的。<BR>
  &nbsp;⑦ 用户文档和技术文档：即便特定的应用不同，但也经常有可能复用用户文档和技术文档中的大部分内容。<BR>
  &nbsp;⑧ 用户界面：这可能是最广泛被复用的软件元素。如经常复用GUI的软件构件。<BR>
  &nbsp;⑨ 数据结构：经常被复用的数据结构包括：内部表、列表和记录结构，以及文件和完整的数据库。<BR>
  &nbsp;⑩ 测试用例：只要将设计或代码构件定义成可复用构件，相关的测试用例就应当成为这些构件的“从属品”。</P>
<P class="text"><span class="part">2、解答：</span>软件复用过程如图所示。<BR>
  <BR>
  <IMG alt="" hspace=0 src="image/18.gif" align=baseline border=0><BR>
  <BR>
</P>
<P class="text">　主要关键点在于论域分析：根据应用论域的特征和相似性，预测构件的可复用性。一旦根据论域分析确认了构件的可复用价值，即可进行构件的开发，并对具有可复用价值的构件做一般化处理，使它们能够适应新的类似的应用论域。然后将软件构件和它们的文档存入可复用构件库，成为可供未来开发项目使用的可复用资源。这些步骤构成构件的构造活动。<BR>
  &nbsp;　随着可复用构件的不断丰富，可复用构件库的规模会不断扩大，必须考虑如何组织库的结构以保持较高的检索效率。可供选择的软件构件从库中被检索出来之后，用户还必须理解它的功能或行为，以判定它是否真正适合于当前的应用。必要时，可考虑对某个与期望的功能或行为匹配程度最好的可复用构件进行少量修改，甚至可将修改后的构件再加到可复用构件库中。<BR>
  &nbsp;　软件复用的过程可借助计算机的帮助。支持软件复用的CASE 工具的主要工作是：用某种组织形式实现可复用构件的存储，提供友好的人机界面，帮助用户浏览、检索和修改可复用构件库，对用户感兴趣的软件构件进行解释。事实上，几乎所有的软件复用活动都是在CASE工具的帮助下进行的。<BR>
  &nbsp;下面列出软件复用各个步骤中的关键技术。<BR>
  <BR>
  <IMG alt="" hspace=0 src="image/19.gif" align=baseline border=0 width="370" height="217">&nbsp;</P>
<P class="text"><span class="part">3、解答：</span>(1) 软件复用可以区分为横向复用和纵向复用。横向复用是复用不同应用论域中的软件元素，例如数据结构、排序算法、人机界面构件等。标准函数库是一种典型的原始的横向复用机制。纵向复用是在一类具有较多公共性的应用论域之间复用软件构件。<BR>
  &nbsp;横向复用是在几个截然不同的应用论域之间进行软件复用，可复用的资源有限，潜力不大。纵向复用的应用范围较大，从系统软件到特定论域的软件及应用软件，还有软件工程过程方面，许多计算机软件厂商开发了大量可复用的构件或软件包，在软件工程实践中取得显著的效益，因此受到广泛关注。<BR>
  &nbsp;　(2) 图8.4 是关键词分类结构的示例，它是横向复用的典型例子，用户界面所涉及的技术可用于各个不同应用论域的软件中。</P>
<P class="text"><span class="part">4、解答：<br>
  </span>(1) 软件构件的分类方法和相应的构件库结构对构件的检索和理解有极为深刻的影响，就是说，可复用构件库的组织应当便于构件的存储和检索。<BR>
  &nbsp;　① 关键词分类法。此方法的基本思想是：根据论域分析的结果，将应用论域(族)的概念按照从抽象到具体的顺序，逐步分解树形结构或有向无回路图结构。每个概念用一个描述性的关键词表示。不可再分解的原子层的包含隶属于它的某些软件构件。下图给出了可复用构件库的关键词分类结构，它支持图形用户界面设计。<br>
  <img alt="" hspace=0 src="image/20.gif" align=baseline border=0 width="387" height="160"></P>
<P class="text">&nbsp;　当加入新的构件时，库管理员应对构件的功能或行为进行分析，浏览上述关键词分类结构，将构件置于最合适的原子层关键词下。如果无法找到构件应从属的关键词，可以扩充关键词分类结构，引进新的关键词。但必须保证新关键词有相应的论域分析的结果作为支持。<BR>
  &nbsp;　② 多面分类法。此方法由3部分构成：多面分类机制、同义词库和概念距离图。<BR>
  &nbsp;　・多面分类机制：分析论域范围并定义若干用于描述一个构件特征的“面”，每个“面”包含若干“概念”，它们表述构件在“面”上的基本特征。这些特征根据它们的重要性排队。“面”可以描述构件执行的功能、被操作的数据、构件应用的上下文以及任何其他特征。描述某一构件的“面”的集合称为面描述子。<BR>
  &nbsp;　・同义词库：意义相同或相近的若干词汇组成同义词库。所有词汇按照隶属于“面”的“概念”分组，在任一时刻点，每个“概念”可用组内的某一同义词汇作为标识载体。<BR>
  &nbsp;　・概念距离图：用于度量每个“面”中“概念”的相似性程度。属于每个“面”的一般化概念与其中的两个或多个“概念”以加权边相连接，两个“概念”的相似性由它们之间的最短加权路径上的加权距离确定，附加于边上的权值体现了“概念”之间的差异程度。<BR>
  &nbsp;　采用多面分类法进行可复用构件库的组织，必须在存储软件构件的同时，表示并存储多面分类机制、同义词库和概念距离图。多面分类法的所有语法构件(“面”、“概念”、同义词、一般化概念、差异性权值)均取材于论域分析的结果。当需要在可复用构件库中加入新的构件时，库管理源必须对构件的功能、行为进行深入分析，利用现有的多面分类结构确定构件的描述子，对每个“面”选取合适的“概念”作为特征描述。必要时可以考虑增加新的“概念”，此时必须根据新“概念”完善同义词库和概念距离图。<BR>
  &nbsp;　③ 超文本组织法。此方法的基本思想是：所有构件都必须辅以详细的功能或行为说明文档，说明中出现的概念和构件以网状链接方式互相连接。检索者在阅读文档的过程中可任意跳转到包含相关概念或软件构件的文档中去。全文检索系统将用户给出的关键词与说明文档中的文字进行匹配，实现软件构件的浏览式检索。<BR>
  &nbsp;　超文本方法以结点为基本单位，链作为结点之间的联想式关联。一般地，结点是一个信息块。对于可复用构件库而言，结点可以是论域的概念、功能或行为名称、构件名称等，在图形用户界面上，结点可以是字符串，也可以是图像、声音、动画等。<BR>
  &nbsp;(2) 可复用构件库的检索方法与库的组织方式密切相关。<BR>
  &nbsp;　① 基于关键词的检索：这种检索方法的基本思想是：系统(CASE工具)在图形用户界面上将可复用构件库的关键词树直观地展示给用户，用户通过在树上的逐级浏览寻找需要的关键词并提取相应的构件。当然，用户也可以直接给出关键词(其中可含有通配符)，由系统自动地给出合适的候选构件清单。<BR>
  &nbsp;　② 多面检索：这种检索方法基于多面分类法。步骤如下：<BR>
  &nbsp;　・构造查询：用户提供待查构件在每个“面”上的特征，生成构件描述子。此时，用户可以从可复用构件库已有的“概念”中挑选，也可以将某些特征值置为空。系统在库中检索时将忽略特征值为空的“面”。在构造查询的过程中，可以利用同义词库和概念距离图来帮助用户正确选择特征值。<BR>
  &nbsp;　・检索构件：实现多面分类法的CASE工具利用同义词库和概念距离图，在可复用构件库中寻找相同的或相近的构件描述子及相应的构件。<BR>
  &nbsp;　・对构件进行排序：按照相似程度对被检索出来的构件进行排序，还可以按照与复用有关的度量信息(如构件的复杂性、可复用性、成功复用的次数等)进行排序。<BR>
  &nbsp;　③ 超文本检索：这种检索方法的步骤是：用户首先给出一个或若干个关键词，系统在构件的说明文档中做精确的或模糊的语法匹配。匹配成功后，向用户提供相应的构件说明。这些构件说明是含有许多超文本结点的正文。用户在阅读这些正文时可实现多个构件说明文档之间的自由跳转，最终选择合适的构件。为了避免用户在跳转过程中迷失方向，系统可以通过图形用户界面显示浏览历史图，允许将特定画面定义为有名“书签”并可随时跳转到“书签”。此外，还可以帮助用户逆着跳转路径逐步返回。<BR>
  &nbsp;　④ 其他检索方法：上述检索方法都是基于语法匹配，要求用户对可复用构件库中的出现的众多词汇有较全面的把握，较精确的理解。理论上，理想的检索方法是语义匹配：可复用构件库的用户以形式化的手段描述所需要的构件的功能或行为的语义，系统通过定理证明或基于知识的推理过程寻找语义上等价的或相近的构件。但这种基于语义的检索方法涉及许多人工智能的难题，目前难于支持大型构件库的工程实现。</P>
<P class="text"><span class="part">5、解答：</span>基于复用的软件项目组织与传统的软件开发项目组织不同，它必须有两个职能，并由两个部门分别承担这两个职能。一个职能是创建，相应的部门是创建者或论域工程部门；另一个职能是复用，相应的部门是复用者或应用工程部门。而具有复用经验的单位，往往还需要第三个职能，即支持，相应的部门是支持者或支持部门。创建、复用和支持这三个平行的部门之上，还有一个高层经理，他关注的是总目标。</P>
<P><span class="text"><BR>
  <IMG alt="" hspace=0 src="image/21.gif" align=baseline border=0 width="379" height="219"><BR>
  &nbsp;① 复用者负责传统的软件开发任务。同时，在各开发阶段，软件人员可查询构件库，从中检索可复用构件，进行适应性修改后将其合成到当前的目标软件中来。此外，对于同类(或同族)应用的首次开发，复用者还需在做需求分析之前进行论域分析，以便为系统地构造软件构件提供依据。<BR>
  &nbsp;② 创建者负责从复用者手中接受构件的设计规格说明，进行构件的设计、实现和质量控制，重点考虑因素是构件的可复用性。在构件库的积累初期，开发可复用构件的工作量较大，需要设立专门的软件构件开发组。但随着构件库的不断丰富，可以考虑将构件开发组并入系统开发组。<BR>
  &nbsp;③ 高层经理负责管理、组织和协调各类软件复用活动，并处理所有有关复用的事务性工作。所有下属的创建、复用和支持部门都应定期向他报告各自复用活动的当前状况，高层经理根据这些状况制定或调整复用计划，实施奖励，以调动开发人员的复用积极性。此外，他还应根据整体复用情况，向项目管理人员提供资源分配、进度安排等方面的决策建议。<BR>
  &nbsp;④ 复用支持者负责可复用构件的资格确认、质量保证、分类和存储。在可复用构件库尚未形成的初期，支持者的任务还包括开发可复用构件库和其他配套的软件复用CASE工具。此后，还可将部分力量投<BR>
  </span> </P>


