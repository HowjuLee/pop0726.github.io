<html>
<head>
<title>l1</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../../css/text.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" border="0" cellspacing="0" cellpadding="0" height="100%">
  <tr>
    <td valign="top">
      <table width="92%" border="0" cellspacing="0" cellpadding="0" align="center" height="8">
        <tr> 
          <td class="text"><br>
            <span class="section">1、项目计划</span><br>
            ��软件项目计划的基本结构和许多内容（如SQA计划）都可以跨项目复用。这样可减少制定计划的时间，也可降低与建立进度表、风险分析及其他特征相关的不确定性。<br>
            <br>
            <span class="section">2、成本估计</span><br>
            ��由于不同项目中常包含类似的功能，所以有可能在极少修改或不修改的情况下，复用对该功能的成本估计。<br>
            <br>
            <span class="section">3、体系结构</span><br>
            ��即便应用论域千差万别，但程序和数据体系结构大同小异。因此，可以创建一组体系结构模板（例如事务处理结构），将这些模板作为可复用的涉及框架。<br>
            <br>
            <span class="section">4、需求模型和规格说明</span><br>
            ��类和对象的模型和规格说明显然可以复用。此外，用传统软件工程方法开发的分析模型（如数据流图）也可以复用。<br>
            <br>
            <span class="section">5、设计</span><br>
            ��用传统方法开发的体系结构、数据、接口和过程化设计都可以复用。另外，复用系统和对象的设计是屡见不鲜的。<br>
            <br>
            <span class="section">6、源程序代码</span><br>
            ��验证过的程序构件（用兼容的程序设计语言书写）是可以拿来复用的。<br>
            <br>
            <span class="section">7、用户文档和技术文档</span><br>
            ��即便特定的应用不同，但也经常有可能复用用户文档和技术文档中的大部分内容。<br>
            <br>
            <span class="section">8、用户界面</span><br>
            ��这可能是最广泛的可复用的软件资产。如经常复用GUI的软件构件。因为它可占到一个应用的60%的代码量，所以复用的效果最明显。<br>
            <br>
            <span class="section">9、数据结构</span><br>
            ��经常被复用的数据结构包括：内部表、列表和记录结构，以及文件和完整的数据库。<br>
            <br>
            <span class="section">10、测试用例</span><br>
            ��只要将设计或代码构件定义成可复用构件，相关的测试用例就应当成为这些构件的&quot;从属品&quot;。<br>
            ��</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
