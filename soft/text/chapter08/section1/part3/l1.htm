<html>
<head>
<title>l1</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../../css/text.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" border="0" cellspacing="0" cellpadding="0" height="100%">
  <tr>
    <td valign="top">
      <table width="92%" border="0" cellspacing="0" cellpadding="0" align="center" height="8">
        <tr> 
          <td class="text"><br>
            ��纵向复用活动的主要关键点在于论域分析：根据应用论域的特征和相似性，预测软件构件的可复用性，从而界定潜在的可复用资产。一旦根据论域分析确认了软件构件的可复用价值，即可进行软件构件的开发，并对具有可复用价值的软件构件做一般化处理，使它们能够适应新的类似的应用论域。然后将软件构件和它们的文档存入可复用构件库，成为可供未来开发项目使用的可复用资源。这些步骤构成软件构件的构造活动。这是一个不断积累、不断完善软件构件的渐进过程。<br>
            ��随着可复用构件的不断丰富，可复用构件库的规模会不断扩大，这样，必须考虑如何组织库的结构以保持较高的检索效率。可供选择的软件构件从库中被检索出来之后，用户还必须理解它的功能或行为，以判定它是否真正适合于当前的应用。必要时，可考虑对某个与期望的功能或行为匹配程度最好的可复用构件进行少量修改，甚至可将修改后的构件再加到可复用构件库中。上述的软件复用的方法如<span class="part">图8.2</span>所示。<br>
            　　<br>
            <img src="../../../../images/tubiao/ts.gif" width="25" height="16" alt="图示"> 
          </td>
        </tr>
        <tr>
          <td class="text">
            <div align="center"><img src="../../../../images/images/chapter08/8_2.gif" width="261" height="248"><br>
              <span class="part">图8.2 面向复用的软件开发 <br>
              ��</span></div>
          </td>
        </tr>
        <tr>
          <td class="text">��软件复用的过程可借助计算机的帮助。支持软件复用的CASE 工具的主要工作是：用某种组织形式实现可复用构件的存储，提供友好的人机界面，帮助用户浏览、检索和修改可复用构件库，对用户感兴趣的软件构件进行解释。事实上，几乎所有的软件复用活动都是在CASE工具的帮助下进行的。 
            <br>
            ��使用复用技术可以减少软件开发活动中大量的重复性工作，这样就能够提高软件生产效率，降低开发成本，缩短开发周期。同时。由于可复用构件大都经过严格的质量验证，并在实际运行环境中得到检验，因此，复用软件构件有助于改善软件质量。此外，大量使用可复用构件，软件的灵活性和标准化程度也可望得到提高。<br>
            ��</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
