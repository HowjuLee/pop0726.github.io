<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../../css/text.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" border="0" cellspacing="0" cellpadding="0" height="100%">
  <tr>
    <td valign="top">
      <table width="92%" border="0" cellspacing="0" cellpadding="0" align="center">
        <tr>
          <td><span class="text"><br>
            </span><span class="section">5 逻辑视图和物理视图</span><span class="text"><br>
            　　大多数方法允许分析人员在着手问题的逻辑解决方案之前先分析物理视图。通常，同一种表示法既可用来表示逻辑视图，也可用来表示物理视图。<br>
            <br>
            </span><span class="section">6 系统抽象模型</span><span class="text"><br>
            　　为了能够比较精确地定义软件需求，可以建立待开发软件的一个抽象模型，用基于抽象模型的术语来描述软件系统的功能和性能，形成软件需求规格说明。这种抽象的模型是从外部现实世界的问题领域抽象而来，在高级层次上描述和定义系统的服务。<br>
            　　对于比较简单的问题，不必建立抽象系统模型。或者说，系统模型已经在分析员头脑中形成，直接由分析员写成规格说明。但对于比较复杂的问题，问题领域中各种关系比较复杂，仅有在头脑中想象的模型是不够的，必须建立适当的比较形式化的抽象系统模型，才能准确全面地反映问题领域中各种复杂的要求。<br>
            <br>
            　　不同类型的问题有不同的需要解决的中心问题，因而要建立不同类型的系统模型。对于数学软件，设计的中心问题是算法，软件人员的主要力量要花在数学模型算法的考虑上。对于数据通信软件，中心问题是数据传送和过程控制，实现算法简单，采用数据流模型比较合适。对于涉及大量数据的数据处理软件，中心问题是数据处理，包括数据的采集、数据的传送、存储、变换、输出等，一旦数据结构明确了，与它相关的算法就很简单了，因此可以采用实体�D关系模型。如果系统要求有数据库支持，通过数据库获取和存放信息，还需要考虑数据在数据库中的组织方式和存取方法，建立数据库模型。因此，在分析过程中数据模型是首先要集中精力考虑的问题。 
            <br>
            　</span></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
