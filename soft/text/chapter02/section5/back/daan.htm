
<link rel="stylesheet" href="../../../../css/text.css" type="text/css">

<body background="../../../../images/tanchu/di.gif" leftmargin="0" marginwidth="0" marginheight="0">
<P class="section">三、选择填空</P>
<P class="text">1、解答：A. ③,&nbsp; B. ③,&nbsp;&nbsp; C. ①,&nbsp;&nbsp; D. ②,&nbsp;&nbsp; 
  E. ④</P>
<P class="text">2、解答：A. ②,&nbsp; B. ①,&nbsp;&nbsp; C. ⑤,&nbsp;&nbsp; D. ③,&nbsp;&nbsp; 
  E. ⑤</P>
<P class="text">3、解答：A. ②,&nbsp; B. ⑧,&nbsp;&nbsp; C. ④,&nbsp;&nbsp; D. ③,&nbsp;&nbsp; 
  E. ①</P>
<P class="text">4、解答：A. ⑦,&nbsp; B. ②,&nbsp;&nbsp; C. ⑥,&nbsp;&nbsp; D. ③,&nbsp;&nbsp; 
  E. ②<BR>
  &nbsp;<BR>
  5、解答：A. ①&nbsp;&nbsp;&nbsp; B. ③&nbsp;&nbsp;&nbsp;&nbsp; C. ④&nbsp;&nbsp;&nbsp;&nbsp; 
  D. ①&nbsp;&nbsp;&nbsp;&nbsp; E. ①</P>
<P class="text"><span class="section">四、问答题</span><BR>
  <span class="part">1、解答：</span>所谓当前系统可能是需要改进的某个已在计算机上运行的数据处理系统，也可能是一个人工的数据处理过程。当前系统的物理模型客观地反映当前系统实际的工作情况。但在物理模型中有许多物理的因素，随着分析工作的深入，有些非本质的物理因素就成为不必要的负担，因而需要对物理模型进行分析，区分出本质的和非本质的因素，去掉那些非本质的因素即可获得反映系统本质的逻辑模型。所以当前系统的逻辑模型是从当前系统的物理模型抽象出来的。</P>
<P class="text"><span class="part">2、解答：</span>软件需求分析过程中，由于最初分析员对要解决的问题了解很少，用户对问题的描述、对目标软件的要求也很凌乱、模糊，再加上分析员和用户共同的知识领域不多，导致相互间通信的需求。首先，由于分析员和用户之间需要通信的内容相当多，业务知识上的不足，表达方式的不足，可能对某些需求存在错误解释或误解的可能性，造成需求的模糊性。其次，用户和分析员之间经常存在无意识的“我们和他们”的界限，不是按工作需要组成统一的精干的队伍，而是各自定义自己的“版图”，并通过一系列备忘录、正式的意见书、文档，以及提问和回答来相互通信。历史已经证明，这样会产生大量误解。忽略重要信息，无法建立成功的工作关系。</P>
<P><span class="part">3、解答：</span><span class="text">系统分析员处在用户和高级程序员之间，负责沟通用户和开发人员的认识和见解，起着桥梁的作用。一方面要协助用户对所开发的软件阐明要求，另一方面还要与高级程序员交换意见，探讨用户所提要求的合理性以及实现的可能性。最后还要负责编写软件需求规格说明和初步的用户手册。</span><BR>
  &nbsp;<IMG alt="" hspace=0 src="image/01.gif" align=baseline border=0 width="376" height="144"><BR>
  <span class="text">为能胜任上述任务，分析员应当具备如下的素质:<BR>
  (1) 能够熟练地掌握计算机硬、软件的专业知识，具有一定的系统开发经验。<BR>
  (2) 善于进行抽象的思维和创造性的思维，善于把握抽象的概念，并把它们重新整理成为各种逻辑成分，并给出简明、清晰的描述。<BR>
  (3) 善于从相互冲突或混淆的原始资料中抽出恰当的条目来。<BR>
  (4) 善于进行调查研究，能够很快学习用户的专业领域知识，理解用户的环境条件。<BR>
  (5) 能够倾听他人的意见，注意发挥其它人员的作用。<BR>
  (6) 具有良好的书面和口头交流表达能力。</span></P>
<P class="text"><span class="part">4、解答：</span>可行性研究主要做4个方面的研究：经济可行性 ：进行成本�M效益分析。从经济角度判断系统开发是否“合算”。技术可行性 
  ：进行技术风险评价。从开发者的技术实力、以往工作基础、问题的复杂性等出发，判断系统开发在时间、费用等限制条件下成功的可能性。法律可行性 ：确定系统开发可能导致的任何侵权、妨碍和责任。方案的选择 
  ：评价系统或产品开发的几个可能的候选方案。最后给出结论意见。</P>
<P class="text"><span class="part">5、解答：</span>什么是信息？广义地讲，信息就是消息。宇宙三要素（物质、能量、信息）之一。它是现实世界各种事物在人们头脑中的反映。此外，人们通过科学仪器能够认识到的也是信息。信息的特征为：可识别、可存储、可变换、可处理、可传递、可再生、可压缩、可利用、可共享。我们通常讲的信息域就是对信息的多视角考虑。信息域包含3个不同的视图：信息内容和关系、信息流和信息结构。为了完全理解信息域，必须了解每一个视图。<BR>
  �信息结构：它是信息在计算机中的组织形式。一般表示了各种数据和控制对象的内部组织。数据和控制对象是被组织成n维表格，还是组织成有层次的树型结构?&nbsp; 
  在结构中信息与其它哪些信息相关?&nbsp; 所有信息是在一个信息结构中，还是在几个信息结构中?&nbsp; 一个结构中的信息与其它结构中的信息如何联系?&nbsp; 
  这些问题都由信息结构的分析来解决。<BR>
  �信息流：表示数据和控制在系统中传递时的变化方式。输入对象首先被变换成中间信息（数据或控制），然后再变换成输出结果信息。沿着变换路径，可能从已有的数据存储（如磁盘文件或内存缓冲区）中引入附加的信息。对数据进行变换是程序中应有的功能或子功能。两个变换功能之间的数据传递就确定了功能间的接口。<BR>
  �所以，没有信息流的系统相当于没有功能的系统，这样的系统的存在是毫无意义的。而没有信息结构的系统是没有信息的系统，这样的系统不是计算机能够处理的系统。</P>
<P class="text"><span class="part">6、解答：</span>所有的需求分析方法都与一组操作性原则相关联：<BR>
  �・必须理解和表示问题的信息域。<BR>
  �・必须定义软件将完成的功能。<BR>
  �・必须表示软件的行为（作为外部事件的结果）。<BR>
  �・必须对描述信息、功能和行为的模型进行分解，能够以层次方式揭示其细节。<BR>
  �・分析过程应当从要素信息转向细节的实现。<BR>
  �通过使用这些原则，分析员可以系统地处理问题。首先检查信息域以便更完整地理解目标软件的功能，再使用模型以简洁的方式表达目标软件的功能和行为，并利用自顶向下、逐层分解的手段来降低问题的复杂性。在这些处理过程中，因处理需求带来的逻辑约束和因其它系统元素带来的物理约束需要通过软件要素和视图的实现加以检验和确认。<BR>
  �除此以外，Davis建议了一组针对“需求工程”的指导性原则：<BR>
  �・在开始建立分析模型之前应当先理解问题。如果问题没有很好理解就急于求成，常常会产生一个解决错误问题的完美的软件。<BR>
  �・强力推荐使用原型。这样做可以使用户了解将如何与计算机交互，而人们对软件质量的认识常常是基于对界面“友好性”的切身体会。<BR>
  �・记录每一个需求的起源和原因。这是建立对用户要求的可追溯性的第一步。<BR>
  �・使用多个视图，建立系统的数据、功能和行为模型。这样做可帮助分析员从多方面分析和理解问题，减少遗漏，识别可能的不一致之处。<BR>
  &nbsp;�・给需求赋予优先级。因为过短的时限会减少实现所有软件需求的可能性。因此，对需求排定一个优先次序，标识哪些需求先实现，哪些需求后实现。<BR>
  �・注意消除歧义性。因为大多数需求都是以自然语言描述，存在叙述的歧义性问题，造成遗漏和误解。采用正式的技术评审是发现和消除歧义性的好方法。<BR>
  �遵循以上原则，就可能开发出较好的软件需求规格说明，为软件设计奠定基础。</P>
<P><span class="part">7、解答：</span><span class="text">数据流图可以用来抽象地表示系统或软件。它从信息传递和加工的角度，以图形的方式刻画数据流从输入到输出的移动变换过程，同时可以按自顶向下、逐步分解的方法表示内容不断增加的数据流和功能细节。因此，数据流图既提供了功能建模的机制，也提供了信息流建模的机制，从而可以建立起系统或软件的功能模型。<BR>
  数据流图的基本成份有4种：</span><BR>
  <IMG alt="" hspace=0 src="image/02.gif" align=baseline border=0 width="382" height="235"><BR>
  <BR>
  <span class="part">8、解答：</span><span class="text">A. ②&nbsp;&nbsp;&nbsp; B. 
  ⑤&nbsp;&nbsp;&nbsp; C. ①&nbsp;&nbsp;&nbsp; D. ⑥&nbsp;&nbsp;&nbsp; E. ⑧&nbsp;&nbsp;&nbsp; 
  F. ②<BR>
  &nbsp;��其中，D与E的答案可互换。<BR>
  应注意的问题：<BR>
  �① 适当地为数据流、加工、文件、数据的源�M汇点命名。名字应反映该元素的实际含义，避免空洞的名字。如数据、信息处理、计算等名字都不好。<BR>
  �② 画数据流时不要夹带控制流。数据流图中各种数据的加工没有考虑时序关系，引入控制流后，加工之间就有了时序关系，这与画数据流图不考虑实现细节的初衷相违背。<BR>
  �③ 一个加工的输出数据流不要与该加工的输入数据流重名，即使它们的组成成分相同。例如图(c)中加工1.1的输入数据流“报名表”与输出数据流“合格报名表”。<BR>
  �④ 允许一个加工有多个数据流流向另一个加工，也允许一个加工有两个相同的输出数据流流向两个不同的加工。<BR>
  �⑤ 保持父图与子图的平衡。就是说，父图与它的子图的输入数据流与输出数据流应当在数量与名字上都相同。特别的是，如果父图的一个输入（或输出）数据流对应于子图中几个输入（或输出）数据流，但子图中这几个数据流中的数据项合起来正好是父图中的那个数据流，这时它们还算是平衡的。例如，图(b)中加工2的输出数据流“统计分析表”是由“难度分析表”和“分类统计表”组成，那么图(b)与图(d)仍满足父图与子图平衡的条件。<BR>
  �⑥ 在自顶向下的分解过程中，若一个文件首次出现时只与一个加工有关，那么这个文件应作为这个加工的内部文件而不必画出。例如，图(d)中的文件“试题得分表”就是图(b)中加工的内部文件，所以在图(b)中没有画出。<BR>
  �⑦ 保持数据守恒。就是说，一个加工的所有输出数据流中的数据必须能从该加工的输入数据流中直接获得，或者是通过该加工产生的数据。</span></P>
<P><span class="part">9、解答：</span><span class="text">采用条件�M事件网（C�ME网，C�DCondition, 
  E�DEvent）式Petri网。其定义如下：<BR>
  �①当事件e激发时条件c开始成立，则称c是e的后继。此关系用“ ”表示；<BR>
  �②当事件e激发时条件c消失成立，则称c是e的前驱。此关系用“ ”表示；<BR>
  �③当事件e激发时条件c不受影响，则c和e之间没有前驱、后继关系，无边。<BR>
  根据定义，给定程序的C�ME网如下：</span><BR>
  <IMG alt="" hspace=0 src="image/04.gif" align=baseline border=0 width="382" height="443"></P>
<P><BR>
  <span class="part"> 10、 解答：</span><span class="text">分析模型中包含了对数据对象、功能和控制的表示。在每一种表示中，数据对象和控制项都扮演一定的角色。为表示每个数据对象和控制项的特性，建立了数据词典。数据词典精确地、严格地定义了每一个与系统相关的数据元素，并以字典式顺序将它们组织起来，使得用户和分析员对所有的输入、输出、存储成分和中间计算有共同的理解。<BR>
  在数据词典的每一个词条中应包含以下信息：<BR>
  �① 名称：数据对象或控制项、数据存储或外部实体的名字。<BR>
  �② 别名或编号。<BR>
  �③ 分类：数据对象？加工？数据流？数据文件？外部实体？控制项（事件�M状态）？<BR>
  �④ 描述：描述内容或数据结构等。<BR>
  �⑤ 何处使用：使用该词条（数据或控制项）的加工。</span></P>
<P class="text"><span class="part">11、解答：</span>传统软件生存期范型的典型代表是“瀑布模型”。这种模型的核心是将软件生存期划分为软件计划、需求分析、软件设计、编码、测试和运行维护等阶段，根据不同阶段工作的特点，运用不同的方法、技术和工具来完成该阶段的任务。软件开发人员遵循严格的规范，在每一阶段工作结束时都要进行严格的阶段评审和确认，以得到该阶段的一致、完整、正确和无歧义性的文档资料，并以它们做为下一阶段工作的基础。<br>
  <BR>
  �传统思想强调每一阶段的严格性，尤其是开发初期要有良好的软件规格说明，主要是源于过去软件开发的经验教训，即在开发的后期或运行维护期间来修改不完善的规格说明要付出巨大的代价。但是，要想得到一个完整准确的规格说明不是一件容易的事。特别是对于一些大型的软件项目，在开发的早期用户往往对系统只有一个模糊的想法，很难完全准确地表达对系统的全面要求，软件开发人员对于所要解决的应用问题认识更是模糊不清。经过详细的讨论和分析，也许能得到一份较好的规格说明，但却很难期望该规格说明能将系统的各个方面都描述得完整、准确、一致，并与实际环境相符。很难通过它在逻辑上推断出（不是在实际运行中判断评价）系统运行的效果，以此达到各方对系统的共同理解。随着开发工作向前推进，用户可能会产生新的要求，或因环境变化，要求系统也能随之变化；开发人员又可能在设计与实现的过程中遇到一些没有预料到的实际困难，需要以改变需求来解脱困境。因此规格说明难以完善、需求的变更、以及通信中的模糊和误解，都会成为软件开发顺利推进的障碍。尽管在传统软件生存期管理中通过加强评审和确认，全面测试，甚至依靠维护阶段能够缓解上述问题，但不能从根本上解决这些问题。<BR>
  �为了解决这些问题，逐渐形成了软件系统的快速原型的概念。由于运用原型的目的和方式不同，原型可分为以下两种不同的类型：<BR>
  �① 废弃型：先构造一个功能简单而且质量要求不高的模型系统，针对这个模型系统反复进行分析修改，形成比较好的设计思想，据此设计出更加完整、准确、一致、可靠的最终系统。系统构造完成后，原来的模型系统就被废弃不用。<BR>
  �② 追加型或演化型：先构造一个功能简单而且质量要求不高的模型系统，作为最终系统的核心，然后通过不断地扩充修改，逐步追加新要求，最后发展成为最终系统。<br>
  <BR>
  建立快速原型进行系统的分析和构造，有以下的优点：<BR>
  �① 增进软件者和用户对系统服务需求的理解，使比较含糊的具有不确定性的软件需求（主要是功能）明确化。由于这种方法能在早期就明确了用户的要求，因此可防止以后由于不能满足用户要求而造成的返工，从而避免了不必要的经济损失，缩短了开发周期。<BR>
  �② 软件原型化方法提供了一种有力的学习手段。通过原型演示，用户可以亲身体验早期的开发过程，获得关于计算机和被开发系统的专门知识。软件开发人员也可以获得用户对系统的确切要求，学习到应用范围的专业知识。<BR>
  �③ 使用原型化方法，可以容易地确定系统的性能，确认各项主要系统服务的可应用性，确认系统设计的可行性，确认系统作为产品的结果。因而它可以作为理解和确认软件需求规格说明的工具。<BR>
  �④ 软件原型的最终版本，有的可以原封不动地成为产品，有的略加修改就可以成为最终系统的一个组成部分，这样有利于建成最终系统。</P>
<P><span class="part">12、解答：</span><span class="text">原型的开发和使用过程叫做原型生存期。下图是原型生存期的模型及其细化。</span><BR>
  <IMG alt="" hspace=0 src="image/05a.gif" align=baseline border=0><BR>
  <IMG alt="" hspace=0 src="image/05b.gif" align=baseline border=0></P>
<P class="text">�① 快速分析 ：在分析者和用户的紧密配合下，快速确定软件系统的基本要求。<BR>
  �② 构造原型 ：根据基本规格说明，尽快实现一个可运行的原型系统。<BR>
  �③ 运行和评价原型 ：用户试用原型，考核评价原型的特性。纠正过去交互中的误解和分析中的错误，增补新的要求，提出全面的修改意见。<BR>
  �④ 修正和改进 ：根据修改意见进行修改。如果用修改原型的过程代替快速分析，就形成了原型开发的迭代过程。在一次次的迭代过程中不断将原型完善，以接近系统的最终要求。<BR>
  �⑤ 判定原型完成 ：经过修改或改进的原型，达到参与者一致认可，则原型开发的迭代过程可以结束。为此，应判断有关应用的实质是否已经掌握，判定的结果有两个不同的转向，一是继续迭代验证，一是进行详细说明。<BR>
  �⑥ 判断原型细部是否说明 ：判断组成原型的细部是否需要严格地加以说明。<BR>
  �⑦ 原型细部的说明 ：通过文件加以说明那些不能通过原型说明的项目。<BR>
  �⑧ 判定原型效果 ：考察新加入的需求信息和细部说明信息，看其对模型有什么影响? 是否会影响模块的有效性? 如果模型受到影响，则要进行修正和改进。<BR>
  �⑨ 整理原型和提供文档<BR>
  �快速原型方法的提出使得传统的软件生存期在思想方法上受到了影响。如果只是在局部运用原型化方法，若将原型开发过程用于软件生存期的某一个阶段内，那么传统的软件生存期依然不变，只是阶段内部的软件定义或开发活动采用了新的方法。但若原型开发过程代替了传统生存期中的多个阶段，则软件开发过程就成为一种新的形式。<BR>
  �图(a)表示了使用原型方法的软件生存期模型。原型开发过程处于核心，表示可在生存期的任何阶段中引入原型开发过程，也可合并若干阶段，用原型开发过程代替。图(b)详细描述了在各个阶段可能引入原型开发过程的软件开发过程。其中在原型开发过程的最后加上了一个“是否构造新原型”的判断，这是针对在系统开发的过程中有可能为不同的目的而要使用多个原型的情况而设。<BR>
  �① 辅助或代替分析阶段 ：在分析阶段利用快速原型方法可以得到良好的需求规格说明。在整体上仍然采用传统的模式，但使用原型化方法来补充和完善需求说明以达到一致、准确、完整、无多义性地反映用户要求，从而代替了传统的仅由复审和确认来提高需求规格说明质量的方法。并能在早期克服潜在的误解、遗漏和错误，尽量不让潜在的问题遗留到开发的后期，减少将来维护的代价。<BR>
  �② 辅助设计阶段 ：在设计阶段引入原型，可根据需求分析得到的规格说明进行快速分析，得到实现方案后立即构造原型，通过运行，考察设计方案的可行性与合理性。在这个阶段引入原型，可以迅速得到完善的设计规格说明。原型可能成为设计的总体框架，也可能成为最终设计的一部分或补充的设计文档。<BR>
  �③ 代替分析与设计阶段 ：这时不再遵循传统的严格按阶段进行软件开发的要求，而是把原型方法直接应用到软件开发的整体过程。在实施原型开发的过程中，不再考虑完善的需求说明，把分析、定义和设计交织在一起，通过原型的构造、评价与改进的迭代过程，逐步向最终系统的全面要求靠近。由于在分析的同时也考虑了设计与实现的要求，能更有效地确定系统的需求和设计规格说明。<BR>
  �④ 代替分析、设计和实现阶段 ：在软件开发环境的支持下，通过原型生存期的反复迭代，直接得到软件的程序，交付系统测试。这属于进化型的原型开发，由初始的基本需求得到最初的原型开始，一直进化到软件的整体系统，并满足用户的一切可能的要求。<BR>
  �⑤ 代替全部定义与开发阶段 ：这是典型的进化型原型开发方法。完全摆脱了传统的软件生存期模式，通过反复的原型迭代过程，直接得到最终的软件产品。系统测试作为原型评价工作的一部分，融入原型的开发过程。</P>
<P><span class="part">13、解答：</span><span class="text">软件需求规格说明是分析任务的最终产物，通过建立完整的信息描述、详细的功能和行为描述、性能需求和设计约束的说明、合适的验收标准，给出对目标软件的各种需求。<BR>
  软件需求规格说明的框架如下：</span><BR>
  <IMG alt="" hspace=0 src="image/06.gif" align=baseline border=0 width="381" height="202"><BR>
  <span class="part"><BR>
  14、解答：</span><span class="text">不能接受的3条意见是 (5)、(6)、(10)。人机交互界面首先考虑的是用户如何使用起来方便，与编程习惯、设计技巧无关。此外，屏幕上信息应很清晰易懂，安全保密与屏幕显示无关。<BR>
  </span> </P>
