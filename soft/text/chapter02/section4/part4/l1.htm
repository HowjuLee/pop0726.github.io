<html>
<head>
<title>l1</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../../css/text.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" border="0" cellspacing="0" cellpadding="0" height="100%">
  <tr>
    <td valign="top">
      <table width="92%" border="0" cellspacing="0" cellpadding="0" align="center">
        <tr>
          <td><span class="text"><br>
            </span><span class="section">(1) 可执行规格说明</span><span class="text"><br>
            <br>
            　　可执行规格说明是用于需求规格说明的一种自动化技术。可执行规格说明语言可描述系统要&quot;做什么&quot;，但它并不描述系统要&quot;怎样做&quot;。使用这种方法，人们可以直接观察他们用语言规定的任何系统性行为。可执行规格说明包括形式化规格说明、有限状态模型和可执行的数据流图。<br>
            <br>
            </span><span class="section">(2) 基于脚本的设计</span><span class="text"><br>
            <br>
            　　一个脚本可模拟在系统运行期间用户经历的事件。它提供了输入/处理/输出的屏幕格式和有关对话的模型。因此，脚本能够给用户显示系统的逼真的视图，使用户得以判断是否符合他的意图。<br>
            <br>
            </span><span class="section">(3) 自动程序设计</span><span class="text"><br>
            <br>
            　　自动程序设计是可执行规格说明的替身，主要是指在程序自动生成环境的支持下，利用计算机实现软件的开发。它可以自动地或半自动地把用户的非过程性问题规格说明转换为某种高级语言程序，主要手段有以下4种：<br>
            <br>
            </span><span class="part">・演绎综合手段：</span><span class="text"><br>
            　　基于数学推理的构造式证明。<br>
            <br>
            </span><span class="part">・程序变换手段：</span><span class="text"><br>
            　　将一程序转换成另一功能等价的程序，并保持其正确性不变。变换可在纵向进行（如将某一抽象级别的程序转换成较低抽象级别的程序的方法）；也可在横向进行（如在相同级别上的变化，如简化表达式、消除递归等）；还可纵横结合。<br>
            <br>
            </span><span class="part">・实例推广手段：</span><span class="text"><br>
            　　从实例特征出发，将它推广为待编程序的特征，最后得到程序。<br>
            <br>
            </span><span class="part">・过程化手段：</span><span class="text"><br>
            　　研究甚高级语言的编译和知识的过程化。<br>
            <br>
            　　自动程序设计不仅适合于原型系统的开发，还能够开发目标系统。<br>
            　</span></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
