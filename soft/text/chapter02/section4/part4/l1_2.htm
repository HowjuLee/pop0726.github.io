<html>
<head>
<title>l1_2</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../../css/text.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" border="0" cellspacing="0" cellpadding="0" height="100%">
  <tr>
    <td valign="top">
      <table width="92%" border="0" cellspacing="0" cellpadding="0" align="center">
        <tr>
          <td><span class="text"><br>
            </span><span class="section">(4)专用语言</span><span class="text"><br>
            <br>
            　　专用语言是应用领域的模型化语言。在原型开发中使用专用语言，可方便用户和软件开发者在计划中的系统特性方面的交流。<br>
            <br>
            </span><span class="section">(5) 软件复用技术</span><span class="text"><br>
            <br>
            软件复用技术可分为两大类：</span><span class="part">合成技术</span><span class="text">和</span><span class="part">生成技术</span><span class="text">。<br>
            <br>
            </span><span class="part">・合成技术：</span><span class="text"><br>
            　　可复用的软件构件可以是对某一函数、过程、子程序、数据类型、算法等可复用软件成份的抽象，利用这些构件来构造软件系统。用构件合成较大的构件有三种方式：一是连接；二是消息传递和继承；三是管道(pipe)机制。<br>
            <br>
            </span><span class="part">・生成技术：</span><span class="text"><br>
            　　利用可复用的模式，通过生成程序产生一个新的程序或程序段，产生的程序可以看做是模式的实例。可复用的模式有两种不同的形式：代码模式和规则模式。前者的例子是应用生成器，可复用的代码模式就存在于生成器自身。通过特定的参数替换，生成抽象软件模块的具体实体。后者的例子是变换系统，它通常采用超高级的规格说明语言，形式化地给出软件的需求规格说明，利用程序变换系统（有时要经过一系列的变换），把用超高级规格说明语言编写的程序转化成某种可执行语言的程序。<br>
            </span><span class="part"><br>
            </span><span class="section">(6) 简化假设</span><span class="text"><br>
            <br>
            　　简化假设是在开发过程中使设计者迅速得到一个简化的系统所做的假设。尽管这些假设可能实际上并不能成立，但它们在原型开发过程中可以使开发者的注意力集中在一些主要的方面。 
            <br>
            　</span></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
