<html>
<head>
<title>l1_2</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../../css/text.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" border="0" cellspacing="0" cellpadding="0" height="100%">
  <tr>
    <td valign="top">
      <table width="92%" border="0" cellspacing="0" cellpadding="0" align="center">
        <tr>
          <td><span class="text"><br>
            <br>
            　　由于运用原型的目的和方式不同，在使用原型时可采取以下两种不同的策略：<br>
            </span><span class="part">・废弃策略：</span><span class="text"><br>
            　　先构造一个功能简单而且质量要求不高的模型系统，针对这个模型系统反复进行分析修改，形成比较好的设计思想，据此设计出更加完整、准确、一致、可靠的最终系统。系统构造完成后，原来的模型系统就被废弃不用。探索型和实验型的原型一般属于这种策略。<br>
            <br>
            </span><span class="part">・追加策略：</span><span class="text"><br>
            　　先构造一个功能简单而且质量要求不高的模型系统，作为最终系统的核心，然后通过不断地扩充修改，逐步追加新要求，最后发展成为最终系统。它对应于演化型的原型。<br>
            <br>
            　　采用什么形式，什么策略主要取决于软件项目的特点和者的素质，以及支持原型开发的工具和技术。要根据实际情况的特点加以决策。<br>
            <br>
            　　原型系统不同于最终系统，它需要快速实现，投入运行。因此，必须注意功能和性能上的取舍。可以忽略一切暂时不必关心的部分，力求原型的快速实现。但要能充分地体现原型的作用，满足评价原型的需求。要根据构造原型的目的，明确规定对原型进行考核和评价的内容，如界面形式、系统结构、功能或模拟性能等等。构造出来的原型可能是一个忽略了某些细节或功能的整体系统结构，也可以仅仅是一个局部，如用户界面、部分功能算法程序或数据库模式等。总之，在使用原型化方法进行软件开发之前，必须明确使用原型的目的，从而决定分析与构造内容的取舍。<br>
            　</span></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
