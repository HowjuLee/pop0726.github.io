<html>
<head>
<title>l1</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../../css/text.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" border="0" cellspacing="0" cellpadding="0" height="100%">
  <tr>
    <td valign="top">
      <table width="92%" border="0" cellspacing="0" cellpadding="0" align="center" height="8">
        <tr> 
          <td class="text">�<br>
            ��软件的设计质量与程序设计语言的技术性能无关（面向对象设计例外）。但在实现软件设计转化为程序代码时，转化的质量往往受语言性能的影响。因而也会影响到设计方法。<br>
            ��语言的技术性能对测试和维护的影响是多种多样的。例如，直接提供结构化构造的语言有利于减少循环带来的复杂性（即McCabe复杂性），使程序易读、易测试、易维护。另一方面，语言的某些技术特性却会妨碍测试。例如，在面向对象的语言程序中，由于实行了数据封装，使得监控这些数据的执行状态变得比较困难；由于建立了对象类的继承结构，使得高内聚、低耦合的要求受到破坏，增加了测试的困难。 
            <br>
            ��只要语言程序的可读性强，而且可以减少程序的复杂性，这样的程序设计语言对于软件的维护就是有利的。 <br>
            ��总之，通过仔细地分析和比较，选择一种功能强而又适用的语言，对成功地实现从软件设计到编码的转换，提高软件的质量，改善软件的可测试性和可维护性是至关重要的。</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
