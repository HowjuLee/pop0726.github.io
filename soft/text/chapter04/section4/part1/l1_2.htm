<html>
<head>
<title>l1</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../../css/text.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" border="0" cellspacing="0" cellpadding="0" height="100%">
  <tr>
    <td valign="top">
      <table width="92%" border="0" cellspacing="0" cellpadding="0" align="center" height="8">
        <tr> 
          <td class="text">��<br>
            <span class="part">(2) 二义性</span><br>
            ��虽然语言的编译程序总是以一种固定的规则来解释语句，但有些语法规则可能会导致读者以不同的方式来理解语句，这就产生了心理上的二义性。<br>
            　</td>
        </tr>
        <tr> 
          <td class="text" valign="top" align="left"><img src="../../../../images/tubiao/lt.gif" width="25" height="20" alt="例题">��例如，针对一个逻辑表达式：( 
            A &gt;= &quot;0&quot; and A &lt;= &quot;9&quot; )，PASCAL语言规定关系运算符&quot;&gt;=&quot;、&quot;&lt;=&quot;等的运算优先级低于逻辑运算符&quot;and&quot;的运算优先级，但FORTRAN语言正好相反，&quot;&gt;= 
            (.GE.)&quot;、&quot;&lt;= (.LE.)&quot;等的运算优先级高于逻辑运算符&quot;and&quot;的运算优先级。因此读者可能对这个逻辑表达式有不同的理解。<br>
            　</td>
        </tr>
        <tr> 
          <td class="text">�� 另一种容易引起混淆的原因是：允许对缺省数据类型说明的标识符做非标准使用。例如，在FORTRAN语言中有个变量KDELTA， 
            按照缺省数据说明它应具有整数类型。然而，经过显式类型说明 REAL KDELTA，就赋予KDELTA以实型属性，于是由于心理上的混淆就容易出错。 
            <p>��缺乏一致性和心理上的二义性往往同时存在。如果一个程序设计语言具有这些特性的消极方面，那么用这种语言编写出来的程序可读性就差，同时用这种语言编程也容易出错。<br>
              ��</p>
          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
