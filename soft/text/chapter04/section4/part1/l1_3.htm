<html>
<head>
<title>l1</title>
<meta http-equiv="Content-Type" content="text/html; charset="utf-8"">
<link rel="stylesheet" href="../../../../css/text.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" border="0" cellspacing="0" cellpadding="0" height="100%">
  <tr>
    <td valign="top">
      <table width="92%" border="0" cellspacing="0" cellpadding="0" align="center" height="8">
        <tr> 
          <td class="text"> ��<br>
            <span class="part">(3) 简洁性</span><br>
            ��表示程序员为了用该语言编写程序必须记忆的语言成分的数量。人们要掌握一种语言，必须记住语句的种类、可使用的保留字和缩写字的种类、数据类型的种类和缺省说明、算术运算符和逻辑运算符的种类、系统内标准函数的数目等。这些成分的种类越多，简洁性越差，人们越难以掌握。 
            <br>
            ��太简洁了也不一定好。例如，APL就是一种特别简洁的程序设计语言， 它具有功能很强又很简洁的运算符，允许以相当少的编码完成含有大量算术运算和逻辑运算的过程。 
            但遗憾的是，APL的简洁性同时给它的程序带来的是过于紧凑，因此它的程序难读、难懂，并可能使得一致性变差（例如，同一运算符符号有单目和双目两种使用方式）。<br>
            ��</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
</body>
</html>
