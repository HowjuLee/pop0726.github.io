 
<link rel="stylesheet" href="../../../../../css/text.css" type="text/css">
 
<body bgcolor="#FFFFFF" background="../../../../../images/tanchu/di.gif" leftmargin="0" marginwidth="0">
<P class="section">三、选择填空题</P>
<P class="text"><span class="part">1、解答：</span>正确的叙述有(2)、(3)、(4)、(7)、(8)。</P>
<P class="text"><span class="part">2、解答：</span>(1)、(3)、(5)、(7)、(9)是正确的。</P>
<P class="text"><span class="part">3、解答：</span>(1)、(4)、(6) 是正确的。</P>
<P class="text"><span class="part">4、解答：</span>A. ②,&nbsp; B. ①,&nbsp; C. ①,&nbsp; 
  D. ①,&nbsp; E. ③,&nbsp; F. ②,&nbsp; G. ④ 除以上几种论述外，其它的叙述都不对。<BR>
  �例如，程序中加入临时变量，可能会改变程序执行中的时序关系，造成程序出错。在表达式中加入括号，可以明确标明表达式的运算优先关系，避免因语言方面的原因可能潜藏的错误。程序模块的大小要适中，不是编得越短越好。注解加多少，由问题得难度来决定，但决不是可有可无的。最后要限制GOTO 
  语句的使用，因为它可能会造成思路混乱、极易出错。<BR>
  �A.计算机用户通常是使用“编辑程序（Editor）”对源程序文本进行录入、编辑、存储的，不用自举程序（Bootstrap）、连接程序（Loader）或文本格式化程序（Textformatter）。<BR>
  �B. 解释系统是边解释源程序边执行该源程序，编译程序是先编译出源程序的对应目标代码，再执行这些目标代码。所以编译程序编出的目标代码运行效率高。<BR>
  �C. FORTRAN程序是以SUBROUTINE为单元的块状结构，对每一个SUBROUTINE进行编译后通过连接形成整个程序系统。它不是嵌套的?BR&gt;D. 
  国际上最流行的商业和行政管理语言是COBOL语言。<BR>
  �E. 国际上最流行的用于数值计算的语言是FORTRAN语言。<BR>
  �F. 美国国防部主持开发高级程序设计语言Ada时，曾确定以ALGOL语言作为Ada研究的出发点。所以，Ada、ALGOL、Pascal、BASIC和C都是ALGOL系的一些程序语言。<BR>
  �G. 在人工智能领域，目前最广泛使用的高级语言是Lisp。</P>
<P class="text"><span class="part">5、解答：</span>A. ③&nbsp;&nbsp; B. ①、⑥&nbsp;&nbsp; 
  C. ①、⑦<BR>
  �A. 汇编程序实际是指汇编语言的处理程序。而用汇编语言写成的源程序一般称为汇编语言程序。<BR>
  �B. 为了实现递归子程序的正确调用，一般使用堆栈来保存每次调用后返回到上一层程序的返回地址、本次递归调用时的形式参数、局部变量等。<BR>
  �C. UNIX操作系统是Bell实验室研制的，用C语言写出来的。</P>
<P class="text"><span class="part">6、解答：</span>A. ⑤,&nbsp; B. ②,&nbsp; C. ③,&nbsp; 
  D. ①,&nbsp; E. ③</P>
<P class="section">四、问答题</P>
<P class="text"><span class="part">1、 解答：<br>
  </span>(1) 的功能是对换A[I] 与A[T] 的内容。等效的程序段可以是：<BR>
  ��WORK = A[T];&nbsp;&nbsp; A[T] = A[I];&nbsp;&nbsp; A[I] = WORK;<BR>
  (2) 的功能是建立一个单位矩阵V。等效的程序段可以是：<BR>
  ��for ( i = 1;&nbsp; i &lt;= n;&nbsp; i ++ ) <BR>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
  ���for ( j = 1;&nbsp; j &lt;= n;&nbsp; j ++ )<BR>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
  ����if ( i == j ) V[i][j] = 1;<BR>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
  ����else V[i][j] = 0;</P>
<P><span class="part">2、解答：</span><BR>
  <IMG alt="" hspace=0 src="image/01.gif" align=baseline border=0><BR>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="part">����纷乱如麻的程序流程</span><span class="text"><BR>
  �早在1963年，针对当时流行的ALGOL语言，Peter Naur指出，在程序中大量地，没有节制地使用GOTO语句，会使程序结构变得非常混乱。但是很多人还不太注意这一问题。以致许多人写出来的程序仍然是纷乱如麻的。<BR>
  �1965年，E.W.Dijkstra在一次会议上提出，应当把GOTO语句从高级语言中取消。并指出，程序的质量与程序中包含的GOTO语句的数量成反比。在这种思想的影响下，当时新开发的几种高级程序设计语言，例如LISP、ISWIM、BLISS等，都把GOTO语句取消了。<BR>
  �1966年，Bohm与Jacopini证明了任何单入口单出口的没有“死循环”的程序都能由三种最基本的控制结构构造出来。这三种基本控制结构就是“顺序结构”、“选择IF－THEN－ELSE结构”、“重复DO－WHILE或DO－UNTIL结构”。<BR>
  �1968年，Dijkstra在写给&lt;ACM&gt;（美国计算机协会通讯）杂志编辑部的信中再次建议从一切高级语言中取消GOTO语句，只使用三种基本控制结构编写程序。他的建议引起了激烈的争论。争论集中在如何看待GOTO语句的问题上。赞成取消 
  GOTO 语句的一方认为，GOTO语句对程序清晰性有很大破坏作用，凡是使用GOTO语句多的程序，其控制流时而GOTO向前，时而GOTO向后，常使程序变得很难理解，从而增加查错和维护的困难，降低程序的可维护性。但以D.E.Knuth为代表的另一方认为，GOTO 
  语句虽然存在着破坏程序清晰性的问题，但不应完全禁止。因为GOTO语句概念简单，使用方便，在某些情况下，保留GOTO语句反能使写出的程序更加简洁，并且GOTO语句可直接得到硬件指令的支持。经过争论，人们认识到，不是简单地去掉GOTO语句的问题，而是要创立一种新的程序设计思想、方法和风格，以显著提高软件生产率和软件质量，降低软件维护的成本。<BR>
  �1970年代初N.Wirth在设计Pascal语言时对GOTO语句的处理可被当做对GOTO 语句争论的结论。在Pascal语言中设置了支持上述三种基本控制结构的语句；另一方面，GOTO语句仍然保留在该语言中。不过，N.Wirth解释说，通常使用所提供的几种基本控制结构已经足够，习惯于这样做的人不会感到GOTO语句的必要。也就是说，在一般情况下，可以完全不使用GOTO语句。如果在特殊情况下，由于特定的要求，偶然使用GOTO语句能解决问题，那也未尝不可，只是不应大量使用罢了。<BR>
  �事实上，大量采用GOTO语句实现控制路径，会使程序路径变得复杂而且混乱，从而使程序变得不易阅读，给程序的测试和维护造成困难，还会增加出错的机会，降低程序的可靠性。因此要控制GOTO语句的使用。但有时完全不用GOTO语句进行程序编码，比用GOTO语句编出的程序可读性差。例如，在查找结束时，文件访问结束时，出现错误情况要从循环中转出时，使用布尔变量和条件结构来实现就不如用GOTO语句来得简洁易懂。</span></P>
<P class="text"><span class="part">3、解答：</span><br>
  (1) 它是一个单入口、两出口的结构，所以是一个非结构化的程序。<BR>
  (2) 等价的结构化程序：<BR>
  �enum Boolean { false, true }<BR>
  �Boolean flag = true;<BR>
  �while ( P &amp;&amp; flag ) {<BR>
  &nbsp;&nbsp; ���do G;<BR>
  ���if ( !Q ) flag = false;<BR>
  �}<BR>
  (3) 使用break的程序<BR>
  &nbsp;&nbsp;�while ( P ) {<BR>
  &nbsp;&nbsp;&nbsp;&nbsp; ���do G;<BR>
  &nbsp;&nbsp;&nbsp;&nbsp; ���if ( !Q ) break;<BR>
  &nbsp;&nbsp;�}</P>
<P class="text"><span class="part">4、解答：</span>等效的控制流程图如下图中 (a) 所示。先判断型循环要求在进入循环体之前，先判断是否要继续执行此循环。因此，在这种控制结构的入口处应是一个判断语句。这种循环的循环体可能一次也不执行。参看图 
  (b)。</P>
<P><IMG alt="" hspace=0 src="image/04.gif" align=baseline border=0 width="268" height="230"><br>
  <img src="image/04_1.gif" width="176" height="230"> <BR>
  <BR>
  <span class="part">5、解答：</span><span class="text">对应的N-S图如下。</span></P>
<P><IMG alt="" hspace=0 src="image/06.gif" align=baseline border=0 width="363" height="144"></P>
<P class="text">对应PAD图如下。</P>
<P><IMG alt="" hspace=0 src="image/07.gif" align=baseline border=0 width="392" height="169"><BR>
  <span class="text">McCabe复杂性度量都为3。</span></P>
<P class="text"><span class="part">6、解答：<br>
  </span>(1) 结构化的程序流程图：<br>
  <img alt="" hspace=0 src="image/08.gif" align=baseline border=0 width="389" height="489"><br>
  <span class="text">(2) N-S图：</span><BR>
  <img alt="" hspace=0 src="image/09.gif" align=baseline border=0 width="386" height="328"> 
</P>
<P><span class="text">(3) 环路复杂性度量 V(G) = 6</span><BR>
  <br>
  <BR>
  <span class="part">7、解答：</span><span class="text">开发规模相同，但复杂性不同的软件，花费的成本和时间会有很大的差异。因此到目前为止，还没有一个软件复杂性度量的方法能够全面、系统地度量任一软件的复杂性，某一种度量方法只偏重于某一方面。所以，用某一种软件复杂性来度量不同类型的程序，所得到的度量值不一定真正反映它们的复杂性。但对同一类型的程序，按某种视点来度量它们的复杂性，其结果还是比较有价值的?</span>
<P class="text"><span class="part">8、解答：</span><br>
  K.Magel从六个方面描述软件复杂性：<BR>
  �① 理解程序的难度；<BR>
  �② 改错及维护程序的难度；<BR>
  �③ 向他人解释程序的难度；<BR>
  �④ 按指定方法修改程序的难度；<BR>
  �⑤ 根据设计文档编写程序的工作量；<BR>
  �⑥ 执行程序时需要资源的程度。<BR>
  软件复杂性度量模型应遵循的基本原则：<BR>
  �⑴ 软件复杂性与程序大小的关系不是线性的；<BR>
  �⑵ 控制结构复杂的程序较复杂；<BR>
  �⑶ 数据结构复杂的程序较复杂；<BR>
  �⑷ 转向语句使用不当的程序较复杂；<BR>
  �⑸ 循环结构比选择结构复杂，选择结构又比顺序结构复杂；<BR>
  �⑹ 语句、数据、子程序和模块在程序中的次序对软件复杂性都有影响；<BR>
  �⑺ 全程变量、非局部变量较多时程序较复杂；<BR>
  �⑻ 参数按地址传递比按值传递更复杂；<BR>
  �⑼ 函数副作用比显式参数传递更难以琢磨；<BR>
  �⑽ 具有不同作用的变量共用一个名字时较难理解；<BR>
  �⑾ 模块间或过程间联系密切的程序较复杂；<BR>
  �⑿ 嵌套深度越深程序越复杂。<BR>
  �最典型的两种程序复杂性度量的方法中，McCabe环路复杂性度量就是针对基本原则(2)制定的度量模型；Halstead软件科学则是针对程序中操作符和操作数的出现频度而制定的度量模型?</P>


